---
blogpost: true
date: 2017-05-01
category: project-21578
---

# Ghosting
Published on 2017-05-01 in {ref}`project-21578`.

When I realized that the IS31FL3733 chip is not going to handle the
button scanning well enough for this use case, I decided to design a
new prototype board, with the buttons connected directly to the GPIO
pins of the Feather.

However, I want this to work with all Feather boards, including the
ESP8266-based Feather HUZZAH, which means that I only have a few GPIO
pins to work with. A quick count gave me 7 pins: GPIO0, GPIO2, GPIO12,
GPIO13, GPIO14, GPIO15 and GPIO16. However, there are some caveats.
The GPIO15 pin has to be pulled low at boot, otherwise the ESP8266
will boot into some weird mode. The same with GPIO0 and GPIO2 being
pulled high. And finally the GPIO16 is a bit special and doesn't have
an internal pull-up.

I have 6 buttons, so with the naive approach I will need 6 of the GPIO
pins. I made a quick go at the PCB for that, together with six
external pull-down resistors. That turned out to be much more complex
than anticipated. Also, I really can't leave those pull-down resistors
on GPIO2 or GPIO0, so I'm one pin short.

I considered my options. I could ditch the resistors (which would
simplify the design a lot) and use internal pull-ups (which would also
solve the problem of the pin state at boot). Hmmm... a quick redesign,
and it already looks much better. But I can't use GPIO16 (no pull-up),
and the GPIO2 has a LED on it, which lights when you press the button.
It would be nice to at least leave that one free...

Fortunately there other ways of connecting buttons. I can make a key
matrix and scan it. Let's see, I have 6 buttons, so the best matrix I
can make is 3x2, requiring a total of 5 pins. Not much, but progress.
I quickly made another PCB design using that, leaving the GPIO16 and
GPIO2 pins free. Perfect! At this point I was pretty late, so I saved
the design, generated the gerber files and ordered the prototype PCB
at OSHPark. And went to bed.

And then, lying in the bed, I realized that my design has a fatal
flaw: ghosting. It's a game console, and people are not going to just
press one button at a time like the cultured citizens they are. They
are going to be mashing all the buttons at once, trying to beat the
game. And the simple key matrices, the kind that I used in this
design, have a problem when several keys are pressed at once: the keys
connect together several rows and columns of the matrix, and in effect
the microcontroller thinks that more buttons are pressed than actually
are. A simple solution for that problem is to add diodes to every
button, so that it won't connect the columns and rows in both ways --
this way preventing the columns that are not currently selected by the
scanning algorithm from getting power. However, at this point the PCB
was ordered and there was simply no room to add 6 additional diodes to
it anyways.

For now I decided to just test the prototype when it arrives and work
on the software and the games a little bit, ignoring the ghosting
problem, and later I will look for a separate IÂ²C chip that will
handle the keys for me.

