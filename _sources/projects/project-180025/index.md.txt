:::{post} 2021-05-26
:category: project
:tags: 2021hackadayprize, ongoing project, hardware
:image: 1
:exclude:

Cheap four-legged insect robot
:::

# Fluffbug

Cheap four-legged insect robot


<div class="project-thumb">

:::{image} images/thumb-2179101674149187718.JPG
:target: /_images/2179101674149187718.JPG
:::
:::{image} images/thumb-1049221629754308611.jpg
:target: /_images/1049221629754308611.jpg
:::
:::{image} images/thumb-4871271622052087533.jpg
:target: /_images/4871271622052087533.jpg
:::
:::{image} images/thumb-699141665927521334.jpg
:target: /_images/699141665927521334.jpg
:::
</div>


This is a continuation of the journey started with {ref}`project-6050` to create an affordable walking desktop robot.


## 



:::{image} images/4876491664647086881.gif

:::



## What is this?

It's a four-legged walking robot that fits on your desk, can be
programmed with an USB cable without installing any special software
on your computer, can be built on a budget of less than $30, and that
can be easily expanded or modified, to try out new ideas. Those are
the basic requirements I have set myself for this. But why?


## Why am I doing this?

Because I think that the details about how such robots are able to
walk, without crawling or dragging on the floor, are very interesting,
and that making a physical robot work is the best possible way of
learning about it—fun and rewarding. There is a big hurdle in getting
into this—most of the robots you could get are either super-expensive
or simple toys with hard-wired gaits. There are now some reasonable
kits out there, such as those robots made by Petoi, but I think I can
still do better than that in terms of both affordability and removing
other barriers.


## Why is this hard?

Building a walking quadruped is surprisingly easy—once you know how.
You literally just need any microcontroller development board,
battery, a bunch of servos, ice cream sticks and hot glue. A few hours
of work, and a few weeks of banging your head against a wall while
trying to get it all to work, and you are done. That's the easy part.

The challenging part is designing and documenting it all so that it
can be repeated or modified and expanded, without wasting time, and
with as little frustration as possible, and on a budget. This means I
don't only need to get it to work, I need to think about the best ways
of getting it to work, and then about the best ways of explaining
them.


## When will it be finished?

Probably never. That doesn't mean it won't be usable. I hope to get it
to a point where it can be built by others as soon as possible. But
it's one of those projects that are never completely finished, because
the context in which they work keeps changing. New parts become
available, such as new microcontrollers, sensors or even servos and
batteries. Others become obsolete or otherwise hard to obtain. New
fabrication techniques, such as laser-cutting or 3D-printing become
feasible for an average hobbyist. There might even be new materials on
the horizon! And the fastest changes are in the software tools
available—a few years ago the only ways you could program a
microcontroller was assembly, or maybe, if you were lucky, some
limited version of C. Today we have Python code running on them in
real time, with a lot of ready libraries, and new capabilities appear
every month. I probably won't be able to incorporate it all in the
design, but I fully intend to update it as new possibilities emerge.




## Logs

:::{postlist}
:category: project-180025
:::

