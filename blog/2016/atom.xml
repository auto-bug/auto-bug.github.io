<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
  <id>http://deshipu.art/</id>
  <title>deshipu.art - Posted in 2016</title>
  <updated>2024-08-07T20:37:32.195568+00:00</updated>
  <link href="http://deshipu.art/"/>
  <link href="http://deshipu.art/blog/2016/atom.xml" rel="self"/>
  <generator uri="https://ablog.readthedocs.org/" version="0.10.33">ABlog</generator>
  <entry>
    <id>http://deshipu.art/projects/project-3736/log-50993/</id>
    <title>Ressurection</title>
    <updated>2016-12-29T00:00:00+01:00</updated>
    <content type="html">&lt;section id="ressurection"&gt;

&lt;p&gt;Published on 2016-12-29 in &lt;a class="reference internal" href="../../projects/project-3736/#project-3736"&gt;&lt;span class="std std-ref"&gt;µBob biped robot&lt;/span&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I really wanted to enter one of my robots into the 1kB contest, but
unfortunately the inverse kinematics calculations result in quite some
bit of code. I tried to use some pretty neat algorithms to get around
that (see &lt;a class="reference external" href="https://hackaday.io/project/6050-tote/log/50664-cordic"&gt;https://hackaday.io/project/6050-tote/log/50664-cordic&lt;/a&gt; ), but in the end there is just too much happening on thet 8-bit
microcontroller. Switching to a 32-bit microcontroller would probably
helped, but then there is the size of all the HAL libraries and such
– it would probably come down to about the same, or worse. So I
looked at the shelf on which my robots are standing, and saw µBob. It
has hard-coded gait, so there should be no problem with calculations.
However, it used an ESP8266, and that’s again a lot of code in the
SDK/Lua/MicroPython.&lt;/p&gt;
&lt;p&gt;The robot also got quite beaten up on the last few conferences and
maker fairs it has visited. The distance sensor never worked, the
wires got loose, the battery inside shifted and changed its center of
gravity, the feet lost some of the fingers, and the power switch is in
a place that is really awkward to reach. So I decided to recycle the
parts and make a new robot.&lt;/p&gt;
&lt;img alt="projects/project-3736/images/3974481483050689226.jpg" src="projects/project-3736/images/3974481483050689226.jpg" /&gt;
&lt;p&gt;Time to re-build this robot again, with a little bit more of proper
construction. I started with the PCB, because you have to wait for
them so long. So I made this:&lt;/p&gt;
&lt;img alt="projects/project-3736/images/3439521483050998669.png" src="projects/project-3736/images/3439521483050998669.png" /&gt;
&lt;p&gt;The two big empty spaces are for attaching the servos. There is also
room for a power switch and a battery connector, and a footprint for
an ATtiny85. I got two pins free, so I’ve broken them out into some
extra headers.Once the PCBs arrived, I quickly assembled one, and started to program
the attiny. That took whole day, because for some reason the
programming would fail at various stages with very strange results.
Lowering the clock speed of the programmer, adding some jumpers and
additional options would help sometimes and then break again later. In
the end it turned out that the wires that I soldered to my programming
clip came off, and weren’t giving a good connection.&lt;/p&gt;
&lt;p&gt;Next, I needed some code to drive the servos. Unfortunately, I
couldn’t use the code from &lt;a class="reference internal" href="../../projects/project-9769/#project-9769"&gt;&lt;span class="std std-ref"&gt;Mechatronic Ears&lt;/span&gt;&lt;/a&gt; , because this time I needed to drive 3 servos at once (actually 4,
but two of them share a common signal). So I looked around and found &lt;a class="reference external" href="http://www.thebox.myzen.co.uk/Tutorial/LEDs.html"&gt;a servo library for the ATtiny85&lt;/a&gt; . It was too big for my purposes, but I used the ideas from it to
write my own, that’s about 512 bytes (and probably can be further
optimized).&lt;/p&gt;
&lt;p&gt;Once I had that, I disassembled the poor µBob, and removed its legs:&lt;/p&gt;
&lt;img alt="projects/project-3736/images/5240641483051624333.jpg" src="projects/project-3736/images/5240641483051624333.jpg" /&gt;
&lt;p&gt;Then I attached the servos to the new PCB, with a programmed ATtiny85
and a smaller battery (from those small quadcopters):&lt;/p&gt;
&lt;img alt="projects/project-3736/images/3433491483051680543.jpg" src="projects/project-3736/images/3433491483051680543.jpg" /&gt;
&lt;p&gt;The current status: the legs are just moving back and forth for now
(testing the servos). Next, I will need some simple codo to make it
move into poses, and then maybe I will attach a distance sensor and
add some code for reading the ADC.&lt;/p&gt;
&lt;/section&gt;
</content>
    <link href="http://deshipu.art/projects/project-3736/log-50993/" rel="alternate"/>
    <summary>Published on 2016-12-29 in project-3736.</summary>
    <published>2016-12-29T00:00:00+01:00</published>
  </entry>
  <entry>
    <id>http://deshipu.art/projects/project-7860/log-51040/</id>
    <title>ATtiny10</title>
    <updated>2016-12-30T00:00:00+01:00</updated>
    <content type="html">&lt;section id="attiny10"&gt;

&lt;p&gt;Published on 2016-12-30 in &lt;a class="reference internal" href="../../projects/project-7860/#project-7860"&gt;&lt;span class="std std-ref"&gt;Nyan Board&lt;/span&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;So the surprise chip, ATtiny10, arrived, and I started to work on
programming it. I already have the code for it prepared, and the PCB
has been ordered a week ago, so I just need to get the code on the
chip somehow.&lt;/p&gt;
&lt;p&gt;The ATtiny10 is not like the larger ATtinys – it doesn’t use ISP (aka
SPI) for programming, but instead uses something called TPI (tiny
programming interface), which seems to be something like half-duplex
SPI. When I was upgrading my USBASP programmer, I noticed that the
firmware has added support for TPI, and that it’s already in AVRdude
too, so it should be simple, right?\&lt;/p&gt;
&lt;img alt="projects/project-7860/images/4957611483132384500.jpg" src="projects/project-7860/images/4957611483132384500.jpg" /&gt;
&lt;p&gt;I soldered the tiny chip to a breakout board (the last row of pins
uses two pads, because the alignment wasn’t quite right, but the
connections are good), I connected my programmer according to the
schematic I found on some Polish blog (good thing I know the language)
at &lt;a class="reference external" href="http://mirekk36.blogspot.ch/2013/07/attiny10-tpi-usbasp-mkavrcalculator.html"&gt;http://mirekk36.blogspot.ch/2013/07/attiny10-tpi-usbasp-
mkavrcalculator.html&lt;/a&gt;  and I proceeded to upload the hex file with:&lt;/p&gt;
&lt;div class="highlight-default notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;avrdude&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="n"&gt;usbasp&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;clone&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="n"&gt;t10&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;U&lt;/span&gt; &lt;span class="n"&gt;flash&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;hex&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;

&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;The result? Of course the well known and loved message error:&lt;/p&gt;
&lt;div class="highlight-default notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;avrdude&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;error&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;program&lt;/span&gt; &lt;span class="n"&gt;enable&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;target&lt;/span&gt; &lt;span class="n"&gt;doesn&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;t answer.&lt;/span&gt;
&lt;span class="n"&gt;avrdude&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;initialization&lt;/span&gt; &lt;span class="n"&gt;failed&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;rc&lt;/span&gt;&lt;span class="o"&gt;=-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;
         &lt;span class="n"&gt;Double&lt;/span&gt; &lt;span class="n"&gt;check&lt;/span&gt; &lt;span class="n"&gt;connections&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="n"&gt;again&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="n"&gt;use&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;F&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;override&lt;/span&gt;
         &lt;span class="n"&gt;this&lt;/span&gt; &lt;span class="n"&gt;check&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;

&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;I tried with different clock speeds, with the “slow clock” jumper, I
disconnected and reconnected the whole thing several times, I measured
the resistances. It all checks. Should work. Doesn’t.I even made a side trip to try and program it with a CP2102 USB2TTL,
which AVRdude apparently can do, but that didn’t work either.&lt;/p&gt;
&lt;p&gt;So now I’m sitting here after a whole day of trying to program this
thing, looking at it, and considering giving up.&lt;/p&gt;
&lt;p&gt;If anybody has any experience with this, or some suggestions for
things to try, I’m open for ideas.&lt;/p&gt;
&lt;/section&gt;
</content>
    <link href="http://deshipu.art/projects/project-7860/log-51040/" rel="alternate"/>
    <summary>Published on 2016-12-30 in project-7860.</summary>
    <published>2016-12-30T00:00:00+01:00</published>
  </entry>
  <entry>
    <id>http://deshipu.art/projects/project-3736/log-51015/</id>
    <title>The Body</title>
    <updated>2016-12-30T00:00:00+01:00</updated>
    <content type="html">&lt;section id="the-body"&gt;

&lt;p&gt;Published on 2016-12-30 in &lt;a class="reference internal" href="../../projects/project-3736/#project-3736"&gt;&lt;span class="std std-ref"&gt;µBob biped robot&lt;/span&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Today I’m continuing the work on resurrecting µBob. I decided to use a
Pololu SHARP distance sensor (because it can work with 3V), and using
a bit of hot glue I attached the pins to it, so that I can plug it in
easily:&lt;/p&gt;
&lt;img alt="projects/project-3736/images/2270691483094463315.jpg" src="projects/project-3736/images/2270691483094463315.jpg" /&gt;
&lt;p&gt;On the robot side, I used stacking headers to give some distance from
the PCB:&lt;/p&gt;
&lt;img alt="projects/project-3736/images/6941621483094620260.jpg" src="projects/project-3736/images/6941621483094620260.jpg" /&gt;
&lt;p&gt;Next, to make sure it will walk in this configuration, a quick test:&lt;/p&gt;
&lt;iframe style="width: 500px; height: 281px;" width="500" height="281" frameborder="0" allowfullscreen="None" src="https://www.youtube.com/embed/YhO5LxJPn1U"&gt;&lt;/iframe&gt;
&lt;p&gt;Then I worked on the body frame. I decided to use paperclips this
time. Turns out you can solder them, so I bent them and soldered them
into the holes in the PCB:&lt;/p&gt;
&lt;img alt="projects/project-3736/images/5372171483094728658.jpg" src="projects/project-3736/images/5372171483094728658.jpg" /&gt;
&lt;p&gt;A little bit of hot glue, and the hat is back on:&lt;/p&gt;
&lt;img alt="projects/project-3736/images/3258031483094773549.jpg" src="projects/project-3736/images/3258031483094773549.jpg" /&gt;
&lt;p&gt;Finally, I also transplanted the old mustache.&lt;/p&gt;
&lt;/section&gt;
</content>
    <link href="http://deshipu.art/projects/project-3736/log-51015/" rel="alternate"/>
    <summary>Published on 2016-12-30 in project-3736.</summary>
    <published>2016-12-30T00:00:00+01:00</published>
  </entry>
  <entry>
    <id>http://deshipu.art/projects/project-7860/log-51067/</id>
    <title>ATtiny10 Working</title>
    <updated>2016-12-31T00:00:00+01:00</updated>
    <content type="html">&lt;section id="attiny10-working"&gt;

&lt;p&gt;Published on 2016-12-31 in &lt;a class="reference internal" href="../../projects/project-7860/#project-7860"&gt;&lt;span class="std std-ref"&gt;Nyan Board&lt;/span&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;As soon as I posted the last log, I realized what the problem was. The
TPICLK wire was loose all this time. After fixing that, programming
with AVRdude and USBASP went without any problems, and I could test my
music-playing code.&lt;/p&gt;
&lt;p&gt;Of course it didn’t work properly at first. I had to change the timer
initialization a little, use a different prescaler and adjust the
octave. I also decided to run the timer at a higher frequency, because
it’s a 16-bit timer, so I can get better accuracy this way – so I’m
actually shifting the counts for the tones right a few bits.&lt;/p&gt;
&lt;p&gt;But I still got some very weird glitches here and there, and I
couldn’t quite see the problem, until I realized that they happen
randomly, but only when a higher frequency sound goes after a lower
frequency. Finally I realized, that when I’m changing the timer’s
match register, I’m not resetting the counter – so if the counter is
already past the point to which I’m setting the register, it will go
all the way up to the full 16 bits before it resets. That also
happened with the 8-bit counters on the other chips, but it wasn’t so
visible, because the distortion was very small. With a larger timer it
became much easier to hear. A fix is trivial – just reset the
counter.\&lt;/p&gt;
&lt;p&gt;And that extra code for resetting the counter took me exactly to 500
bytes of compiled code:&lt;/p&gt;
&lt;div class="highlight-default notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;AVR&lt;/span&gt; &lt;span class="n"&gt;Memory&lt;/span&gt; &lt;span class="n"&gt;Usage&lt;/span&gt;
&lt;span class="o"&gt;----------------&lt;/span&gt;
&lt;span class="n"&gt;Device&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;attiny10&lt;/span&gt;

&lt;span class="n"&gt;Program&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;     &lt;span class="mi"&gt;500&lt;/span&gt; &lt;span class="nb"&gt;bytes&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;48.8&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;Full&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;bootloader&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;Data&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;          &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="nb"&gt;bytes&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;0.0&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;Full&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;bss&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;noinit&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;I guess I could put more songs in there…&lt;/p&gt;
&lt;p&gt;In any case, now I’m just waiting for the PCBs to arrive. In
retrospect, I could have made those new PCBs even smaller than
currently – with the puny ATtiny10 and a single resistor they are
almost empty. But the piezo speaker takes some room, so I guess this
size is fine.&lt;/p&gt;
&lt;/section&gt;
</content>
    <link href="http://deshipu.art/projects/project-7860/log-51067/" rel="alternate"/>
    <summary>Published on 2016-12-31 in project-7860.</summary>
    <published>2016-12-31T00:00:00+01:00</published>
  </entry>
  <entry>
    <id>http://deshipu.art/projects/project-3736/log-51068/</id>
    <title>Distance Sensor</title>
    <updated>2016-12-31T00:00:00+01:00</updated>
    <content type="html">&lt;section id="distance-sensor"&gt;

&lt;p&gt;Published on 2016-12-31 in &lt;a class="reference internal" href="../../projects/project-3736/#project-3736"&gt;&lt;span class="std std-ref"&gt;µBob biped robot&lt;/span&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;For the first time µBob has a working distance sensor on board (you
might recall I tried to give it a distance sensor earlier, but it
didn’t work). So let’s make use of it.&lt;/p&gt;
&lt;p&gt;The sensor I’m using is a SHARP GP2Y0A60SZLF on a breakout board from
Pololu. It’s an analog sensor, which is good, because I can use only a
single pin for it. All I have to do is get the ADC to work. A bit of
googling for examples, and a little bit of cross-checking with the
datasheet, and I had the basic procedure:\&lt;/p&gt;
&lt;div class="highlight-cpp notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;ADCSRA&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;ADEN&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;ADPS2&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;ADPS1&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;ADPS0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="c1"&gt;// Pre-scaler 64.&lt;/span&gt;
&lt;span class="n"&gt;ADMUX&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;ADLAR&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;REFS1&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;REFS0&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;pin&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mh"&gt;0x03&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="n"&gt;ADCSRA&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;|=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;ADSC&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="k"&gt;while&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ADCSRA&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;ADSC&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c1"&gt;// Pass.&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;ADCH&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;ADCL&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;However, that didn’t work. I spent half a day trying to figure out why
it would keep returning the same number all the time, changing only on
reset. Everything was exactly the same as in the datasheet, the
examples, even the Arduino cores that I checked. What did I miss?
After asking around a bit on IRC and robotics forums, someone pointed
out to me that the order in which you read ADCH and ADCL is important
– there is a latch there, that makes sure the values won’t change in
the middle of your reading. Sure enough, I had the order wrong. The
fix is very simple – I can defer to the compiler to do the right
thing by just doing:&lt;/p&gt;
&lt;div class="highlight-cpp notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;ADC&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;That’s it. Suddenly I started getting changing values, as expected.
However, the changes still weren’t in any way correlated with the
voltage on the pin… Back to the drawing board. Four re-readings of
the datasheet later I just tried the same program on a different chip,
and it worked fine. Turns out the ATtiny85 that I have soldered to a
breakout board some 2 years ago and used since for all sorts of
uncanny experiments must have gotten the ADC broken somehow –
possibly by applying higher voltage than it should get.&lt;/p&gt;
&lt;p&gt;In any case, the next step is checking the range of the sensor. I
don’t have any way to display the readings from the robot (and I want
to check the readings in the robot, not on a separate circuit, because
the voltages would be different), so I wrote a simple program that
basically moves a servo depending on the value read from the sensor.
Since I know the servo’s range, I can guess what the reading was.&lt;/p&gt;
&lt;p&gt;That worked pretty well, now I just need to fine-tune the walking
algorithm to make the robot go straight, add some animations for
turning and going backwards, and make a simple state machine switching
between those animations depending on the sensor readings. Should fit
in the ~400 bytes of program space I have left.&lt;/p&gt;
&lt;/section&gt;
</content>
    <link href="http://deshipu.art/projects/project-3736/log-51068/" rel="alternate"/>
    <summary>Published on 2016-12-31 in project-3736.</summary>
    <published>2016-12-31T00:00:00+01:00</published>
  </entry>
</feed>
