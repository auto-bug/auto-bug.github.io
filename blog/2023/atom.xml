<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
  <id>http://deshipu.art/</id>
  <title>deshipu.art - Posted in 2023</title>
  <updated>2024-08-07T20:37:32.071054+00:00</updated>
  <link href="http://deshipu.art/"/>
  <link href="http://deshipu.art/blog/2023/atom.xml" rel="self"/>
  <generator uri="https://ablog.readthedocs.org/" version="0.10.33">ABlog</generator>
  <entry>
    <id>http://deshipu.art/projects/project-188909/log-225955/</id>
    <title>1mm and 1.25mm Versions</title>
    <updated>2023-12-12T00:00:00+01:00</updated>
    <content type="html">&lt;section id="mm-and-1-25mm-versions"&gt;

&lt;p&gt;Published on 2023-12-12 in &lt;a class="reference internal" href="../../projects/project-188909/#project-188909"&gt;&lt;span class="std std-ref"&gt;Wee Bug&lt;/span&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The 2g servos I’m using for weebug come in three different connectors:
the traditional 2.54mm pitch servo plug, a 1.25mm pitch jst plug, and
a 1mm pitch plug. I think the traditional plug is way too big for this
kind of robot, so that leaves us with two versions: the 1.25mm and
1mm. I started with the bigger one initially, because that’s what I
had in my drawer, and I used through-hole sockets for them for the
same reason. But when I later wanted to switch to SMD sockets, I found
that all 1.25mm socket are for some reason unreasonably large, with
big additional structural elements added on both sides. I switched to
1mm sockets because they were tiny in comparison. So all recent
versions of the weebug use the 1mm sockets.&lt;/p&gt;
&lt;p&gt;I still had two early versions using the 1.25mm servos, and I wanted
to upgrade them to the newer PCB. So I did a quick replacement to the
through-hole sockets in the design, nudged aside some of the traces
that got in the way on the back side, and added a footprint for the
smaller battery holder, so that I can use either one. Oh, and I
ordered it with yellow soldermask and black silkscreen, so that the
danger stripes look how they should:&lt;/p&gt;
&lt;img alt="projects/project-188909/images/9701781702401994932.jpg" src="projects/project-188909/images/9701781702401994932.jpg" /&gt;
&lt;p&gt;I transplanted the legs from one of the old bots, and it works. I just
have to update the code to account for the change of which servo goes
to which pin.&lt;/p&gt;
&lt;p&gt;In other news, I’m still investigating servo power issues. No
definitive conclusions yet, but I’m leaning towards ditching the boost
converter and putting the servos back on direct battery power.
Together with using reasonable quality of batteries, that should help.&lt;/p&gt;
&lt;/section&gt;
</content>
    <link href="http://deshipu.art/projects/project-188909/log-225955/" rel="alternate"/>
    <summary>Published on 2023-12-12 in project-188909.</summary>
    <published>2023-12-12T00:00:00+01:00</published>
  </entry>
  <entry>
    <id>http://deshipu.art/projects/project-186921/log-225959/</id>
    <title>Sound Volume Reduced</title>
    <updated>2023-12-12T00:00:00+01:00</updated>
    <content type="html">&lt;section id="sound-volume-reduced"&gt;

&lt;p&gt;Published on 2023-12-12 in &lt;a class="reference internal" href="../../projects/project-186921/#project-186921"&gt;&lt;span class="std std-ref"&gt;µGame 22&lt;/span&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I have been quiet the past few months about this project, because I
was still struggling with power problems. Adding the boost converter
was a great idea, and it works very well, but if you make the speaker
play white noise, it will still overwhelm the batteries and make the
voltage drop enough that the display resets, and you get a white
screen of death.&lt;/p&gt;
&lt;p&gt;I tried lowering the gain on the amplifier (I dedicated an extra GPIO
pin for that, so that I can do it with software), but it didn’t help.
So I let the project sit for a while, while I waited for inspiration.&lt;/p&gt;
&lt;p&gt;The inspiration struck a few days ago, and I was lucky that I could
test it immediately, by cutting a trace on the board and soldering a
resistor in series with the speaker. I know, it sounds obvious now,
but you have to remember that I have very little experience with
analog circuits. So yeah, the resistor limits the current drawn by the
speaker, at the cost of lowering the volume somewhat. But now the
screen doesn’t reset, and the volume was too loud for my tastes
anyways.&lt;/p&gt;
&lt;p&gt;I think this was the last problem I was struggling with, and the next
step is to bodge the remaining ten prototypes I have assembled and run
a workshop with them, to see if the participants find any new and
exciting problems. If they don’t, and I will start looking into
producing and selling them.&lt;/p&gt;
&lt;/section&gt;
</content>
    <link href="http://deshipu.art/projects/project-186921/log-225959/" rel="alternate"/>
    <summary>Published on 2023-12-12 in project-186921.</summary>
    <published>2023-12-12T00:00:00+01:00</published>
  </entry>
  <entry>
    <id>http://deshipu.art/projects/project-175712/log-225929/</id>
    <title>Working on Version 3</title>
    <updated>2023-12-12T00:00:00+01:00</updated>
    <content type="html">&lt;section id="working-on-version-3"&gt;

&lt;p&gt;Published on 2023-12-12 in &lt;a class="reference internal" href="../../projects/project-175712/#project-175712"&gt;&lt;span class="std std-ref"&gt;Kamina Keyboard&lt;/span&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;We had recently a keyboard enthusiasts meetup in my city, and a
surprising number of people were interested in the Kamina v2 keyboard
– it seems to be a good stepping stone between a traditional keyboard
and a proper ergo board. However, the fact that it uses a bare SAMD21
chip, which was hard to obtain due to chip shortage, has a scary
small-pitch QFN footprint and requires a special programmer to flash
the bootloader makes it difficult to build by beginning electronics
hobbyists. Or at least the less confident ones.&lt;/p&gt;
&lt;p&gt;I also noticed that if I made the extra column breakable, it could
easily be converted into a proper ergo board, very similar to the Klap
v4 keyboard I’m using as my main driver. Especially if I made the
switches hot-swappable, it could be a very good intro into the world
of ergonomic keyboards.&lt;/p&gt;
&lt;p&gt;But how to make it easier to assemble? Simple, just use the raspberry
pi pico microcontroller board for the brains, similar to how I did it
for the &lt;a class="reference internal" href="../../projects/project-10408/#project-10408"&gt;&lt;span class="std std-ref"&gt;Steno Keyboard&lt;/span&gt;&lt;/a&gt; project. It’s cheap, and there are easily enough pins. You can even
get clones with additional features, like a USB-C connector or a small
display! The rest is just soldering the hot-swap sockets, and all the
diodes. Shouldn’t be too hard.&lt;/p&gt;
&lt;p&gt;I started with some mock-ups in Inkscape. I initially want to also
make the top row breakable. Oh, and I forgot, I also want to make it
so that you use two of the same PCBs, one flipped over, so that they
are cheaper to manufacture. Here is one of the steps:&lt;/p&gt;
&lt;img alt="projects/project-175712/images/7857011702341170895.png" src="projects/project-175712/images/7857011702341170895.png" /&gt;
&lt;p&gt;I also decided to not use Fritzing this time, as the stupid “donation”
thing makes it difficult for people to download and install it.
Instead, I switched to EasyEDA, because it runs in the browser and so
people don’t have to install anything. It also makes it very easy to
order the boards, which is also a big plus. I spent a day fiddling
with the design, and this is what I came up with:&lt;/p&gt;
&lt;img alt="projects/project-175712/images/2432381702341390253.png" src="projects/project-175712/images/2432381702341390253.png" /&gt;
&lt;img alt="projects/project-175712/images/4041971702341390418.png" src="projects/project-175712/images/4041971702341390418.png" /&gt;
&lt;p&gt;There is a bunch of 0Ω resistors, which should only be soldered on the
bottom of the board, leaving the ones on the top open – to avoid
shorting the pins of the microcontroller board that lie opposite each
other. The five-pin header provides additional structural strength,
and shares the row lines between the halves. The last column is
breakable, and I even added two more keys in the center of the board,
for those of us with exceptionally dexterous thumbs.&lt;/p&gt;
&lt;/section&gt;
</content>
    <link href="http://deshipu.art/projects/project-175712/log-225929/" rel="alternate"/>
    <summary>Published on 2023-12-12 in project-175712.</summary>
    <published>2023-12-12T00:00:00+01:00</published>
  </entry>
  <entry>
    <id>http://deshipu.art/projects/project-188909/log-226028/</id>
    <title>Wee Display</title>
    <updated>2023-12-15T00:00:00+01:00</updated>
    <content type="html">&lt;section id="wee-display"&gt;

&lt;p&gt;Published on 2023-12-15 in &lt;a class="reference internal" href="../../projects/project-188909/#project-188909"&gt;&lt;span class="std std-ref"&gt;Wee Bug&lt;/span&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;img alt="projects/project-188909/images/47221702660969258.gif" src="projects/project-188909/images/47221702660969258.gif" /&gt;
&lt;p&gt;A while ago I made a &lt;a class="reference external" href="https://hackaday.io/project/188909-wee-bug/log/224310-a-display"&gt;display shield&lt;/a&gt;  (mask?) for the Wee Bug, but because it needs additional pins to talk
to the microcontroller, it only works with the Waveshare Mini boards,
and not the Xiao or QtPy boards, that don’t have those extra pins. But
then I found this tiny 0.66” OLED screen in my drawer, and thought
“wait a minute, this display can use I2C for communication, and I
already have an I2C bus for the accelerometer on the robot, so it
would need no extra pins”. All I need is a breakout board for it. Oh,
and the tiny little issue of the reset circuit.&lt;/p&gt;
&lt;p&gt;What reset circuit, you ask? Well, I happen to know from experience,
that those display will not work correctly when you just switch them
on and start sending them data. They need to be restarted, physically,
with the RST pin, a short moment after being powered on. I’m not
entirely sure why, and why this isn’t built into the chip’s
initialization, but that’s how it is. If you don’t do that restart,
they will just keep displaying random pixels, ignoring any update
commands.&lt;/p&gt;
&lt;p&gt;Normally I solve this in software. I have a GPIO pin connected to RST,
and I wiggle it as a part of the display initialization. Easy enough.
But in this case I don’t have an extra pin to spare. So I need
something else to wiggle the pin for me. A reset circuit.&lt;/p&gt;
&lt;p&gt;As always, as the first thing I went to Adafruit’s excellent
documentation, and looked at the schematics of their own display
modules using similar displays. Sure enough, they had their reset
circuits on them, in the form of an APX803L40 chip. Neat, just a
single chip doing what I wanted, and I was afraid I would have to muck
about with transistors and capacitors and resistors and diodes and who
knows what else. The only problem is that the schematic didn’t specify
what threshold voltage should the chip have, so I ordered the 3.3V
(because that’s the voltage I will use to power the display) and 2.5V
(because that’s the 2/3 of the final voltage) versions. Then I quickly
made a PCB and since it was so small, ordered it from OSHPark.&lt;/p&gt;
&lt;img alt="projects/project-188909/images/1458951702661857606.jpg" src="projects/project-188909/images/1458951702661857606.jpg" /&gt;
&lt;p&gt;When it arrived a few weeks later (free shipping from US is slooooow),
I quickly soldered it up and tested. I immediately realized that I
forgot to add the pull-up resistors on the I2C bus, but that’s fine
since the robot already has them, for the accelerometer. But even with
those, it didn’t show up on the I2C bus scans. What’s wrong?&lt;/p&gt;
&lt;p&gt;At the time I was quite sick, and I didn’t have the energy for too
much experimenting. I just verified that it still didn’t show up when
I replaced the reset chip with a pull-up resistor, but didn’t pursue
it further. It went into a drawer.&lt;/p&gt;
&lt;p&gt;This week I felt better, and I decided to give it another look. I went
over the schematic and compared it with examples of modules I found
online. One difference between my schematic and the Adafruit one is
that I didn’t break out the RST pin, and I didn’t include the pull-up
resistor they have on it. A quick bodge job to add that resistor
didn’t help. Hmm. Another difference is that I didn’t ground the
unused pins. But the datasheet didn’t say they have to be grounded…
I tried another bodge to ground all those pins, and still nothing.&lt;/p&gt;
&lt;p&gt;What else could be wrong? I still suspected the reset circuit, so I
desoldered the reset chip, and put a pull-up resistor in its place.
And suddenly it showed up on the I2C scan! Turns out I need both the
CE pin pulled low, and the RST pulled high. Of course the display
wouldn’t work like that, since it didn’t get its reset after power up.
So I once more put the reset chip in there, &lt;em&gt;and&lt;/em&gt; added the pull-up
resistor, while &lt;em&gt;at the same time&lt;/em&gt; having CE connected to GND. That
was it, that made it all work.&lt;/p&gt;
&lt;img alt="projects/project-188909/images/5833931702662829258.jpg" src="projects/project-188909/images/5833931702662829258.jpg" /&gt;
&lt;p&gt;It certainly took me more time than it should, but I have an animated
eye working on the robot now.&lt;/p&gt;
&lt;/section&gt;
</content>
    <link href="http://deshipu.art/projects/project-188909/log-226028/" rel="alternate"/>
    <summary>Published on 2023-12-15 in project-188909.</summary>
    <published>2023-12-15T00:00:00+01:00</published>
  </entry>
  <entry>
    <id>http://deshipu.art/projects/project-175712/log-226186/</id>
    <title>Kamina 3.1</title>
    <updated>2023-12-22T00:00:00+01:00</updated>
    <content type="html">&lt;section id="kamina-3-1"&gt;

&lt;p&gt;Published on 2023-12-22 in &lt;a class="reference internal" href="../../projects/project-175712/#project-175712"&gt;&lt;span class="std std-ref"&gt;Kamina Keyboard&lt;/span&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;As mentioned in the previous log, I decided to do one more version of
this keyboard. The main change is that in place of a SAMD21 bare
microcontroller, I’m now using a Raspberry Pi Pico or compatible
microcontroller developer board. This makes this keyboard much easier
to assemble and program by people who are not comfortable soldering
tiny QFN footprints or flashing a bootloader over DAP.&lt;/p&gt;
&lt;p&gt;Other changes include optional hot-swap sockets, breakable last
column, and four additional keys at the middle of the board. There is
also a technical change: it’s no longer a single PCB, but instead you
need two identical PCBs, one half flipped, to make the full keyboard.
This way it’s much cheaper to fabricate the PCB.&lt;/p&gt;
&lt;p&gt;I did this, because I’ve seen a lot of interest in this kind of a
middle ground between traditional keyboards and fully ergonomic ones.&lt;/p&gt;
&lt;img alt="projects/project-175712/images/3092651703285154227.jpg" src="projects/project-175712/images/3092651703285154227.jpg" /&gt;
&lt;p&gt;Note however, that because of the hot-swap sockets, you can easily
turn this into a proper ergonomic board when you feel braver:&lt;/p&gt;
&lt;img alt="projects/project-175712/images/370261703285285895.jpg" src="projects/project-175712/images/370261703285285895.jpg" /&gt;
&lt;p&gt;To assemble the board, you still need to solder all those SMD diodes
and hot-swap sockets, and to solder the dev board in place (or pins
and a socket, if you want it to be removable, like in my examples).
Version 3.0 also needs a bodge between the top jumpers on both sides,
but the version 3.1 that I’m publishing already has that fixed.&lt;/p&gt;
&lt;/section&gt;
</content>
    <link href="http://deshipu.art/projects/project-175712/log-226186/" rel="alternate"/>
    <summary>Published on 2023-12-22 in project-175712.</summary>
    <published>2023-12-22T00:00:00+01:00</published>
  </entry>
</feed>
