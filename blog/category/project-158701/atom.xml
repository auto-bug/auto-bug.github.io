<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
  <id>http://deshipu.art/</id>
  <title>deshipu.art - Posts in project-158701</title>
  <updated>2024-08-07T20:34:12.639124+00:00</updated>
  <link href="http://deshipu.art/"/>
  <link href="http://deshipu.art/blog/category/project-158701/atom.xml" rel="self"/>
  <generator uri="https://ablog.readthedocs.org/" version="0.10.33">ABlog</generator>
  <entry>
    <id>http://deshipu.art/projects/project-158701/log-150342/</id>
    <title>Redesign</title>
    <updated>2018-08-02T00:00:00+02:00</updated>
    <content type="html">&lt;section id="redesign"&gt;

&lt;p&gt;Published on 2018-08-02 in &lt;a class="reference internal" href="../../../projects/project-158701/#project-158701"&gt;&lt;span class="std std-ref"&gt;Video Pendant&lt;/span&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I have been showing off the prototype of this pendant in different
places, and during the poster session on EuroPython a person who I
can’t now remember (sorry) suggested a really great solution to the
problems of small battery and large thickness of the device. It looks
something like this:&lt;/p&gt;
&lt;img alt="projects/project-158701/images/3133821533228762662.jpg" src="projects/project-158701/images/3133821533228762662.jpg" /&gt;
&lt;p&gt;(The wire length is not to scale.)&lt;/p&gt;
&lt;p&gt;Basically, they proposed to put the battery, together with the
charging electronics and power switch on a separate device, that would
be located on the neck or back, and that could be pretty much any
reasonable size. The power would be transmitted to the device through
a pair of soft wires that replace the string on which the pendant
hangs. The pendant itself then only needs the actual screen, the
microcontroller and the USB port for data transfer — all relatively
small elements, with the USB socket being the largest. This lets me
make it really thin, and since there are no mechanical parts, it can
be embedded in resin easily (USB port can be problematic, but I have
some ideas).&lt;/p&gt;
&lt;p&gt;There are still some problems to be solved. How to prevent the heavy
battery from sliding down the back of the wearer and pulling the
pendant up? Maybe some kind of a clip for the collar? How prevent
electronics from irritating the sensitive skin on the back of the
neck? We will see how all that works.&lt;/p&gt;
&lt;p&gt;That means that I won’t be assembling the PCB that just arrived from
OSHPark. And good, because due to my laziness it misses the cutout for
the sunken USB socket:&lt;/p&gt;
&lt;img alt="projects/project-158701/images/3637741533229116171.jpg" src="projects/project-158701/images/3637741533229116171.jpg" /&gt;
&lt;p&gt;But that also means that now I need to design two new PCBs. No rest
for the wicked.&lt;/p&gt;
&lt;/section&gt;
</content>
    <link href="http://deshipu.art/projects/project-158701/log-150342/" rel="alternate"/>
    <summary>Published on 2018-08-02 in project-158701.</summary>
    <published>2018-08-02T00:00:00+02:00</published>
  </entry>
  <entry>
    <id>http://deshipu.art/projects/project-158701/log-151700/</id>
    <title>Barrette as the Base Station</title>
    <updated>2018-08-26T00:00:00+02:00</updated>
    <content type="html">&lt;section id="barrette-as-the-base-station"&gt;

&lt;p&gt;Published on 2018-08-26 in &lt;a class="reference internal" href="../../../projects/project-158701/#project-158701"&gt;&lt;span class="std std-ref"&gt;Video Pendant&lt;/span&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Considering the latest redesign idea, I’m not aiming at a very small
pendant with just the microcontroller, connected to the &lt;a class="reference internal" href="../../../projects/project-160167/#project-160167"&gt;&lt;span class="std std-ref"&gt;Electronic Barrette Hub&lt;/span&gt;&lt;/a&gt; for power. The hub will also be used for programming the display over
the USB, this way I can use a very small and nice-looking connector on
it, which won’t interfere with the eventual resin casting.&lt;/p&gt;
&lt;p&gt;That means that the PCB design will be greatly simplified, but I have
to wait for it until the design of connectors for the barrette is
finalized.&lt;/p&gt;
&lt;/section&gt;
</content>
    <link href="http://deshipu.art/projects/project-158701/log-151700/" rel="alternate"/>
    <summary>Published on 2018-08-26 in project-158701.</summary>
    <published>2018-08-26T00:00:00+02:00</published>
  </entry>
  <entry>
    <id>http://deshipu.art/projects/project-158701/log-182148/</id>
    <title>Ressurected</title>
    <updated>2020-08-12T00:00:00+02:00</updated>
    <content type="html">&lt;section id="ressurected"&gt;

&lt;p&gt;Published on 2020-08-12 in &lt;a class="reference internal" href="../../../projects/project-158701/#project-158701"&gt;&lt;span class="std std-ref"&gt;Video Pendant&lt;/span&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I’m bringing this project back from the dead, now that I have learned
a bit and got new ideas for it. I already wrote about a solution for
the battery problem — have the battery on the other side of the wires,
on your neck. I’m going to go with that, but since the &lt;a class="reference internal" href="../../../projects/project-160167/#project-160167"&gt;&lt;span class="std std-ref"&gt;Electronic Barrette Hub&lt;/span&gt;&lt;/a&gt; is not ready yet, I will use a regular battery holder.&lt;/p&gt;
&lt;p&gt;The other innovation is using a thin PCB, and a PCB USB socket — that
lets me make it really thin.&lt;/p&gt;
&lt;p&gt;I slapped together a PCB design with those ideas incorporated, and it
arrived today, so I assembled it:&lt;/p&gt;
&lt;img alt="projects/project-158701/images/5419571597262907247.jpg" src="projects/project-158701/images/5419571597262907247.jpg" /&gt;
&lt;p&gt;It’s flashed an ready to be programmed. Next step is to compile a
version of CircuitPython prepared for it.&lt;/p&gt;
&lt;p&gt;The last innovation I have is software: I no longer need to use BMP
files, as I wrote a Python library for reading GIF files. It’s
probably not fast enough, but there is one more possibility — perhaps
I could include a C library that was recently created for SAMD21 for
playing animated GIFs as a CircuitPython C module — then they should
play at native speed.&lt;/p&gt;
&lt;/section&gt;
</content>
    <link href="http://deshipu.art/projects/project-158701/log-182148/" rel="alternate"/>
    <summary>Published on 2020-08-12 in project-158701.</summary>
    <published>2020-08-12T00:00:00+02:00</published>
  </entry>
  <entry>
    <id>http://deshipu.art/projects/project-158701/log-213092/</id>
    <title>Where Are We?</title>
    <updated>2022-11-01T00:00:00+01:00</updated>
    <content type="html">&lt;section id="where-are-we"&gt;

&lt;p&gt;Published on 2022-11-01 in &lt;a class="reference internal" href="../../../projects/project-158701/#project-158701"&gt;&lt;span class="std std-ref"&gt;Video Pendant&lt;/span&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Hardware-wise, I think I’m reasonably happy with what I have – at
least it’s more than sufficient as a prototype for testing. What I
need now is the software. I have tested the device with CircuitPython
– I have even written a GIF decoding library in pure Python specially
for this – and I’m confident this can work, but not with
CircuitPython. So the next step is to get the the firmware for this
working.&lt;/p&gt;
&lt;p&gt;I can use the TinyUSB library to expose the filesystem over USB – it’s
the same library that CircuitPython is using, in fact. And I can use a
super-optimized GIF library written by &lt;a class="reference external" href="https://hackaday.io/hacker/269676"&gt;&amp;#64;Larry Bank&lt;/a&gt; . That should get me the minimal functionality. I can then also
experiment with sleep modes and touch and all that stuff.&lt;/p&gt;
&lt;p&gt;The problem I am facing right now is setting up an environment for
development for the SAMD21. I will probably start with Arduino,
because that is already mostly ready out of the box, but there is
still some work with that, that I currently just can’t get myself
started on. So until I get that going, the project is on hold.&lt;/p&gt;
&lt;/section&gt;
</content>
    <link href="http://deshipu.art/projects/project-158701/log-213092/" rel="alternate"/>
    <summary>Published on 2022-11-01 in project-158701.</summary>
    <published>2022-11-01T00:00:00+01:00</published>
  </entry>
  <entry>
    <id>http://deshipu.art/projects/project-158701/log-223060/</id>
    <title>Goodbye</title>
    <updated>2023-09-11T00:00:00+02:00</updated>
    <content type="html">&lt;section id="goodbye"&gt;

&lt;p&gt;Published on 2023-09-11 in &lt;a class="reference internal" href="../../../projects/project-158701/#project-158701"&gt;&lt;span class="std std-ref"&gt;Video Pendant&lt;/span&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I decided to stop pretending I will ever finish this project, and put
it out of its misery.&lt;/p&gt;
&lt;p&gt;I still believe it’s generally possible to get the exact hardware I
used to display animated GIF that you can easily upload to an USB
drive. However, it would require a bit of work to write the firmware
that does it, and I find that I no longer am interested in doing that
work.&lt;/p&gt;
&lt;p&gt;While I was procrastinating, CircuitPython grew a gifio library, that
displays animated GIFs straight from the filesystem. It’s as simple to
use as:&lt;/p&gt;
&lt;div class="highlight-default notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;board&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;gifio&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;displayio&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;time&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;struct&lt;/span&gt;


&lt;span class="n"&gt;display&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;board&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DISPLAY&lt;/span&gt;
&lt;span class="n"&gt;odg&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;gifio&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;OnDiskGif&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;sample.gif&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;start&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;monotonic&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;next_delay&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;odg&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;next_frame&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="c1"&gt;# Load the first frame&lt;/span&gt;
&lt;span class="n"&gt;end&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;monotonic&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;overhead&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;end&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;start&lt;/span&gt;
&lt;span class="n"&gt;display&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;auto_refresh&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;False&lt;/span&gt;
&lt;span class="n"&gt;display_bus&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;display&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;bus&lt;/span&gt;

&lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;max&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;next_delay&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;overhead&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="n"&gt;next_delay&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;odg&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;next_frame&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="n"&gt;display_bus&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;42&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;struct&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pack&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&amp;gt;hh&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;odg&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;bitmap&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;width&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="n"&gt;display_bus&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;43&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;struct&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pack&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&amp;gt;hh&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;odg&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;bitmap&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;height&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="n"&gt;display_bus&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;44&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;odg&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;bitmap&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;That’s it. It works. But of course not on the SAMD21, which has way
too little flash and memory to fit it all. I have built a custom
version of CircuitPython that has almost everything disabled to fit
gifio, and it kinda works, except of course:&lt;/p&gt;
&lt;div class="highlight-default notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;Auto&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;reload&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="n"&gt;on&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="n"&gt;Simply&lt;/span&gt; &lt;span class="n"&gt;save&lt;/span&gt; &lt;span class="n"&gt;files&lt;/span&gt; &lt;span class="n"&gt;over&lt;/span&gt; &lt;span class="n"&gt;USB&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;run&lt;/span&gt; &lt;span class="n"&gt;them&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="n"&gt;enter&lt;/span&gt; &lt;span class="n"&gt;REPL&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;disable&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;
&lt;span class="n"&gt;code&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt; &lt;span class="n"&gt;output&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="n"&gt;Traceback&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;most&lt;/span&gt; &lt;span class="n"&gt;recent&lt;/span&gt; &lt;span class="n"&gt;call&lt;/span&gt; &lt;span class="n"&gt;last&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
  &lt;span class="n"&gt;File&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;code.py&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; 
&lt;span class="ne"&gt;MemoryError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;memory&lt;/span&gt; &lt;span class="n"&gt;allocation&lt;/span&gt; &lt;span class="n"&gt;failed&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;allocating&lt;/span&gt; &lt;span class="mi"&gt;24024&lt;/span&gt; &lt;span class="nb"&gt;bytes&lt;/span&gt;

&lt;span class="n"&gt;Code&lt;/span&gt; &lt;span class="n"&gt;done&lt;/span&gt; &lt;span class="n"&gt;running&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;

&lt;span class="n"&gt;Press&lt;/span&gt; &lt;span class="nb"&gt;any&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;enter&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;REPL&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="n"&gt;Use&lt;/span&gt; &lt;span class="n"&gt;CTRL&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;D&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;reload&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;

&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;I’m sure I could tweak the gifio library to make it use smaller
buffers and make it fit in that RAM. But I don’t want to.&lt;/p&gt;
&lt;p&gt;I also don’t want to write the whole thing in C, using tinyUSB and a
gif library. It just feels too much like work, and very little like
fun exploration.&lt;/p&gt;
&lt;p&gt;Note that I will probably get back to the idea of a pendant with a
display showing animated GIFs. Especially since it’s now literally
just a few lines of code in CircuitPython. But I will probably use a
different displays and definitely a more powerful microcontroller. And
I will possibly just use a ready development board, such as the
Seeedstudio Xiao, because there is very little I would gain doing a
bare chip thing from scratch at this point (and because I got spoiled
by SAMD21’s minimal component count, and any other microcontroller
feels like too much work now). \&lt;/p&gt;
&lt;/section&gt;
</content>
    <link href="http://deshipu.art/projects/project-158701/log-223060/" rel="alternate"/>
    <summary>Published on 2023-09-11 in project-158701.</summary>
    <published>2023-09-11T00:00:00+02:00</published>
  </entry>
</feed>
