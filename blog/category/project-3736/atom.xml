<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
  <id>http://deshipu.art/</id>
  <title>deshipu.art - Posts in project-3736</title>
  <updated>2024-08-07T20:45:05.457269+00:00</updated>
  <link href="http://deshipu.art/"/>
  <link href="http://deshipu.art/blog/category/project-3736/atom.xml" rel="self"/>
  <generator uri="https://ablog.readthedocs.org/" version="0.10.33">ABlog</generator>
  <entry>
    <id>http://deshipu.art/projects/project-3736/log-22677/</id>
    <title>ESP8266 Servo Breakout Board</title>
    <updated>2015-08-13T00:00:00+02:00</updated>
    <content type="html">&lt;section id="esp8266-servo-breakout-board"&gt;

&lt;p&gt;Published on 2015-08-13 in &lt;span class="xref std std-ref"&gt;project-3736&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;So the PCBs arrived, and I assembled and tested one of the servo
breakout boards. It’s quite small, here’s the comparison with a coin:&lt;/p&gt;
&lt;img alt="projects/project-3736/images/2945831439468774943.jpg" src="projects/project-3736/images/2945831439468774943.jpg" /&gt;
&lt;p&gt;All the servo sockets (for those small, 3.3V servos) are on the back
side:&lt;/p&gt;
&lt;img alt="projects/project-3736/images/5788081439468823698.jpg" src="projects/project-3736/images/5788081439468823698.jpg" /&gt;
&lt;p&gt;There is also a voltage regulator there, and a couple of pullup
resistors, and that’s pretty much it. All pins except for the power
are 1.27mm, to save space.&lt;/p&gt;
&lt;/section&gt;
</content>
    <link href="http://deshipu.art/projects/project-3736/log-22677/" rel="alternate"/>
    <summary>Published on 2015-08-13 in project-3736.</summary>
    <published>2015-08-13T00:00:00+02:00</published>
  </entry>
  <entry>
    <id>http://deshipu.art/projects/project-3736/log-50993/</id>
    <title>Ressurection</title>
    <updated>2016-12-29T00:00:00+01:00</updated>
    <content type="html">&lt;section id="ressurection"&gt;

&lt;p&gt;Published on 2016-12-29 in &lt;span class="xref std std-ref"&gt;project-3736&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;I really wanted to enter one of my robots into the 1kB contest, but
unfortunately the inverse kinematics calculations result in quite some
bit of code. I tried to use some pretty neat algorithms to get around
that (see &lt;a class="reference external" href="https://hackaday.io/project/6050-tote/log/50664-cordic"&gt;https://hackaday.io/project/6050-tote/log/50664-cordic&lt;/a&gt; ), but in the end there is just too much happening on thet 8-bit
microcontroller. Switching to a 32-bit microcontroller would probably
helped, but then there is the size of all the HAL libraries and such
– it would probably come down to about the same, or worse. So I
looked at the shelf on which my robots are standing, and saw µBob. It
has hard-coded gait, so there should be no problem with calculations.
However, it used an ESP8266, and that’s again a lot of code in the
SDK/Lua/MicroPython.&lt;/p&gt;
&lt;p&gt;The robot also got quite beaten up on the last few conferences and
maker fairs it has visited. The distance sensor never worked, the
wires got loose, the battery inside shifted and changed its center of
gravity, the feet lost some of the fingers, and the power switch is in
a place that is really awkward to reach. So I decided to recycle the
parts and make a new robot.&lt;/p&gt;
&lt;img alt="projects/project-3736/images/3974481483050689226.jpg" src="projects/project-3736/images/3974481483050689226.jpg" /&gt;
&lt;p&gt;Time to re-build this robot again, with a little bit more of proper
construction. I started with the PCB, because you have to wait for
them so long. So I made this:&lt;/p&gt;
&lt;img alt="projects/project-3736/images/3439521483050998669.png" src="projects/project-3736/images/3439521483050998669.png" /&gt;
&lt;p&gt;The two big empty spaces are for attaching the servos. There is also
room for a power switch and a battery connector, and a footprint for
an ATtiny85. I got two pins free, so I’ve broken them out into some
extra headers.Once the PCBs arrived, I quickly assembled one, and started to program
the attiny. That took whole day, because for some reason the
programming would fail at various stages with very strange results.
Lowering the clock speed of the programmer, adding some jumpers and
additional options would help sometimes and then break again later. In
the end it turned out that the wires that I soldered to my programming
clip came off, and weren’t giving a good connection.&lt;/p&gt;
&lt;p&gt;Next, I needed some code to drive the servos. Unfortunately, I
couldn’t use the code from &lt;span class="xref std std-ref"&gt;project-9769&lt;/span&gt; , because this time I needed to drive 3 servos at once (actually 4,
but two of them share a common signal). So I looked around and found &lt;a class="reference external" href="http://www.thebox.myzen.co.uk/Tutorial/LEDs.html"&gt;a servo library for the ATtiny85&lt;/a&gt; . It was too big for my purposes, but I used the ideas from it to
write my own, that’s about 512 bytes (and probably can be further
optimized).&lt;/p&gt;
&lt;p&gt;Once I had that, I disassembled the poor µBob, and removed its legs:&lt;/p&gt;
&lt;img alt="projects/project-3736/images/5240641483051624333.jpg" src="projects/project-3736/images/5240641483051624333.jpg" /&gt;
&lt;p&gt;Then I attached the servos to the new PCB, with a programmed ATtiny85
and a smaller battery (from those small quadcopters):&lt;/p&gt;
&lt;img alt="projects/project-3736/images/3433491483051680543.jpg" src="projects/project-3736/images/3433491483051680543.jpg" /&gt;
&lt;p&gt;The current status: the legs are just moving back and forth for now
(testing the servos). Next, I will need some simple codo to make it
move into poses, and then maybe I will attach a distance sensor and
add some code for reading the ADC.&lt;/p&gt;
&lt;/section&gt;
</content>
    <link href="http://deshipu.art/projects/project-3736/log-50993/" rel="alternate"/>
    <summary>Published on 2016-12-29 in project-3736.</summary>
    <published>2016-12-29T00:00:00+01:00</published>
  </entry>
  <entry>
    <id>http://deshipu.art/projects/project-3736/log-51015/</id>
    <title>The Body</title>
    <updated>2016-12-30T00:00:00+01:00</updated>
    <content type="html">&lt;section id="the-body"&gt;

&lt;p&gt;Published on 2016-12-30 in &lt;span class="xref std std-ref"&gt;project-3736&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;Today I’m continuing the work on resurrecting µBob. I decided to use a
Pololu SHARP distance sensor (because it can work with 3V), and using
a bit of hot glue I attached the pins to it, so that I can plug it in
easily:&lt;/p&gt;
&lt;img alt="projects/project-3736/images/2270691483094463315.jpg" src="projects/project-3736/images/2270691483094463315.jpg" /&gt;
&lt;p&gt;On the robot side, I used stacking headers to give some distance from
the PCB:&lt;/p&gt;
&lt;img alt="projects/project-3736/images/6941621483094620260.jpg" src="projects/project-3736/images/6941621483094620260.jpg" /&gt;
&lt;p&gt;Next, to make sure it will walk in this configuration, a quick test:&lt;/p&gt;
&lt;iframe style="width: 500px; height: 281px;" width="500" height="281" frameborder="0" allowfullscreen="None" src="https://www.youtube.com/embed/YhO5LxJPn1U"&gt;&lt;/iframe&gt;
&lt;p&gt;Then I worked on the body frame. I decided to use paperclips this
time. Turns out you can solder them, so I bent them and soldered them
into the holes in the PCB:&lt;/p&gt;
&lt;img alt="projects/project-3736/images/5372171483094728658.jpg" src="projects/project-3736/images/5372171483094728658.jpg" /&gt;
&lt;p&gt;A little bit of hot glue, and the hat is back on:&lt;/p&gt;
&lt;img alt="projects/project-3736/images/3258031483094773549.jpg" src="projects/project-3736/images/3258031483094773549.jpg" /&gt;
&lt;p&gt;Finally, I also transplanted the old mustache.&lt;/p&gt;
&lt;/section&gt;
</content>
    <link href="http://deshipu.art/projects/project-3736/log-51015/" rel="alternate"/>
    <summary>Published on 2016-12-30 in project-3736.</summary>
    <published>2016-12-30T00:00:00+01:00</published>
  </entry>
  <entry>
    <id>http://deshipu.art/projects/project-3736/log-51068/</id>
    <title>Distance Sensor</title>
    <updated>2016-12-31T00:00:00+01:00</updated>
    <content type="html">&lt;section id="distance-sensor"&gt;

&lt;p&gt;Published on 2016-12-31 in &lt;span class="xref std std-ref"&gt;project-3736&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;For the first time µBob has a working distance sensor on board (you
might recall I tried to give it a distance sensor earlier, but it
didn’t work). So let’s make use of it.&lt;/p&gt;
&lt;p&gt;The sensor I’m using is a SHARP GP2Y0A60SZLF on a breakout board from
Pololu. It’s an analog sensor, which is good, because I can use only a
single pin for it. All I have to do is get the ADC to work. A bit of
googling for examples, and a little bit of cross-checking with the
datasheet, and I had the basic procedure:\&lt;/p&gt;
&lt;div class="highlight-cpp notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;ADCSRA&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;ADEN&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;ADPS2&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;ADPS1&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;ADPS0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="c1"&gt;// Pre-scaler 64.&lt;/span&gt;
&lt;span class="n"&gt;ADMUX&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;ADLAR&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;REFS1&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;REFS0&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;pin&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mh"&gt;0x03&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="n"&gt;ADCSRA&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;|=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;ADSC&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="k"&gt;while&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ADCSRA&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;ADSC&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c1"&gt;// Pass.&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;ADCH&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;ADCL&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;However, that didn’t work. I spent half a day trying to figure out why
it would keep returning the same number all the time, changing only on
reset. Everything was exactly the same as in the datasheet, the
examples, even the Arduino cores that I checked. What did I miss?
After asking around a bit on IRC and robotics forums, someone pointed
out to me that the order in which you read ADCH and ADCL is important
– there is a latch there, that makes sure the values won’t change in
the middle of your reading. Sure enough, I had the order wrong. The
fix is very simple – I can defer to the compiler to do the right
thing by just doing:&lt;/p&gt;
&lt;div class="highlight-cpp notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;ADC&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;That’s it. Suddenly I started getting changing values, as expected.
However, the changes still weren’t in any way correlated with the
voltage on the pin… Back to the drawing board. Four re-readings of
the datasheet later I just tried the same program on a different chip,
and it worked fine. Turns out the ATtiny85 that I have soldered to a
breakout board some 2 years ago and used since for all sorts of
uncanny experiments must have gotten the ADC broken somehow –
possibly by applying higher voltage than it should get.&lt;/p&gt;
&lt;p&gt;In any case, the next step is checking the range of the sensor. I
don’t have any way to display the readings from the robot (and I want
to check the readings in the robot, not on a separate circuit, because
the voltages would be different), so I wrote a simple program that
basically moves a servo depending on the value read from the sensor.
Since I know the servo’s range, I can guess what the reading was.&lt;/p&gt;
&lt;p&gt;That worked pretty well, now I just need to fine-tune the walking
algorithm to make the robot go straight, add some animations for
turning and going backwards, and make a simple state machine switching
between those animations depending on the sensor readings. Should fit
in the ~400 bytes of program space I have left.&lt;/p&gt;
&lt;/section&gt;
</content>
    <link href="http://deshipu.art/projects/project-3736/log-51068/" rel="alternate"/>
    <summary>Published on 2016-12-31 in project-3736.</summary>
    <published>2016-12-31T00:00:00+01:00</published>
  </entry>
  <entry>
    <id>http://deshipu.art/projects/project-3736/log-51106/</id>
    <title>Obstacle Avoidance</title>
    <updated>2017-01-01T00:00:00+01:00</updated>
    <content type="html">&lt;section id="obstacle-avoidance"&gt;

&lt;p&gt;Published on 2017-01-01 in &lt;span class="xref std std-ref"&gt;project-3736&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;All that was left was writing the code, and testing it. And making
some corrections, and testing them. And fine-tuning some parameter,
and testing. And then a little bit of testing.&lt;/p&gt;
&lt;p&gt;All this time I was programming the robot using my programming clip.
Unfortunately, it became a bit loose, so I had to hold it in place
with my hand while programming, so it was a little inconvenient.
Because of the placement of the chip, I also had to remove at least
one leg every time I wanted to program it, and I had to disconnect the
servos, as they take too much power and make the computer shut down
the USB port. In the end, it was a lot of reprogramming, and I wish I
had broken out the programming interface in some more convenient way.
Oh well.&lt;/p&gt;
&lt;p&gt;During testing, I also connected a piezo speaker to the last unused
pin, and bit-banged beeps on it (it’s not a timer pin, so couldn’t do
PWM, I guess something to consider for the next version). That helped
in debugging a lot, since I could place different beeps in different
places in the program, and I would know where the robot was. Since
they were primitively bit-banged, the robot also paused while beeping,
which let me see better the different phases of its movement.&lt;/p&gt;
&lt;p&gt;At some point I decided to get rid of the old feed, and made new ones,
out of an expired public transportation card. I also painted the new
feet with liquid rubber, to give them a better grip.&lt;/p&gt;
&lt;img alt="projects/project-3736/images/9499261483281935973.jpg" src="projects/project-3736/images/9499261483281935973.jpg" /&gt;
&lt;p&gt;You can also see on this photo, that I went back to the old battery.
It fits in the hat, and it has a much better C value. I decided to not
include the battery charger module in the robot this time – you have
to disconnect the battery for charging.&lt;/p&gt;
&lt;iframe style="width: 500px; height: 281px;" width="500" height="281" frameborder="0" allowfullscreen="None" src="https://www.youtube.com/embed/S6yyWpflXrM"&gt;&lt;/iframe&gt;
&lt;p&gt;Finally, a video of the robot doing its thing. It checks the distance
at every step, at the moment when the body is horizontal. I used the
fact that with each step it’s looking in a different direction, and I
made it choose the direction of the turn based on that. Oh, I also
sped up the final version of the code. Unfortunately, I had to remove
the beeping code to make it all fit in 1kB for the challenge.&lt;/p&gt;
&lt;div class="highlight-default notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;AVR&lt;/span&gt; &lt;span class="n"&gt;Memory&lt;/span&gt; &lt;span class="n"&gt;Usage&lt;/span&gt;
&lt;span class="o"&gt;----------------&lt;/span&gt;
&lt;span class="n"&gt;Device&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;attiny85&lt;/span&gt;

&lt;span class="n"&gt;Program&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;    &lt;span class="mi"&gt;1006&lt;/span&gt; &lt;span class="nb"&gt;bytes&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;12.3&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;Full&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;bootloader&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;Data&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;         &lt;span class="mi"&gt;19&lt;/span&gt; &lt;span class="nb"&gt;bytes&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;3.7&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;Full&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;bss&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;noinit&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;The walking code turned out to be much larger than I expected – even
though it’s mostly just calling a single function with three 16-bit
integer parameters. I guess I could scale them down to bytes to save
some space…&lt;/p&gt;
&lt;/section&gt;
</content>
    <link href="http://deshipu.art/projects/project-3736/log-51106/" rel="alternate"/>
    <summary>Published on 2017-01-01 in project-3736.</summary>
    <published>2017-01-01T00:00:00+01:00</published>
  </entry>
</feed>
