<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
  <id>http://deshipu.art/</id>
  <title>deshipu.art - Posts in project-27629</title>
  <updated>2024-08-07T20:31:58.776243+00:00</updated>
  <link href="http://deshipu.art/"/>
  <link href="http://deshipu.art/blog/category/project-27629/atom.xml" rel="self"/>
  <generator uri="https://ablog.readthedocs.org/" version="0.10.33">ABlog</generator>
  <entry>
    <id>http://deshipu.art/projects/project-27629/log-161690/</id>
    <title>CircuitPython 4.0 and Display Support</title>
    <updated>2019-04-12T00:00:00+02:00</updated>
    <content type="html">&lt;section id="circuitpython-4-0-and-display-support"&gt;

&lt;p&gt;Published on 2019-04-12 in &lt;a class="reference internal" href="../../../projects/project-27629/#project-27629"&gt;&lt;span class="std std-ref"&gt;µGame&lt;/span&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The upcoming CircuitPython 4.0 introduces, among other things, built-
in support for displays. That means that when there is an error in
your code, you will be able to see it right there on the screen,
without having to connect to some gnarly serial ports. For now the
built-in display code is slow — fast enough for displaying text, but
not for games. So I went and modified my &lt;span class="xref std std-ref"&gt;project-80626&lt;/span&gt;  library to coexist with the displayio support, to get the best of
both world — console using displayio, and fast updates using stage.&lt;/p&gt;
&lt;img alt="projects/project-27629/images/5830841555024172770.jpg" src="projects/project-27629/images/5830841555024172770.jpg" /&gt;
&lt;p&gt;There are still some tweaks left to do, perhaps use of a smaller font,
and I still need to resolve the audioio problems that appeared with
CircuitPython 3.0, but there are already nice improvements.&lt;/p&gt;
&lt;p&gt;I also hope to see if I can use DMA to speed up display updates
considerably.&lt;/p&gt;
&lt;/section&gt;
</content>
    <link href="http://deshipu.art/projects/project-27629/log-161690/" rel="alternate"/>
    <summary>Published on 2019-04-12 in project-27629.</summary>
    <published>2019-04-12T00:00:00+02:00</published>
  </entry>
  <entry>
    <id>http://deshipu.art/projects/project-27629/log-162100/</id>
    <title>Underwhelming DMA</title>
    <updated>2019-04-19T00:00:00+02:00</updated>
    <content type="html">&lt;section id="underwhelming-dma"&gt;

&lt;p&gt;Published on 2019-04-19 in &lt;a class="reference internal" href="../../../projects/project-27629/#project-27629"&gt;&lt;span class="std std-ref"&gt;µGame&lt;/span&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I finally worked on an improvement that I long wanted to do to the
_stage library, which is at the heart of µGame: make the communication
with the display asynchronous by using DMA. This way I can have two
buffers, and calculate the contents of one of them while the other one
is being sent to the display.&lt;/p&gt;
&lt;p&gt;As a test I used the balls demo from the tutorial, but with all
waiting for the next frame removed — so they move as fast as they can.&lt;/p&gt;
&lt;p&gt;Here is how it works before DMA:&lt;/p&gt;
&lt;img alt="projects/project-27629/images/4838621555700681233.gif" src="projects/project-27629/images/4838621555700681233.gif" /&gt;
&lt;p&gt;And here is how it works with DMA:&lt;/p&gt;
&lt;img alt="projects/project-27629/images/1409261555700732524.gif" src="projects/project-27629/images/1409261555700732524.gif" /&gt;
&lt;p&gt;As you can see, there is barely any perceptible difference at all!&lt;/p&gt;
&lt;p&gt;The code I wrote for this is pretty nasty and hacky, and after seeing
this, I don’t think I have the heart to clean it up and send it as a
pull request — it’s simply not worth it.&lt;/p&gt;
&lt;p&gt;However, I will keep an eye for other ways of improving the firmware.&lt;/p&gt;
&lt;p&gt;UPDATE: Yes, I made some more precise measurements as well. Running
through 1000 frames of the animation took the DMA version 31.034s and
the non-DMA version 32.699s. That is 32.22 fps with DMA and 30.58 fps
without.&lt;/p&gt;
&lt;p&gt;UPDATE2: I did a second test, with full-screen updates this
time. 159.08s for non-DMA, versus 148.708s for DMA. That’s 6.28 fps
versus 6.72 fps. Even with such a large amount of data, the difference
is negligible compared to the time spent computing it.&lt;/p&gt;
&lt;/section&gt;
</content>
    <link href="http://deshipu.art/projects/project-27629/log-162100/" rel="alternate"/>
    <summary>Published on 2019-04-19 in project-27629.</summary>
    <published>2019-04-19T00:00:00+02:00</published>
  </entry>
  <entry>
    <id>http://deshipu.art/projects/project-27629/log-163663/</id>
    <title>CircuitPython 4.0.0 Released, Please Wait for 4.0.1</title>
    <updated>2019-05-20T00:00:00+02:00</updated>
    <content type="html">&lt;section id="circuitpython-4-0-0-released-please-wait-for-4-0-1"&gt;

&lt;p&gt;Published on 2019-05-20 in &lt;a class="reference internal" href="../../../projects/project-27629/#project-27629"&gt;&lt;span class="std std-ref"&gt;µGame&lt;/span&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The CircuitPython 4.0.0 has just been released, and it does include
support for µGame. However, due to last-minute breaking changes in
RC4, and my travelling that made it impossible to fix it over the
weekend in time for the release, the Stage library is broken in that
release and won’t work.&lt;/p&gt;
&lt;p&gt;So please refrain from upgrading for now.&lt;/p&gt;
&lt;p&gt;I’m being told that there should be a version 4.0.1 released next week
or so, which will have it all fixed.&lt;/p&gt;
&lt;/section&gt;
</content>
    <link href="http://deshipu.art/projects/project-27629/log-163663/" rel="alternate"/>
    <summary>Published on 2019-05-20 in project-27629.</summary>
    <published>2019-05-20T00:00:00+02:00</published>
  </entry>
  <entry>
    <id>http://deshipu.art/projects/project-27629/log-164355/</id>
    <title>The Last µGame</title>
    <updated>2019-06-06T00:00:00+02:00</updated>
    <content type="html">&lt;section id="the-last-game"&gt;

&lt;p&gt;Published on 2019-06-06 in &lt;a class="reference internal" href="../../../projects/project-27629/#project-27629"&gt;&lt;span class="std std-ref"&gt;µGame&lt;/span&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Yesterday I received the order for the last µGame on Tindie. That
makes it 111 units sold on Tindie (and maybe a dozen more sold
elsewhere). Since I don’t plan on making any more of them, that was
the last µGame being sold.&lt;/p&gt;
&lt;p&gt;The project is not finished, of course — I will continue to improve
the firmware, and I want to write a few more games for it. I won’t be
making promises, though — reality has a way of getting into my plans.&lt;/p&gt;
&lt;p&gt;If you want to try developing such games with CircuitPython yourself,
you can now get the PyBadge board from Adafruit — apart from a
slightly bigger screen and much more powerful MCU, it’s compatible, so
all the games should work on it.&lt;/p&gt;
&lt;p&gt;I have certainly learned a lot with this project, and I hope there
will still grow a community of users for it.&lt;/p&gt;
&lt;/section&gt;
</content>
    <link href="http://deshipu.art/projects/project-27629/log-164355/" rel="alternate"/>
    <summary>Published on 2019-06-06 in project-27629.</summary>
    <published>2019-06-06T00:00:00+02:00</published>
  </entry>
  <entry>
    <id>http://deshipu.art/projects/project-27629/log-164887/</id>
    <title>Suddenly:  A Speedup</title>
    <updated>2019-06-21T00:00:00+02:00</updated>
    <content type="html">&lt;section id="suddenly-a-speedup"&gt;

&lt;p&gt;Published on 2019-06-21 in &lt;a class="reference internal" href="../../../projects/project-27629/#project-27629"&gt;&lt;span class="std std-ref"&gt;µGame&lt;/span&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The SAMD21 powering the µGame consoles is not a daemon of speed. With
48MHz clock and software floating point operations, not to mention the
overhead from CircuitPython interpreter, it’s barely enough for a
dozen frames per second in a relatively simple game. But there is good
news: a recently released beta version of CircuitPython, 4.1.0, has
enabled an optimization option which has been so far disabled to save
on firmware size. It had been re-enabled, because it turns out that it
provides a five time speedup of the CircuitPython virtual machine, and
the size savings weren’t that big anyways.&lt;/p&gt;
&lt;p&gt;So now suddenly all µGames are going to be 5x faster as soon as you
upgrade their firmware with 4.1.0 that you can download from &lt;a class="reference external" href="http://circuitpython.org"&gt;http://circuitpython.org&lt;/a&gt; .&lt;/p&gt;
&lt;/section&gt;
</content>
    <link href="http://deshipu.art/projects/project-27629/log-164887/" rel="alternate"/>
    <summary>Published on 2019-06-21 in project-27629.</summary>
    <published>2019-06-21T00:00:00+02:00</published>
  </entry>
</feed>
