<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
  <id>http://deshipu.art/</id>
  <title>deshipu.art</title>
  <updated>2024-10-21T21:17:29.878153+00:00</updated>
  <link href="http://deshipu.art/"/>
  <link href="http://deshipu.art/blog/atom.xml" rel="self"/>
  <generator uri="https://ablog.readthedocs.org/" version="0.10.33">ABlog</generator>
  <entry>
    <id>http://deshipu.art/projects/project-bluejoy/</id>
    <title>BlueJoy</title>
    <updated>2024-10-08T00:00:00+02:00</updated>
    <content type="html">&lt;section class="tex2jax_ignore mathjax_ignore" id="bluejoy"&gt;

&lt;p&gt;Bluetooth gamepad shield for Xiao&lt;/p&gt;
&lt;div class="project-thumb"&gt;
&lt;a class="reference external image-reference" href="/_images/Screenshot_2024-10-07_23-38-10.png"&gt;&lt;img alt="../_images/thumb-Screenshot_2024-10-07_23-38-10.png" src="../_images/thumb-Screenshot_2024-10-07_23-38-10.png" /&gt;&lt;/a&gt;
&lt;/div&gt;
&lt;p&gt;There are a lot of wireless gamepads out there, from tiny pocket things to large game console controllers. It would be nice to be able to control our projects with them, especially when those projects are robots of some kind. We can do it easily with a library like Bluepad32-AirLift, but that requires an AirLift module, which is rather large, and requires a lot of pins for its SPI connection.&lt;/p&gt;
&lt;p&gt;This is an attempt at making a much smaller module, the size of a Seeed Xiao board, that runs the Bluepad32-Arduino firmware, but communicates over I2C.&lt;/p&gt;
&lt;section id="logs"&gt;
&lt;h2&gt;Logs&lt;/h2&gt;
&lt;ul class="postlist-style-none postlist simple"&gt;
&lt;li class="ablog-post"&gt;&lt;p class="ablog-post-title"&gt;2024-10-15 - &lt;a class="reference internal" href="../projects/project-bluejoy/log-4/"&gt;First Prototype Success&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li class="ablog-post"&gt;&lt;p class="ablog-post-title"&gt;2024-10-14 - &lt;a class="reference internal" href="../projects/project-bluejoy/log-3/"&gt;First Prototype Fail&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li class="ablog-post"&gt;&lt;p class="ablog-post-title"&gt;2024-10-09 - &lt;a class="reference internal" href="../projects/project-bluejoy/log-2/"&gt;Firmware&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li class="ablog-post"&gt;&lt;p class="ablog-post-title"&gt;2024-10-08 - &lt;a class="reference internal" href="../projects/project-bluejoy/log-1/"&gt;PCB Design&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/section&gt;
&lt;/section&gt;
</content>
    <link href="http://deshipu.art/projects/project-bluejoy/" rel="alternate"/>
    <summary>Bluetooth gamepad shield for Xiao.</summary>
    <category term="hardware" label="hardware"/>
    <category term="ongoingproject" label="ongoing project"/>
    <published>2024-10-08T00:00:00+02:00</published>
  </entry>
  <entry>
    <id>http://deshipu.art/projects/project-bluejoy/log-1/</id>
    <title>PCB Design</title>
    <updated>2024-10-08T00:00:00+02:00</updated>
    <content type="html">&lt;section class="tex2jax_ignore mathjax_ignore" id="pcb-design"&gt;

&lt;p&gt;Published on 2024-10-08 in &lt;a class="reference internal" href="../projects/project-bluejoy/#project-bluejoy"&gt;&lt;span class="std std-ref"&gt;BlueJoy&lt;/span&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The goal of our little device is to be able to interface with bluetooth
gamepads from any other microcontroller board, and any programming language.
To achieve that, we are going to design a shield for the Xiao form factor, with
an I2C interface, and with an ESP32 on board. Since this is going to be used as
an expansion board, we don’t need a voltage regulator (we will get stable 3.3V
from the parent board), USB serial connection (we will program the board once
using an external serial to USB adapter), or any additional peripherals. As
this is going to be an I2C module, we do want to have pull-up resistors on it,
though.&lt;/p&gt;
&lt;p&gt;However, what we do need is a properly working ESP32 chip with all its required
components like crystal oscillator or flash memory, and more importantly, a
properly designed and tuned 2.4GHz antenna for the Bluetooth communication.
This is something that I don’t want to have to deal with, so the solution
suggests itself: we are going to use a ready ESP32 module.&lt;/p&gt;
&lt;p&gt;But is there one that is small enough to fit on the Xiao footprint? Turns out
that yes, there is one that is pretty much exactly the right size:
ESP32-PICO-MINI-02-N8R2. To be honest, it’s a bit of an overkill, even, with
its 2MB of PSRAM and 8MB of Flash. We could easily do this with just the
built-in RAM and the smallest flash chip supported, but this one is easy to get
and it will work too, so why not. Perhaps if I get this working I can nerdsnipe
someone into designing a cheaper custom board. Who knows.&lt;/p&gt;
&lt;img alt="../_images/Screenshot_2024-10-07_23-38-10.png" src="../_images/Screenshot_2024-10-07_23-38-10.png" /&gt;
&lt;p&gt;A bit of work in EasyEDA, and we have our basic shield done. The module
contains almost everything we need, so the PCB is basically just an adapter.
The only extra components are the two pull-up resistors. Otherwise it’s all
just pin headers.&lt;/p&gt;
&lt;img alt="../_images/Screenshot_2024-10-07_23-39-05.png" src="../_images/Screenshot_2024-10-07_23-39-05.png" /&gt;
&lt;p&gt;The back side just has some convenient labels: the name and version of the
project, so I can figure out what it is in a few years, and labels for all the
connected pins, so I can quickly figure out if it’s compatible with a
particular board.&lt;/p&gt;
&lt;p&gt;Next we are going to look into the firmware.&lt;/p&gt;
&lt;/section&gt;
</content>
    <link href="http://deshipu.art/projects/project-bluejoy/log-1/" rel="alternate"/>
    <summary>Published on 2024-10-08 in project-bluejoy.</summary>
    <published>2024-10-08T00:00:00+02:00</published>
  </entry>
  <entry>
    <id>http://deshipu.art/projects/project-bluejoy/log-2/</id>
    <title>Firmware</title>
    <updated>2024-10-09T00:00:00+02:00</updated>
    <content type="html">&lt;section class="tex2jax_ignore mathjax_ignore" id="firmware"&gt;

&lt;p&gt;Published on 2024-10-09 in &lt;a class="reference internal" href="../projects/project-bluejoy/#project-bluejoy"&gt;&lt;span class="std std-ref"&gt;BlueJoy&lt;/span&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;With the PCB designed and ordered, it’s time to look at the firmware a bit. Of
course with no hardware to test it on, we are going to need to improvise
somewhat, and just use some off-the-shelf ESP32 development board, with pull-up
resistors added.&lt;/p&gt;
&lt;img alt="../_images/IMG_20241004_205425_HDR.jpg" src="../_images/IMG_20241004_205425_HDR.jpg" /&gt;
&lt;p&gt;I initially planned to use the Bluepad32-Airlift firmware, only modify it to
use I2C instead of SPI. However, after looking a little bit at the source code
and realizing I have zero experience with ESP-IDF, I decided to pick the path
of the least resistance, and instead use Bluepad32-Arduino together with
Arduino’s good old Wire library.&lt;/p&gt;
&lt;p&gt;The documentation for Bluepad32-Arduino explains very well how to setup the
environment and get the example code compiled and working. One snag that I hit
is that by default the example code doesn’t print anything on the serial
console when buttons are pressed — it only changes the LEDs on the controller,
which incidentally my gamepad didn’t have. So until I actually looked at the
code and added some debugging prints, I was convinced it doesn’t work. But I
only wasted an hour or two on that, and the rest went smoothly.&lt;/p&gt;
&lt;p&gt;The example file actually gets us halfway there: it shows how to initialize
newly connected gamepads, and how to run the update loop for them, and how to
get their state. Adding the initialization for I2C slave and the onRequest and
onReceive callback got the I2C working, and then it’s just a question of a
bunch of switch statements to simulate registers.&lt;/p&gt;
&lt;p&gt;Because the complete state of the gamepad turned out to be rather large for I2C
at 54 bytes, I decided to split it into the basic and advanced parts, the
former containing the d-pad, x and y axes, and buttons, and the latter having
all the rest, including other axes, gyro, accelerometer, throttle, etc. This
way we can keep things fast and snappy for basic use, and still have the
advanced stuff if we need it.&lt;/p&gt;
&lt;p&gt;I might need to rework some of the details of it further once I have tested it all somewhat. For example, the register that tells us if there has been any change since the last communication right now only returns 0 or 1, but I could make it return a bitmask of which of the gamepads have a change in their status instead, so that we can then only query those.&lt;/p&gt;
&lt;p&gt;I will be putting the source code for this firmware, together with an example library for CircuitPython for communicating with it in a repository once I have the hardware tested an working.&lt;/p&gt;
&lt;/section&gt;
</content>
    <link href="http://deshipu.art/projects/project-bluejoy/log-2/" rel="alternate"/>
    <summary>Published on 2024-10-09 in project-bluejoy.</summary>
    <published>2024-10-09T00:00:00+02:00</published>
  </entry>
  <entry>
    <id>http://deshipu.art/projects/project-bluejoy/log-3/</id>
    <title>First Prototype Fail</title>
    <updated>2024-10-14T00:00:00+02:00</updated>
    <content type="html">&lt;section class="tex2jax_ignore mathjax_ignore" id="first-prototype-fail"&gt;

&lt;p&gt;Published on 2024-10-14 in &lt;a class="reference internal" href="../projects/project-bluejoy/#project-bluejoy"&gt;&lt;span class="std std-ref"&gt;BlueJoy&lt;/span&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I rushed the design of the PCB for the first prototype, because I thought that
with just three components there isn’t that much I can get wrong at the first
try, is it? Well, turns out that I should have read the datasheet for that
esp32 module more carefully. Specifically this part:&lt;/p&gt;
&lt;img alt="Schematic of an example circuit using the esp32 module." src="../_images/Screenshot_2024-10-14_17-47-39.png" /&gt;
&lt;p&gt;You will note, that this example schematic contains a crystal. I assumed that a
ready to use module would already contain a crystal under the shield, after all
it’s one of those things you pretty much always need, and it needs some fine
tuning to get perfectly right. But turns out that no, this particular module
requires an external crystal. And of course the way all the pads are under the
module, I can’t even bodge one in there and see if it will work. I need a
second PCB prototype.&lt;/p&gt;
&lt;p&gt;So I sat down and redesigned the board a little bit. I used smaller resistors,
and moved the programming header a little bit to the edge, to make room for the
extra components. Apart from the crystal with its capacitors, I also added two
extra resistors, just in case: one pulls the RST pin up, and one pulls the IO12
pin down. Since I don’t have the required crystal and capacitors at hand, I
decided to get the boards assembled this time — that way I don’t have to pay
for the shipping of the parts, and since all the parts are from the basic parts
set, the assembly is almost covered by the coupon. The module itself is not
included in the assembly, I will have to add it myself.&lt;/p&gt;
&lt;img alt="Rendering of the second prototype PCB." src="../_images/Screenshot_2024-10-14_17-22-11.png" /&gt;
&lt;p&gt;I still felt bad for wasting money on a bad prototype, though, so I picked the cheapest shipping option. I will work on some other projects in the mean time.&lt;/p&gt;
&lt;/section&gt;
</content>
    <link href="http://deshipu.art/projects/project-bluejoy/log-3/" rel="alternate"/>
    <summary>Published on 2024-10-14 in project-bluejoy.</summary>
    <published>2024-10-14T00:00:00+02:00</published>
  </entry>
  <entry>
    <id>http://deshipu.art/projects/project-bluejoy/log-4/</id>
    <title>First Prototype Success</title>
    <updated>2024-10-15T00:00:00+02:00</updated>
    <content type="html">&lt;section class="tex2jax_ignore mathjax_ignore" id="first-prototype-success"&gt;

&lt;p&gt;Published on 2024-10-15 in &lt;a class="reference internal" href="../projects/project-bluejoy/#project-bluejoy"&gt;&lt;span class="std std-ref"&gt;BlueJoy&lt;/span&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Rushing the design is bad, but jumping to conclusions is also not great. Turns
out that the problem is not with the crystal at all. The module I’m using does
contain the 40MHz crystal that is necessary for the chip to work, and the
additional 32.7kHz crystal is entirely optional. My redesign was a complete
waste of time and money. Sadly, it can’t be cancelled anymore, but the boards
should work perfectly fine anyways.&lt;/p&gt;
&lt;p&gt;What changed? Well, I had a chat with UnexpectedMaker, who has immense experience with the ESP32 chips and modules, and he explained it to me. He also pointed me in the right direction to get my prototype working, and that was resoldering the module. I thought that I did a pretty good job soldering it, as it was all well aligned, and there were no visible problem. But when I desoldered it, this is what I saw:&lt;/p&gt;
&lt;img alt="Desoldered esp32 module with many pads not touched by solder." src="../_images/IMG_20241015_115422_HDR.jpg" /&gt;
&lt;p&gt;As you can see, many of the pads weren’t even as much as touched by solder. You can still see the golden ENIG finish on them. So I tinned both the PCB and the module pads, applied a generous amount of flux, and soldered the module on again, making sure I apply plenty of pressure all around it.&lt;/p&gt;
&lt;p&gt;And the effect was immediate. After some fumbling with connecting the USB to
UART adapter, I got the board programmed, and it works:&lt;/p&gt;
&lt;img alt="Working shield with a bluetooth gamepad connected to it." src="../_images/IMG_20241015_125228_HDR.jpg" /&gt;
&lt;p&gt;There is one more good thing that came out of that conversation. When I said
that I don’t really need all that flash and ram that this module has,
UnexpectedMaker pointed out that the ESP32-MINI-1 module has the same width,
only being a little bit longer, and is cheaper because it doesn’t have the
extra ram and only has a small flash chip. So I went ahead and redesigned the
PCB to use that module. I had to change the programming header to pads on the bottom of the module, and had to switch to smaller resistors and capacitors, but it fits, and the routing is less of a mess.&lt;/p&gt;
&lt;img alt="A rendering of a PCB with an esp32 module." src="../_images/Screenshot_2024-10-15_13-14-20.png" /&gt;
&lt;p&gt;It’s going on the same slow shipping as the boards with the crystal, so I will
get to them some time next month when they arrive. For now, I have the working
first prototype to use.&lt;/p&gt;
&lt;/section&gt;
</content>
    <link href="http://deshipu.art/projects/project-bluejoy/log-4/" rel="alternate"/>
    <summary>Published on 2024-10-15 in project-bluejoy.</summary>
    <published>2024-10-15T00:00:00+02:00</published>
  </entry>
</feed>
