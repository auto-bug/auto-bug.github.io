<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
  <id>http://deshipu.art/</id>
  <title>deshipu.art</title>
  <updated>2025-08-26T20:42:05.543223+00:00</updated>
  <link href="http://deshipu.art/"/>
  <link href="http://deshipu.art/blog/atom.xml" rel="self"/>
  <generator uri="https://ablog.readthedocs.org/" version="0.10.33">ABlog</generator>
  <entry>
    <id>http://deshipu.art/projects/project-mite-208/</id>
    <title>Mite 208</title>
    <updated>2025-01-27T00:00:00+01:00</updated>
    <content type="html">&lt;section class="tex2jax_ignore mathjax_ignore" id="mite-208"&gt;

&lt;p&gt;Small development board with CH32V208.&lt;/p&gt;
&lt;div class="project-thumb"&gt;
&lt;a class="reference external image-reference" href="/_images/IMG_20250127_163658_HDR.jpg"&gt;&lt;img alt="../_images/thumb-IMG_20250127_163658_HDR.jpg" src="../_images/thumb-IMG_20250127_163658_HDR.jpg" /&gt;&lt;/a&gt;
&lt;/div&gt;
&lt;p&gt;I recently started to play with the CH32V family of microcontrollers, and
they are a lot of fun, but most ready development boards you can get are for
the cheaper models in the family, with very little RAM. This is fine for
blinking LEDs, but if you want to start playing with USB, filesystem, displays,
and graphic formats, you need something with a bit more oomph. Those models
have demo boards that try to fully show off the capabilities of those chips,
so they are huge, with multiple USB sockets, bluetooth antennas, and ethernet
sockets. I wanted one of the more powerful chips but on a small devboard.&lt;/p&gt;
&lt;p&gt;I quite like the Xiao and QtPy form factor, so I made a board that is
compatible with that. While the chip supports bluetooth and ethernet, those
pins are not broken out — I just want the 64kB of RAM in this case.&lt;/p&gt;
&lt;section id="logs"&gt;
&lt;h2&gt;Logs&lt;/h2&gt;
&lt;ul class="postlist-style-none postlist simple"&gt;
&lt;li class="ablog-post"&gt;&lt;p class="ablog-post-title"&gt;2025-01-27 - &lt;a class="reference internal" href="../projects/project-mite-208/log-1/"&gt;Blink&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/section&gt;
&lt;/section&gt;
</content>
    <link href="http://deshipu.art/projects/project-mite-208/" rel="alternate"/>
    <summary>Small development board with CH32V208.</summary>
    <category term="hardware" label="hardware"/>
    <category term="ongoingproject" label="ongoing project"/>
    <published>2025-01-27T00:00:00+01:00</published>
  </entry>
  <entry>
    <id>http://deshipu.art/projects/project-192761/log-223771/</id>
    <title>Programming CH32V203</title>
    <updated>2025-01-27T00:00:00+01:00</updated>
    <content type="html">&lt;section class="tex2jax_ignore mathjax_ignore" id="programming-ch32v203"&gt;

&lt;p&gt;Published on 2025-01-27 in &lt;a class="reference internal" href="../projects/project-192761/#project-192761"&gt;&lt;span class="std std-ref"&gt;Astro-chan Badge&lt;/span&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I finally got a working chlink programmer, so I was able to continue with this
project. Since I already had an LCD display demo working on a development
board, I was expecting it will just be a question of changing the pin numbers
and peripherals. Two days of debugging later, and I still didn’t get the board
to even run a simple blink example. It’s all working perfectly fine on a
development board with a crystal, but not on my board or the crystal-less LANA
TNY development board that I also used for testing. Even though I explicitly
enabled the internal HCI clock as the clock source.&lt;/p&gt;
&lt;p&gt;I never really figured out what was wrong. I just went back to the example
program for LANA TNY, and re-created the LCD example based on that code. And
that worked for some reason. I suspect it’s a question of an old version of the
vendor libraries.&lt;/p&gt;
&lt;img alt="Duplicant SAO." src="../_images/IMG_20250125_203924_HDR.jpg" /&gt;
&lt;p&gt;In any case, I had the code that displays an image on the display, but I wanted
that image to be animated. So I added another one, and some delays between
displaying them in a loop. Sadly, as soon as I tried to add a third image, I
ran out of flash space. It’s really no wonder, as 16 bits per pixel, that data takes up a lot of space.&lt;/p&gt;
&lt;p&gt;But the images I’m displaying are really simple, cartoon-like. I don’t really
need 16-bit color for them. In fact, 16 colors (4-bit) would be more than
enough. So with a bit of change in how the data is generated, I added a palette
and used indexed colors. There is no visible difference in quality, but now I can fit as many as 8 or 9 frames of animation. I could make that even better if I limit the images only to areas that change (like the eyes), but that would require a little better preparation of the images.&lt;/p&gt;
&lt;p&gt;In any case, I think the whole thing is in a workable state now, so I put everything in a &lt;a class="reference external" href="https://github.com/deshipu/dupe-sao"&gt;github repository&lt;/a&gt;. I want to improve this further, but we will see how that goes.&lt;/p&gt;
&lt;/section&gt;
</content>
    <link href="http://deshipu.art/projects/project-192761/log-223771/" rel="alternate"/>
    <summary>Published on 2025-01-27 in project-192761.</summary>
    <published>2025-01-27T00:00:00+01:00</published>
  </entry>
  <entry>
    <id>http://deshipu.art/projects/project-mite-servo/log-1/</id>
    <title>CH32V003 as a servo controller</title>
    <updated>2025-07-15T00:00:00+02:00</updated>
    <content type="html">&lt;section class="tex2jax_ignore mathjax_ignore" id="ch32v003-as-a-servo-controller"&gt;

&lt;p&gt;Published on 2025-07-15 in &lt;a class="reference internal" href="../projects/project-mite-servo/#project-mite-servo"&gt;&lt;span class="std std-ref"&gt;Mite Servo&lt;/span&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;We need to program a small, cheap microcontroller to act as an I2C device, and
generate 50Hz PWM signals on at least eight pins. Can we do it with the
CH32V003? A quick check reveals that we have two timers, with four channels
each, and an I2C peripheral, so it should be just possible? But what about
resolution? Servo signals are peculiar: yes, they repeat every 20ms, so they
are 50Hz, but each impulse is only about 1-2ms long. So if you have an 8 bit
timer, about 5 of those bits are wasted, because they are never going to be
set. Even with 16 bit timer, you only have about 6-7 bits of effective use.
The rest is just wasted.&lt;/p&gt;
&lt;p&gt;But 20ms is a very long time for a microcontroller, and the pulses don’t have
to happen all at the same time. In fact, it would be better to stagger them
somewhat, to avoid current spikes (cheap servos tend to drive the motor when
they receive the signal). So here’s another plan: use one clock to trigger an
interrupt every 20ms (or more often, for staggered signals), and then in that
interrupt trigger timers in one-shot mode to actually generate the pulses.
Those one-shot timers can then have a much smaller range, and so better
resolution.&lt;/p&gt;
&lt;p&gt;Even better, since I can switch which pins a timer is connected to, I can use
more than just the four channels for every timer – I can use every pin that
has any timer connected to it, negated or normal, because I can reconfigure the
timers in between the pulses. As long as it fits in the 18ms time in between
the pulses, that is, but my initial experiments show that it will most likely
work.&lt;/p&gt;
&lt;p&gt;That means that after this 8-servo controller, I will probably take a stab at
another version of my 16-servo controller for the D1 Mini compatible boards.&lt;/p&gt;
&lt;/section&gt;
</content>
    <link href="http://deshipu.art/projects/project-mite-servo/log-1/" rel="alternate"/>
    <summary>Published on 2025-07-15 in project-mite-servo.</summary>
    <published>2025-07-15T00:00:00+02:00</published>
  </entry>
  <entry>
    <id>http://deshipu.art/projects/project-mite-servo/</id>
    <title>Mite Servo</title>
    <updated>2025-07-15T00:00:00+02:00</updated>
    <content type="html">&lt;section class="tex2jax_ignore mathjax_ignore" id="mite-servo"&gt;

&lt;p&gt;A servo controller shield for the Mite/Xiao boards&lt;/p&gt;
&lt;div class="project-thumb"&gt;
&lt;a class="reference external image-reference" href="/_images/Screenshot_2025-04-04_20-21-14.png"&gt;&lt;img alt="../_images/thumb-Screenshot_2025-04-04_20-21-14.png" src="../_images/thumb-Screenshot_2025-04-04_20-21-14.png" /&gt;&lt;/a&gt;
&lt;/div&gt;
&lt;p&gt;I grew quite fond of the little 2g servos that I have used in
&lt;a class="reference internal" href="../projects/project-188909/#project-188909"&gt;&lt;span class="std std-ref"&gt;Wee Bug&lt;/span&gt;&lt;/a&gt; – they are strong and fast enough for making things
move, and their compact size and small size of the plug makes them very easy to
hide inside devices. However, that plug also creates problems, because it’s
difficult to use them without a dedicated PCB. I don’t want to have to make a
special PCB for every project, so I want a servo shield, with a whole bunch of
servo connectors, and a chip that will take care of generating the PWM signals.
And of course I want this shield to be small, the same form factor as the Xiao
or Mite boards. That makes it impossible to use the good old PCA9685 LED driver
chip, so let’s use a cheap CH32V003 chip with the right firmware.&lt;/p&gt;
&lt;section id="logs"&gt;
&lt;h2&gt;Logs&lt;/h2&gt;
&lt;ul class="postlist-style-none postlist simple"&gt;
&lt;li class="ablog-post"&gt;&lt;p class="ablog-post-title"&gt;2025-07-17 - &lt;a class="reference internal" href="../projects/project-mite-servo/log-2/"&gt;Hardware&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li class="ablog-post"&gt;&lt;p class="ablog-post-title"&gt;2025-07-15 - &lt;a class="reference internal" href="../projects/project-mite-servo/log-1/"&gt;CH32V003 as a servo controller&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/section&gt;
&lt;section id="links"&gt;
&lt;h2&gt;Links&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://github.com/deshipu/mite-servo"&gt;Project Repository&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/section&gt;
&lt;/section&gt;
</content>
    <link href="http://deshipu.art/projects/project-mite-servo/" rel="alternate"/>
    <summary>A servo controller shield for the Mite/Xiao boards</summary>
    <category term="hardware" label="hardware"/>
    <category term="ongoingproject" label="ongoing project"/>
    <published>2025-07-15T00:00:00+02:00</published>
  </entry>
  <entry>
    <id>http://deshipu.art/projects/project-mite-servo/log-2/</id>
    <title>Hardware</title>
    <updated>2025-07-17T00:00:00+02:00</updated>
    <content type="html">&lt;section class="tex2jax_ignore mathjax_ignore" id="hardware"&gt;

&lt;p&gt;Published on 2025-07-17 in &lt;a class="reference internal" href="../projects/project-mite-servo/#project-mite-servo"&gt;&lt;span class="std std-ref"&gt;Mite Servo&lt;/span&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;With a plan for the software in place, it’s time to design the hardware.  I can
comfortably fit eigth of the 1mm pitch servo sockets on a Xiao form factor
shield, with enough room for the smallest CH32V003 chip in the middle.&lt;/p&gt;
&lt;img alt="../_images/Screenshot_2025-04-04_20-21-14.png" src="../_images/Screenshot_2025-04-04_20-21-14.png" /&gt;
&lt;p&gt;There are also I2C pull-up resistors, and later I also added a big footprint
for a capacitor (not on the render), in case we need to filter the current
spikes a bit. It’s all rather simple in terms of connections.&lt;/p&gt;
&lt;img alt="../_images/Screenshot_2025-07-15_22-24-25.png" src="../_images/Screenshot_2025-07-15_22-24-25.png" /&gt;
&lt;p&gt;I had to rearrange the sockets physically a bit to simplify the routing, but
this is something we can fix in software later. There are also SWIO and NRST
pads broken out on the bottom of the board, for programming. And that’s it,
it should be all that is required.&lt;/p&gt;
&lt;/section&gt;
</content>
    <link href="http://deshipu.art/projects/project-mite-servo/log-2/" rel="alternate"/>
    <summary>Published on 2025-07-17 in project-mite-servo.</summary>
    <published>2025-07-17T00:00:00+02:00</published>
  </entry>
</feed>
