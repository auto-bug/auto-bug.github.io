<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
  <id>http://deshipu.art/</id>
  <title>deshipu.art</title>
  <updated>2025-01-15T11:18:07.503813+00:00</updated>
  <link href="http://deshipu.art/"/>
  <link href="http://deshipu.art/blog/atom.xml" rel="self"/>
  <generator uri="https://ablog.readthedocs.org/" version="0.10.33">ABlog</generator>
  <entry>
    <id>http://deshipu.art/projects/project-bluejoy/log-4/</id>
    <title>First Prototype Success</title>
    <updated>2024-10-15T00:00:00+02:00</updated>
    <content type="html">&lt;section class="tex2jax_ignore mathjax_ignore" id="first-prototype-success"&gt;

&lt;p&gt;Published on 2024-10-15 in &lt;a class="reference internal" href="../projects/project-bluejoy/#project-bluejoy"&gt;&lt;span class="std std-ref"&gt;BlueJoy&lt;/span&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Rushing the design is bad, but jumping to conclusions is also not great. Turns
out that the problem is not with the crystal at all. The module I’m using does
contain the 40MHz crystal that is necessary for the chip to work, and the
additional 32.7kHz crystal is entirely optional. My redesign was a complete
waste of time and money. Sadly, it can’t be cancelled anymore, but the boards
should work perfectly fine anyways.&lt;/p&gt;
&lt;p&gt;What changed? Well, I had a chat with UnexpectedMaker, who has immense experience with the ESP32 chips and modules, and he explained it to me. He also pointed me in the right direction to get my prototype working, and that was resoldering the module. I thought that I did a pretty good job soldering it, as it was all well aligned, and there were no visible problem. But when I desoldered it, this is what I saw:&lt;/p&gt;
&lt;img alt="Desoldered esp32 module with many pads not touched by solder." src="../_images/IMG_20241015_115422_HDR.jpg" /&gt;
&lt;p&gt;As you can see, many of the pads weren’t even as much as touched by solder. You can still see the golden ENIG finish on them. So I tinned both the PCB and the module pads, applied a generous amount of flux, and soldered the module on again, making sure I apply plenty of pressure all around it.&lt;/p&gt;
&lt;p&gt;And the effect was immediate. After some fumbling with connecting the USB to
UART adapter, I got the board programmed, and it works:&lt;/p&gt;
&lt;img alt="Working shield with a bluetooth gamepad connected to it." src="../_images/IMG_20241015_125228_HDR.jpg" /&gt;
&lt;p&gt;There is one more good thing that came out of that conversation. When I said
that I don’t really need all that flash and ram that this module has,
UnexpectedMaker pointed out that the ESP32-MINI-1 module has the same width,
only being a little bit longer, and is cheaper because it doesn’t have the
extra ram and only has a small flash chip. So I went ahead and redesigned the
PCB to use that module. I had to change the programming header to pads on the bottom of the module, and had to switch to smaller resistors and capacitors, but it fits, and the routing is less of a mess.&lt;/p&gt;
&lt;img alt="A rendering of a PCB with an esp32 module." src="../_images/Screenshot_2024-10-15_13-14-20.png" /&gt;
&lt;p&gt;It’s going on the same slow shipping as the boards with the crystal, so I will
get to them some time next month when they arrive. For now, I have the working
first prototype to use.&lt;/p&gt;
&lt;/section&gt;
</content>
    <link href="http://deshipu.art/projects/project-bluejoy/log-4/" rel="alternate"/>
    <summary>Published on 2024-10-15 in project-bluejoy.</summary>
    <published>2024-10-15T00:00:00+02:00</published>
  </entry>
  <entry>
    <id>http://deshipu.art/projects/project-188908/log-1/</id>
    <title>Designs Published</title>
    <updated>2024-10-21T00:00:00+02:00</updated>
    <content type="html">&lt;section class="tex2jax_ignore mathjax_ignore" id="designs-published"&gt;

&lt;p&gt;Published on 2024-10-21 in &lt;a class="reference internal" href="../projects/project-188908/#project-188908"&gt;&lt;span class="std std-ref"&gt;Moo Bug&lt;/span&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I just realized that for all this time I forgot to publish the designs files
for this robot, even though I even sold some kits of it to people at the
Hackaday Europe. I guess they were all too nice to ask me where they are.&lt;/p&gt;
&lt;p&gt;In any case, both the design files and the basic walking code are now available
in a &lt;a class="reference external" href="https://github.com/auto-bug/moobug"&gt;repository&lt;/a&gt; on Github. Write me an
e-mail or create an issue if you see anything missing or wrong. The JSON files
are EasyEDA (standard) exports.&lt;/p&gt;
&lt;p&gt;Enjoy!&lt;/p&gt;
&lt;/section&gt;
</content>
    <link href="http://deshipu.art/projects/project-188908/log-1/" rel="alternate"/>
    <summary>Published on 2024-10-21 in project-188908.</summary>
    <published>2024-10-21T00:00:00+02:00</published>
  </entry>
  <entry>
    <id>http://deshipu.art/projects/project-sharp-gadget/log-1/</id>
    <title>Off to a rough start</title>
    <updated>2025-01-15T00:00:00+01:00</updated>
    <content type="html">&lt;section class="tex2jax_ignore mathjax_ignore" id="off-to-a-rough-start"&gt;

&lt;p&gt;Published on 2025-01-15 in &lt;a class="reference internal" href="../projects/project-sharp-gadget/#project-sharp-gadget"&gt;&lt;span class="std std-ref"&gt;Sharp Gadget&lt;/span&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The first version of the PCB didn’t work, for the very simple reason that I
inverted the display connector. I did obsess about its orientation a bit,
changing it several times, and finally settled on the one that is wrong. Oh
well. I immediately fixed the design, and also added a power switch that cuts
off the battery connector, because it seems I’m more likely to use this with
a battery.&lt;/p&gt;
&lt;p&gt;I worked on other things while waiting for the new PCB, so it wasn’t really
much of a waste of time.&lt;/p&gt;
&lt;p&gt;With the connector in the right orientation, the display switched on with some
random pattern of pixels on it. And that’s when I had a second surprise: the
pixels are color. It was supposed to be a LS013B7DH03 display, but apparently I
got LS013B7DH06 instead! Well, I can live with that. They use the same
connector and the same protocol.&lt;/p&gt;
&lt;img alt="New version of the PCB with the display showing random pixels." src="../_images/IMG_20250113_132342_HDR.jpg" /&gt;
&lt;p&gt;I proceeded to try to use that display with CircuitPython. Earlier, I noticed that it already has a &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;sharpdisplay&lt;/span&gt;&lt;/code&gt; module, so I expected this to be just a
question of using it with the right options. It doesn’t seem to be the case.
There is precious little documentation, but it seems that it was written for some other sharp displays with a different protocol. Oh well, I will just have to write the driver myself.&lt;/p&gt;
&lt;/section&gt;
</content>
    <link href="http://deshipu.art/projects/project-sharp-gadget/log-1/" rel="alternate"/>
    <summary>Published on 2025-01-15 in project-sharp-gadget.</summary>
    <published>2025-01-15T00:00:00+01:00</published>
  </entry>
  <entry>
    <id>http://deshipu.art/projects/project-bluejoy/log-5/</id>
    <title>Second prototype</title>
    <updated>2025-01-15T00:00:00+01:00</updated>
    <content type="html">&lt;section class="tex2jax_ignore mathjax_ignore" id="second-prototype"&gt;

&lt;p&gt;Published on 2025-01-15 in &lt;a class="reference internal" href="../projects/project-bluejoy/#project-bluejoy"&gt;&lt;span class="std std-ref"&gt;BlueJoy&lt;/span&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I actually received the PCBs and assembled and tested the second prototype a while ago, but I never had the time to update the logs. So here it is.&lt;/p&gt;
&lt;img alt="The new bluejoy module next to a xiao board" src="../_images/IMG_20241030_163544_HDR.jpg" /&gt;
&lt;p&gt;This time it was pretty unexciting. It just works. As you can see on the photo,
it’s using the ESP32-MINI-1 module, that is a bit bigger, but also cheaper,
since it doesn’t have the extra memory that we don’t need. The programming pads
had to go on the bottom of the board, because this module is slightly longer,
but that’s not a big problem.&lt;/p&gt;
&lt;p&gt;I programmed it and it just works, so that’s it.&lt;/p&gt;
&lt;/section&gt;
</content>
    <link href="http://deshipu.art/projects/project-bluejoy/log-5/" rel="alternate"/>
    <summary>Published on 2025-01-15 in project-bluejoy.</summary>
    <published>2025-01-15T00:00:00+01:00</published>
  </entry>
  <entry>
    <id>http://deshipu.art/projects/project-sharp-gadget/</id>
    <title>Sharp Gadget</title>
    <updated>2025-01-15T00:00:00+01:00</updated>
    <content type="html">&lt;section class="tex2jax_ignore mathjax_ignore" id="sharp-gadget"&gt;

&lt;p&gt;Handheld device with a sharp display.&lt;/p&gt;
&lt;div class="project-thumb"&gt;
&lt;a class="reference external image-reference" href="/_images/IMG_20241231_194120_HDR.jpg"&gt;&lt;img alt="../_images/thumb-IMG_20241231_194120_HDR.jpg" src="../_images/thumb-IMG_20241231_194120_HDR.jpg" /&gt;&lt;/a&gt;
&lt;/div&gt;
&lt;p&gt;I got my hands on a bunch of those cool SHARP memory displays, and I decided to
make a simple device to test them. The device is pretty generic: it has the
display, of course, three buttons on the sides, some i2c connectors, footprint
for a xiao dev board, and a power switch and pads for connecting a lipo
battery.&lt;/p&gt;
&lt;p&gt;The goal here is to test the display, and maybe make something like a
tamagotchi with it.&lt;/p&gt;
&lt;section id="logs"&gt;
&lt;h2&gt;Logs&lt;/h2&gt;
&lt;ul class="postlist-style-none postlist simple"&gt;
&lt;li class="ablog-post"&gt;&lt;p class="ablog-post-title"&gt;2025-01-15 - &lt;a class="reference internal" href="../projects/project-sharp-gadget/log-1/"&gt;Off to a rough start&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/section&gt;
&lt;/section&gt;
</content>
    <link href="http://deshipu.art/projects/project-sharp-gadget/" rel="alternate"/>
    <summary>Handheld device with a sharp display.</summary>
    <category term="hardware" label="hardware"/>
    <category term="ongoingproject" label="ongoing project"/>
    <published>2025-01-15T00:00:00+01:00</published>
  </entry>
</feed>
