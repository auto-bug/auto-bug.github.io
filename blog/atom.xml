<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
  <id>http://deshipu.art/</id>
  <title>deshipu.art</title>
  <updated>2025-01-27T16:05:30.977588+00:00</updated>
  <link href="http://deshipu.art/"/>
  <link href="http://deshipu.art/blog/atom.xml" rel="self"/>
  <generator uri="https://ablog.readthedocs.org/" version="0.10.33">ABlog</generator>
  <entry>
    <id>http://deshipu.art/projects/project-178061/log-231500/</id>
    <title>3D-printed Buttons</title>
    <updated>2025-01-16T00:00:00+01:00</updated>
    <content type="html">&lt;section class="tex2jax_ignore mathjax_ignore" id="d-printed-buttons"&gt;

&lt;p&gt;Published on 2025-01-16 in &lt;a class="reference internal" href="../projects/project-178061/#project-178061"&gt;&lt;span class="std std-ref"&gt;µGame S3&lt;/span&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The d-pad and buttons for the case were a long-time problem for me. Laser-cutting them gives pretty nice effects, but there is no easy way of making them stay in place. I tried gluing them to the buttons, sticking the buttons into a hole in them, gluing additional parts to the bottom to hook against the case, and finally I settled on a sticky tape applied from the back. But it never was quite right.&lt;/p&gt;
&lt;p&gt;Recently, I finally tried 3D-printing them. It’s a problem for me, because I
don’t really have an easy access to a 3D-printer. I don’t own one, and the ones
in the hackerspaces and fablabs around are always either broken or there is a
long queue of people wanting to use them. But the PCB factories started to
offer also 3D printing services, so I decided to try one of those. An
additional advantage is that a small and precise part like those button caps is
best printed with resin, and that’s even harder to come by in local fablabs.&lt;/p&gt;
&lt;p&gt;So I started my trusty OpenSCAD, and quickly made a 3D model of the d-pad and buttons, and then exported it as an STL file. I went through several iterations, and after I added rounded edges with Minkowsky sum, I had to actually move to my work laptop to generate the STL, because it was running out of memory. Well, I only need to render it once, so that’s fine. In the end I came up with this:&lt;/p&gt;
&lt;img alt="A render of a d-pad and button caps." src="../_images/Screenshot_2025-01-16_22-12-44.png" /&gt;
&lt;p&gt;I tried several different resins, including transparent, but I think the best
result is with the cheap black resin that JLC offers.&lt;/p&gt;
&lt;img alt="Game console with the d-pad and button caps installed." src="../_images/IMG_20241215_105933_HDR.jpg" /&gt;
&lt;p&gt;I’m really happy with how this came out. The buttons have a slight texture to
them, and are pleasant to touch. They also sit in there very well, and after I
got the height of the insides right, they work very well mechanically. The
buttons under them are clicky, but with very low force, so the end result is
very pleasant.&lt;/p&gt;
&lt;p&gt;I also made an empty PCB with sole nice pattern and silkscreen to serve as the
back cover. It works well with the thin pouch LiPo batteries, and with the
large-headed machine screws.&lt;/p&gt;
&lt;img alt="Back cover for the battery." src="../_images/IMG_20241215_105941_HDR.jpg" /&gt;
&lt;/section&gt;
</content>
    <link href="http://deshipu.art/projects/project-178061/log-231500/" rel="alternate"/>
    <summary>Published on 2025-01-16 in project-178061.</summary>
    <published>2025-01-16T00:00:00+01:00</published>
  </entry>
  <entry>
    <id>http://deshipu.art/projects/project-192761/log-223770/</id>
    <title>Dupe SAO</title>
    <updated>2025-01-16T00:00:00+01:00</updated>
    <content type="html">&lt;section class="tex2jax_ignore mathjax_ignore" id="dupe-sao"&gt;

&lt;p&gt;Published on 2025-01-16 in &lt;a class="reference internal" href="../projects/project-192761/#project-192761"&gt;&lt;span class="std std-ref"&gt;Astro-chan Badge&lt;/span&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I have been recently experimenting with different round displays and with the
CH32V series of microcontrollers, and I decided to make another try at this
idea, this time as a badge add-on.&lt;/p&gt;
&lt;p&gt;I also decided to try and reproduce the look of duplicants from the game Oxygen
Not Included. The publisher of that game might not be happy with me about this,
but I don’t plan to sell or otherwise distribute this thing, so it should be
fine.&lt;/p&gt;
&lt;img alt="Duplicant SAO." src="../_images/IMG_20250113_114025_HDR.jpg" /&gt;
&lt;p&gt;It’s not just new display and new PCB, I’m also using a RISC-V based chip,
CH32V203 for the brains of this contraption. The original plan was to get the
USB MSC example working, and join it with a GIF decoding library, so that you
can just upload arbitrary GIF files to the device and have them play
automatically. It turns out that this particular chip doesn’t have enough RAM
to pull that off, so I’m just going to hard-code the graphics in the firmware,
but I still want to get that idea working in a different project with a
different chip.&lt;/p&gt;
&lt;p&gt;Right now the project is waiting for a CHLINK-E programmer to arrive, so that I
can flash the firmware on a new chip. I have tested it already on a development
board that has a USB bootloader, but of course bare chips don’t come with a
bootloader, so I will need that programmer.&lt;/p&gt;
&lt;/section&gt;
</content>
    <link href="http://deshipu.art/projects/project-192761/log-223770/" rel="alternate"/>
    <summary>Published on 2025-01-16 in project-192761.</summary>
    <published>2025-01-16T00:00:00+01:00</published>
  </entry>
  <entry>
    <id>http://deshipu.art/projects/project-mite-208/log-1/</id>
    <title>Blink</title>
    <updated>2025-01-27T00:00:00+01:00</updated>
    <content type="html">&lt;section class="tex2jax_ignore mathjax_ignore" id="blink"&gt;

&lt;p&gt;Published on 2025-01-27 in &lt;a class="reference internal" href="../projects/project-mite-208/#project-mite-208"&gt;&lt;span class="std std-ref"&gt;Mite 208&lt;/span&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I received the assembled boards from JLC and wanted to immediately test them,
so I modified the ch32v20x blink example from the ch32v003fun library, and
tried to program the board.&lt;/p&gt;
&lt;p&gt;Sadly, I got an error telling me that the programmer is not connected to an MCU.
I checked all the connections again, and checked the schematic, and found out
that I mis-labeled the programming pins — the SWD and SWC are swapped. After
changing the connections, it worked:&lt;/p&gt;
&lt;img alt="Blinking LED." src="../_images/IMG_20250127_153358_HDR.jpg" /&gt;
&lt;p&gt;I don’t have much time to play with this right now, but the possibilities are
in there. There is TinyUSB support for this board, and it has enough memory to
run LUA or CircuitPython — of course getting that to work would be a
considerable effort, but it should be possible.&lt;/p&gt;
&lt;/section&gt;
</content>
    <link href="http://deshipu.art/projects/project-mite-208/log-1/" rel="alternate"/>
    <summary>Published on 2025-01-27 in project-mite-208.</summary>
    <published>2025-01-27T00:00:00+01:00</published>
  </entry>
  <entry>
    <id>http://deshipu.art/projects/project-mite-208/</id>
    <title>Mite 208</title>
    <updated>2025-01-27T00:00:00+01:00</updated>
    <content type="html">&lt;section class="tex2jax_ignore mathjax_ignore" id="mite-208"&gt;

&lt;p&gt;Small development board with CH32V208.&lt;/p&gt;
&lt;div class="project-thumb"&gt;
&lt;a class="reference external image-reference" href="/_images/IMG_20250127_163658_HDR.jpg"&gt;&lt;img alt="../_images/thumb-IMG_20250127_163658_HDR.jpg" src="../_images/thumb-IMG_20250127_163658_HDR.jpg" /&gt;&lt;/a&gt;
&lt;/div&gt;
&lt;p&gt;I recently started to play with the CH32V family of microcontrollers, and
they are a lot of fun, but most ready development boards you can get are for
the cheaper models in the family, with very little RAM. This is fine for
blinking LEDs, but if you want to start playing with USB, filesystem, displays,
and graphic formats, you need something with a bit more oomph. Those models
have demo boards that try to fully show off the capabilities of those chips,
so they are huge, with multiple USB sockets, bluetooth antennas, and ethernet
sockets. I wanted one of the more powerful chips but on a small devboard.&lt;/p&gt;
&lt;img alt="../_images/IMG_20250127_163658_HDR.jpg" src="../_images/IMG_20250127_163658_HDR.jpg" /&gt;
&lt;p&gt;I quite like the Xiao and QtPy form factor, so I made a board that is
compatible with that. While the chip supports bluetooth and ethernet, those
pins are not broken out — I just want the 64kB of RAM in this case.&lt;/p&gt;
&lt;section id="logs"&gt;
&lt;h2&gt;Logs&lt;/h2&gt;
&lt;ul class="postlist-style-none postlist simple"&gt;
&lt;li class="ablog-post"&gt;&lt;p class="ablog-post-title"&gt;2025-01-27 - &lt;a class="reference internal" href="../projects/project-mite-208/log-1/"&gt;Blink&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/section&gt;
&lt;/section&gt;
</content>
    <link href="http://deshipu.art/projects/project-mite-208/" rel="alternate"/>
    <summary>Small development board with CH32V208.</summary>
    <category term="hardware" label="hardware"/>
    <category term="ongoingproject" label="ongoing project"/>
    <published>2025-01-27T00:00:00+01:00</published>
  </entry>
  <entry>
    <id>http://deshipu.art/projects/project-192761/log-223771/</id>
    <title>Programming CH32V203</title>
    <updated>2025-01-27T00:00:00+01:00</updated>
    <content type="html">&lt;section class="tex2jax_ignore mathjax_ignore" id="programming-ch32v203"&gt;

&lt;p&gt;Published on 2025-01-27 in &lt;a class="reference internal" href="../projects/project-192761/#project-192761"&gt;&lt;span class="std std-ref"&gt;Astro-chan Badge&lt;/span&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I finally got a working chlink programmer, so I was able to continue with this
project. Since I already had an LCD display demo working on a development
board, I was expecting it will just be a question of changing the pin numbers
and peripherals. Two days of debugging later, and I still didn’t get the board
to even run a simple blink example. It’s all working perfectly fine on a
development board with a crystal, but not on my board or the crystal-less LANA
TNY development board that I also used for testing. Even though I explicitly
enabled the internal HCI clock as the clock source.&lt;/p&gt;
&lt;p&gt;I never really figured out what was wrong. I just went back to the example
program for LANA TNY, and re-created the LCD example based on that code. And
that worked for some reason. I suspect it’s a question of an old version of the
vendor libraries.&lt;/p&gt;
&lt;img alt="Duplicant SAO." src="../_images/IMG_20250125_203924_HDR.jpg" /&gt;
&lt;p&gt;In any case, I had the code that displays an image on the display, but I wanted
that image to be animated. So I added another one, and some delays between
displaying them in a loop. Sadly, as soon as I tried to add a third image, I
ran out of flash space. It’s really no wonder, as 16 bits per pixel, that data takes up a lot of space.&lt;/p&gt;
&lt;p&gt;But the images I’m displaying are really simple, cartoon-like. I don’t really
need 16-bit color for them. In fact, 16 colors (4-bit) would be more than
enough. So with a bit of change in how the data is generated, I added a palette
and used indexed colors. There is no visible difference in quality, but now I can fit as many as 8 or 9 frames of animation. I could make that even better if I limit the images only to areas that change (like the eyes), but that would require a little better preparation of the images.&lt;/p&gt;
&lt;p&gt;In any case, I think the whole thing is in a workable state now, so I put everything in a &lt;a class="reference external" href="https://github.com/deshipu/dupe-sao"&gt;github repository&lt;/a&gt;. I want to improve this further, but we will see how that goes.&lt;/p&gt;
&lt;/section&gt;
</content>
    <link href="http://deshipu.art/projects/project-192761/log-223771/" rel="alternate"/>
    <summary>Published on 2025-01-27 in project-192761.</summary>
    <published>2025-01-27T00:00:00+01:00</published>
  </entry>
</feed>
