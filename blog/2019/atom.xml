<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
  <id>http://deshipu.art/</id>
  <title>deshipu.art - Posted in 2019</title>
  <updated>2024-08-07T20:33:03.341683+00:00</updated>
  <link href="http://deshipu.art/"/>
  <link href="http://deshipu.art/blog/2019/atom.xml" rel="self"/>
  <generator uri="https://ablog.readthedocs.org/" version="0.10.33">ABlog</generator>
  <entry>
    <id>http://deshipu.art/projects/project-165032/log-172290/</id>
    <title>Menu Program</title>
    <updated>2019-12-26T00:00:00+01:00</updated>
    <content type="html">&lt;section id="menu-program"&gt;

&lt;p&gt;Published on 2019-12-26 in &lt;a class="reference internal" href="../../projects/project-165032/#project-165032"&gt;&lt;span class="std std-ref"&gt;PewPew M4&lt;/span&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The holidays came, so I finally have some time to work on the software
for this device. For now I only did some simple housekeeping: included
the pew library in the default firmware, together with the graphics
for the PewPew emulation and for the menu. I also wrote a very simple
program selection menu — for now without pagination:&lt;/p&gt;
&lt;img alt="projects/project-165032/images/7727171577315633432.jpg" src="projects/project-165032/images/7727171577315633432.jpg" /&gt;
&lt;p&gt;Including all that in the firmware required some changes in the board
definition. The pull request for that will probably get merged after
the holidays, but it should be included in CircuitPython 5.0.0.&lt;/p&gt;
&lt;/section&gt;
</content>
    <link href="http://deshipu.art/projects/project-165032/log-172290/" rel="alternate"/>
    <summary>Published on 2019-12-26 in project-165032.</summary>
    <published>2019-12-26T00:00:00+01:00</published>
  </entry>
  <entry>
    <id>http://deshipu.art/projects/project-165032/log-172326/</id>
    <title>Microsoft MakeCode Arcade</title>
    <updated>2019-12-26T00:00:00+01:00</updated>
    <content type="html">&lt;section id="microsoft-makecode-arcade"&gt;

&lt;p&gt;Published on 2019-12-26 in &lt;a class="reference internal" href="../../projects/project-165032/#project-165032"&gt;&lt;span class="std std-ref"&gt;PewPew M4&lt;/span&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;While designing this, I kept my eye on the &lt;a class="reference external" href="https://arcade.makecode.com/hardware/adding"&gt;MakeCode Arcade specifications&lt;/a&gt;  to make sure the device could also be used with that platform. But I
never really took the time to test it. Today I finally decided to see
if it will work.&lt;/p&gt;
&lt;p&gt;I updated the bootloader configuration to include information about
all the buttons on the device, and I picked one of the examples to
run. And lo and behold, it works:&lt;/p&gt;
&lt;img alt="projects/project-165032/images/6810381577391459747.jpg" src="projects/project-165032/images/6810381577391459747.jpg" /&gt;
&lt;p&gt;After such a meticulous and throughout test, I decided it’s time to
add it officially, so I made a pull request to the uf2-samdx1
repository to add the bootloader configuration there (and had to sign
a CLA, thank you Microsoft), and also I dropped the Arcade staff an
e-mail asking for adding it to the website. We will see what they
think about it.&lt;/p&gt;
&lt;/section&gt;
</content>
    <link href="http://deshipu.art/projects/project-165032/log-172326/" rel="alternate"/>
    <summary>Published on 2019-12-26 in project-165032.</summary>
    <published>2019-12-26T00:00:00+01:00</published>
  </entry>
  <entry>
    <id>http://deshipu.art/projects/project-165032/log-172533/</id>
    <title>Bootloader, OSHWA and Production</title>
    <updated>2019-12-31T00:00:00+01:00</updated>
    <content type="html">&lt;section id="bootloader-oshwa-and-production"&gt;

&lt;p&gt;Published on 2019-12-31 in &lt;a class="reference internal" href="../../projects/project-165032/#project-165032"&gt;&lt;span class="std std-ref"&gt;PewPew M4&lt;/span&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I decided to do a bit of paperwork around this project.&lt;/p&gt;
&lt;p&gt;The pull request adding the bootloader configuration to the uf2-samdx1
repository has just been merged: &lt;a class="reference external" href="https://github.com/microsoft/uf2-samdx1/pull/84"&gt;https://github.com/microsoft/uf2-samdx1/pull/84&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The request for OSHWA certification is being reviewed, I expect they
have holidays and will come back to me next year.&lt;/p&gt;
&lt;p&gt;Similarily, the request to Microsoft to add this board to MakeCode
Arcade website is pending.&lt;/p&gt;
&lt;p&gt;Finally, the fabrication of the first 20 units has been successful,
and I received a photo of one of the boards:&lt;/p&gt;
&lt;img alt="projects/project-165032/images/9427711577830788757.jpg" src="projects/project-165032/images/9427711577830788757.jpg" /&gt;
&lt;p&gt;I expect they will arrive in the first half of January, just before
the Spring Festival.&lt;/p&gt;
&lt;/section&gt;
</content>
    <link href="http://deshipu.art/projects/project-165032/log-172533/" rel="alternate"/>
    <summary>Published on 2019-12-31 in project-165032.</summary>
    <published>2019-12-31T00:00:00+01:00</published>
  </entry>
  <entry>
    <id>http://deshipu.art/projects/project-19921/log-172522/</id>
    <title>It’s Alive (Again)</title>
    <updated>2019-12-31T00:00:00+01:00</updated>
    <content type="html">&lt;section id="it-s-alive-again"&gt;

&lt;p&gt;Published on 2019-12-31 in &lt;a class="reference internal" href="../../projects/project-19921/#project-19921"&gt;&lt;span class="std std-ref"&gt;SpiderWing&lt;/span&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;It took me a while to re-assemble, re-connect and re-calibrate all the
legs with the new PCB, but today the robot is again standing on its
own. I was a bit worried that the battery protection circuit would
interfere with the servos drawing their share of the current, but it
seems to be perfectly fine. I was putting off connecting the servos
for a bit, because I didn’t have the male pin headers soldered, and I
was thinking that perhaps I should cut the servo wires and solder them
directly to the underside of the PCB. But then I decided to leave them
long for now, for easier hacking. I can always make a “tidy” version
of this robot later.&lt;/p&gt;
&lt;img alt="projects/project-19921/images/8232111577816509284.JPG" src="projects/project-19921/images/8232111577816509284.JPG" /&gt;
&lt;p&gt;I have replaced the old HUZZAH feather with the new NRF52840 feather,
because the CircuitPython is no longer supported on the ESP8266, and
there is some very exciting progresss on bluetooth support on the NRF,
and that would be perfect for controlling this robot. For now I just
use the REPL over the USB cable, though, still using the old gait code
— that’s one of the parts that still needs work.&lt;/p&gt;
&lt;p&gt;There are also still no switches at the ends of the legs — they are
ordered, but Christmas is not the time of fast packages. At the very
least they should let the robot avoid falling off the table.&lt;/p&gt;
&lt;p&gt;As you can see, since I’m using stacking headers with all my feathers,
there is room for adding modules on top of the robot. It could be a
prototyping board with some sensors, or one of the other featherwings
with displays, LEDs, speakers, etc. — it would even work very well
with the &lt;a class="reference internal" href="../../projects/project-165011/#project-165011"&gt;&lt;span class="std std-ref"&gt;Gesture FeatherWing&lt;/span&gt;&lt;/a&gt; , controlled by gestures — if I ever get that to work.&lt;/p&gt;
&lt;/section&gt;
</content>
    <link href="http://deshipu.art/projects/project-19921/log-172522/" rel="alternate"/>
    <summary>Published on 2019-12-31 in project-19921.</summary>
    <published>2019-12-31T00:00:00+01:00</published>
  </entry>
  <entry>
    <id>http://deshipu.art/projects/project-165011/log-172503/</id>
    <title>Library</title>
    <updated>2019-12-31T00:00:00+01:00</updated>
    <content type="html">&lt;section id="library"&gt;

&lt;p&gt;Published on 2019-12-31 in &lt;a class="reference internal" href="../../projects/project-165011/#project-165011"&gt;&lt;span class="std std-ref"&gt;Gesture FeatherWing&lt;/span&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Today I decided to try and write a CircuitPython library for this
sensor. So with a datasheet in hand I started with this simple code
that is supposed to give me the raw data frames:&lt;/p&gt;
&lt;div class="highlight-python notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;board&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;digitalio&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;time&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;MGC3030&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;i2c&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;addr&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mh"&gt;0x43&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ts_pin&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;i2c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;i2c&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;addr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;addr&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ts_pin&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ts_pin&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;buffer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;bytearray&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;26&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;read&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;i2c&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;try_lock&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;i2c&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;readfrom_into&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;addr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;buffer&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;finally&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;i2c&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;unlock&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;buffer&lt;/span&gt;


&lt;span class="n"&gt;i2c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;board&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;I2C&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;ts_pin&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;digitalio&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DigitalInOut&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;board&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;D5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;irq1_pin&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;digitalio&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DigitalInOut&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;board&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;D6&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;irq0_pin&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;digitalio&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DigitalInOut&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;board&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;A3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;sensor&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;MGC3030&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i2c&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;repr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sensor&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="p"&gt;()))&lt;/span&gt;
    &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;0.5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;The code works, except it shows me all 0s. What’s wrong?&lt;/p&gt;
&lt;p&gt;Some more careful reading of the datasheet reveals that the chip is
sold without firmware on it. You have to program it yourself, using
attached software. The software is of course WIndows-only, so no way I
can use it.&lt;/p&gt;
&lt;p&gt;Way to go Microchip! \&lt;/p&gt;
&lt;/section&gt;
</content>
    <link href="http://deshipu.art/projects/project-165011/log-172503/" rel="alternate"/>
    <summary>Published on 2019-12-31 in project-165011.</summary>
    <published>2019-12-31T00:00:00+01:00</published>
  </entry>
</feed>
