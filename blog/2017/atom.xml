<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
  <id>http://deshipu.art/</id>
  <title>deshipu.art - Posted in 2017</title>
  <updated>2024-08-07T19:22:48.756515+00:00</updated>
  <link href="http://deshipu.art/"/>
  <link href="http://deshipu.art/blog/2017/atom.xml" rel="self"/>
  <generator uri="https://ablog.readthedocs.org/" version="0.10.33">ABlog</generator>
  <entry>
    <id>http://deshipu.art/projects/log-6050-51738/</id>
    <title>Choosing the Brains</title>
    <updated>2017-01-11T00:00:00+01:00</updated>
    <content type="html">&lt;section id="choosing-the-brains"&gt;

&lt;p&gt;Published on 2017-01-11 in &lt;a class="reference internal" href="../../projects/project-6050/#project-6050"&gt;&lt;span class="std std-ref"&gt;Tote&lt;/span&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;In the previous post I shared some of my thoughts about this project,
and decided to pick a different development board than the Pro Mini
that I have been using so far. Don’t get me wrong, Pro Mini is great
for all kinds of small and cheap projects, it’s just that I want to
make programming this robot as simple as possible. That, among other
things, means using a platform that has a lot of computing power, not
just enough, preferably one that has so much of it, that it can be
used with a high-level language like Python. That also means something
that has a USB socket.&lt;/p&gt;
&lt;hr class="docutils" /&gt;
&lt;p&gt;The plan is to keep the Tote base PCB for its body, and keep the
ATmega microcontroller on it, but make it only serve as a servo
controller. Then, on top of it, have headers for plugging in the
actual brains, and possibly for stacking additional shields with
sensors and other peripherals. The board would only need connections
for the power and the I2C pins, but since there is no standard for the
pin layout (or, rather, there are lots of standards), I need to choose
one – history shows that trying to make it flexible and compatible
with many different boards only leads to pain and suffering.&lt;/p&gt;
&lt;p&gt;However, I still want this to be relatively cheap. It would be bad if
the brain was more expensive than the ~$20 the legs cost. I first
tried with the D1 Mini board, because it’s my favorite ESP8266 board,
it’s small and compact, and it has a number of shields for it
available. It’s also easy to make new shields for it, and they can be
very small, which makes them cheap on OSHPark. The board can run
MicroPython and has WiFi build in, which makes it easy to use a remote
console to program and debug it very conveniently. There is also a
LiPo shield, which makes it possible to recharge the battery from the
USB. So I spent some hours making this:&lt;/p&gt;
&lt;img alt="https://cdn.hackaday.io/images/5545441484170063244.png" src="https://cdn.hackaday.io/images/5545441484170063244.png" /&gt;
&lt;p&gt;The base is just the &lt;span class="xref std std-ref"&gt;project-13278&lt;/span&gt;&lt;/p&gt;
&lt;img alt="https://cdn.hackaday.io/images/7757741484170897474.png" src="https://cdn.hackaday.io/images/7757741484170897474.png" /&gt;
&lt;img alt="https://cdn.hackaday.io/images/8821021484171642513.png" src="https://cdn.hackaday.io/images/8821021484171642513.png" /&gt;
&lt;img alt="https://cdn.hackaday.io/images/4663631484172769261.png" src="https://cdn.hackaday.io/images/4663631484172769261.png" /&gt;
&lt;p&gt;\&lt;/p&gt;
&lt;/section&gt;
</content>
    <link href="http://deshipu.art/projects/log-6050-51738/" rel="alternate"/>
    <summary>Published on 2017-01-11 in project-6050.</summary>
    <published>2017-01-11T00:00:00+01:00</published>
  </entry>
  <entry>
    <id>http://deshipu.art/projects/log-6050-51725/</id>
    <title>New Year Reflections</title>
    <updated>2017-01-11T00:00:00+01:00</updated>
    <content type="html">&lt;section id="new-year-reflections"&gt;

&lt;p&gt;Published on 2017-01-11 in &lt;a class="reference internal" href="../../projects/project-6050/#project-6050"&gt;&lt;span class="std std-ref"&gt;Tote&lt;/span&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;section id="year-s-summary"&gt;
&lt;h2&gt;Year’s Summary&lt;/h2&gt;
&lt;p&gt;This is one of my oldest projects, and definitely one that I have put
the most total work into so far. With the year’s end, I decided to
reflect a bit about the progress made so far and the way forward.\&lt;/p&gt;
&lt;p&gt;There wasn’t a lot of activity, but some interesting things did happen
last year.&lt;/p&gt;
&lt;p&gt;We had a workshop in Belgrade, where we built 20 &lt;span class="xref std std-ref"&gt;project-9927&lt;/span&gt; \&lt;/p&gt;
&lt;p&gt;&lt;span class="xref std std-ref"&gt;project-9065&lt;/span&gt;&lt;/p&gt;
&lt;/section&gt;
&lt;section id="id1"&gt;
&lt;h2&gt;&lt;/h2&gt;
&lt;p&gt;&lt;span class="xref std std-ref"&gt;project-3736&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://hackaday.io/project/6050/log/30979-the-way-forward"&gt;&lt;/a&gt;  &lt;a class="reference external" href="https://hackaday.io/project/9065-tote-zero/log/31747-everything-in-one"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/section&gt;
&lt;section id="id2"&gt;
&lt;h2&gt;&lt;/h2&gt;
&lt;aside class="system-message"&gt;
&lt;p class="system-message-title"&gt;System Message: INFO/1 (&lt;span class="docutils literal"&gt;/home/sheep/dev/ablog/deshipu.art/projects/log-6050-51725.md&lt;/span&gt;, line 46); &lt;em&gt;&lt;a href="#id2"&gt;backlink&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Duplicate implicit target name: “”.&lt;/p&gt;
&lt;/aside&gt;
&lt;/section&gt;
&lt;/section&gt;
</content>
    <link href="http://deshipu.art/projects/log-6050-51725/" rel="alternate"/>
    <summary>Published on 2017-01-11 in project-6050.</summary>
    <published>2017-01-11T00:00:00+01:00</published>
  </entry>
  <entry>
    <id>http://deshipu.art/projects/log-6050-51852/</id>
    <title>Programming the Spinal Cord</title>
    <updated>2017-01-14T00:00:00+01:00</updated>
    <content type="html">&lt;section id="programming-the-spinal-cord"&gt;

&lt;p&gt;Published on 2017-01-14 in &lt;a class="reference internal" href="../../projects/project-6050/#project-6050"&gt;&lt;span class="std std-ref"&gt;Tote&lt;/span&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;n the previous log I made a decision to use an Adafruit Feather board
for the robot’s brains, and a bare ATmega chip in a DIP package for
its spinal cord – that is, the servo controller. That’s supposed to
make the board much easier to solder even by inexperienced builders.
But wait a minute! How are they going to get the servo controller
program onto those chips? Will that not require some extra hardware?
Sadly, yes.&lt;/p&gt;
&lt;p&gt;It will require six extra wires.&lt;/p&gt;
&lt;p&gt;The trick is to use the Feather board as an ISP programmer, using the
“Arduino as ISP” example sketch from the Arduino IDE. You will need to
make the following connections:&lt;/p&gt;
&lt;img alt="https://cdn.hackaday.io/images/967991484403277085.png" src="https://cdn.hackaday.io/images/967991484403277085.png" /&gt;
&lt;p&gt;Now, in your Arduino IDE go to Files→Examples→11.ArduinoISP and select
that example. Then scroll to around line 68 and change this:&lt;/p&gt;
&lt;div class="highlight-cpp notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;// Configure which pins to use:&lt;/span&gt;

&lt;span class="c1"&gt;// The standard pin configuration.&lt;/span&gt;
&lt;span class="cp"&gt;#ifndef ARDUINO_HOODLOADER2 &lt;/span&gt;

&lt;span class="cp"&gt;#define RESET     10 &lt;/span&gt;&lt;span class="c1"&gt;// Use pin 10 to reset the target rather than SS&lt;/span&gt;
&lt;span class="cp"&gt;#define LED_HB    9&lt;/span&gt;
&lt;span class="cp"&gt;#define LED_ERR   8&lt;/span&gt;
&lt;span class="cp"&gt;#define LED_PMODE 7&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Into this:&lt;/p&gt;
&lt;div class="highlight-vbscript notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;// Configure which pins to use:

// The standard pin configuration.
#ifndef ARDUINO_HOODLOADER2 

#define RESET     0
#define LED_HB    2
#define LED_ERR   4
#define LED_PMODE 5
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Then go to Tools→Board and select the Adafruit HUZZAH board, then do
Sketch→Upload. You have your programmer ready.Then to program the chip, load the sketch with the servo controller,
change the board to Arduino Uno, select Tools→Programmer→Arduino as
ISP, and do Sketch→Upload Using Programmer. You should see some
blinking lights on your Feather, and then your chip is programmed.&lt;/p&gt;
&lt;p&gt;In the end, I will probably make a Makefile that does the equivalent
of the above procedure automatically, to streamline the experience a
bit.&lt;/p&gt;
&lt;/section&gt;
</content>
    <link href="http://deshipu.art/projects/log-6050-51852/" rel="alternate"/>
    <summary>Published on 2017-01-14 in project-6050.</summary>
    <published>2017-01-14T00:00:00+01:00</published>
  </entry>
  <entry>
    <id>http://deshipu.art/projects/log-6050-51940/</id>
    <title>Gangsta</title>
    <updated>2017-01-15T00:00:00+01:00</updated>
    <content type="html">&lt;section id="gangsta"&gt;

&lt;p&gt;Published on 2017-01-15 in &lt;a class="reference internal" href="../../projects/project-6050/#project-6050"&gt;&lt;span class="std std-ref"&gt;Tote&lt;/span&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;As I wrote in the previous logs, I’m going to be upgrading Tote to use
some more expensive, but more powerful and easier to use components.
But what about the poor students? If you are really concerned about
the budget, the original Tote is almost what you need. Almost, because
you would still need to order the PCB for it. Or would you?&lt;/p&gt;
&lt;p&gt;Of course not! The PCB doesn’t have anything you can’t easily
reproduce on a vero/strip/perma board! Here’s one example of a Tote on
a strip board:&lt;/p&gt;
&lt;img alt="https://cdn.hackaday.io/images/5143501484479792847.png" src="https://cdn.hackaday.io/images/5143501484479792847.png" /&gt;
&lt;p&gt;Sure, you will need to remap the pins in the code, but that should be
quite easy. Yes, I went wild in Fritzing, and it’s barely readable.
Here’s a clearer picture of the strip board you will need to make:&lt;/p&gt;
&lt;img alt="https://cdn.hackaday.io/images/6940371484479875736.png" src="https://cdn.hackaday.io/images/6940371484479875736.png" /&gt;
&lt;p&gt;It even has the voltage divider for monitoring the battery. Oh, right,
and don’t use alkaline batteries like on the picture. Use a LiPo from
a quadcopter or from an old cellphone.&lt;/p&gt;
&lt;p&gt;I have to admit that one thing they say about Fritzing is true: it
sucks for making schematics:&lt;/p&gt;
&lt;img alt="https://cdn.hackaday.io/images/3958631484480008034.png" src="https://cdn.hackaday.io/images/3958631484480008034.png" /&gt;
&lt;p&gt;I wonder if I should fork this version off the main Tote, and keep a
repository with the Arduino code for it, with remapped pins and so
on…&lt;/p&gt;
&lt;/section&gt;
</content>
    <link href="http://deshipu.art/projects/log-6050-51940/" rel="alternate"/>
    <summary>Published on 2017-01-15 in project-6050.</summary>
    <published>2017-01-15T00:00:00+01:00</published>
  </entry>
</feed>
