<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
  <id>http://deshipu.art/</id>
  <title>deshipu.art - Posts tagged robots</title>
  <updated>2024-08-07T15:12:40.785146+00:00</updated>
  <link href="http://deshipu.art/"/>
  <link href="http://deshipu.art/blog/tag/robots/atom.xml" rel="self"/>
  <generator uri="https://ablog.readthedocs.org/" version="0.10.33">ABlog</generator>
  <entry>
    <id>http://deshipu.art/projects/project-6050/</id>
    <title>Tote</title>
    <updated>2015-05-31T00:00:00+02:00</updated>
    <content type="html">&lt;section id="tote"&gt;

&lt;p&gt;Affordable spider robot&lt;/p&gt;
&lt;a class="reference external image-reference" href="https://cdn.hackaday.io/images/8993911478722904690.jpg"&gt;&lt;img alt="https://cdn.hackaday.io/images/8993911478722904690.jpg" class="project-thumb" src="https://cdn.hackaday.io/images/8993911478722904690.jpg" /&gt;&lt;/a&gt;
&lt;a class="reference external image-reference" href="https://cdn.hackaday.io/images/7315931433077594582.jpg"&gt;&lt;img alt="https://cdn.hackaday.io/images/7315931433077594582.jpg" class="project-thumb" src="https://cdn.hackaday.io/images/7315931433077594582.jpg" /&gt;&lt;/a&gt;
&lt;a class="reference external image-reference" href="https://cdn.hackaday.io/images/456541448136439556.jpg"&gt;&lt;img alt="https://cdn.hackaday.io/images/456541448136439556.jpg" class="project-thumb" src="https://cdn.hackaday.io/images/456541448136439556.jpg" /&gt;&lt;/a&gt;
&lt;a class="reference external image-reference" href="https://cdn.hackaday.io/images/6897111441364634311.jpg"&gt;&lt;img alt="https://cdn.hackaday.io/images/6897111441364634311.jpg" class="project-thumb" src="https://cdn.hackaday.io/images/6897111441364634311.jpg" /&gt;&lt;/a&gt;
&lt;a class="reference external image-reference" href="https://cdn.hackaday.io/images/3394331478778433037.jpg"&gt;&lt;img alt="https://cdn.hackaday.io/images/3394331478778433037.jpg" class="project-thumb" src="https://cdn.hackaday.io/images/3394331478778433037.jpg" /&gt;&lt;/a&gt;
&lt;a class="reference external image-reference" href="https://cdn.hackaday.io/images/1163581449089331686.jpg"&gt;&lt;img alt="https://cdn.hackaday.io/images/1163581449089331686.jpg" class="project-thumb" src="https://cdn.hackaday.io/images/1163581449089331686.jpg" /&gt;&lt;/a&gt;
&lt;div class="highlight-none notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;lt;iframe style=&amp;quot;width: 500px; height: 281px;&amp;quot; width=&amp;quot;500&amp;quot; height=&amp;quot;281&amp;quot; src=&amp;quot;//www.youtube.com/embed/XXotn-8DPQo&amp;quot; frameborder=&amp;quot;0&amp;quot; allowfullscreen=&amp;quot;&amp;quot;&amp;gt;&amp;lt;/iframe&amp;gt;Where are my robots? It&amp;#39;s already 15 years into the twenty-first
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;century, and we still don’t have robots everywhere. Sure, there are
some simple vacuum cleaners and some robo-pets for the ultimate geeks,
but that is not enough! Especially since the vacuum cleaners don’t
even walk. We need more walking robots everywhere!&lt;/p&gt;
&lt;p&gt;I think that one of the reasons why we don’t have robots creeping and
crawling all around us is that researching walking robots is a time-
consuming, hard, and very expensive activity, traditionally confined
to the secret military laboratories. You need a big room with a crane
to hang your robot on, in case it falls, you need lots of hydraulic
actuators and a pump to power them, you need sophisticated sensors and
complex algorithms crunched on powerful computers, etc. At least
that’s how it has been so far. Even building a simple hexapod from a
kit, which, is not much more than a simple toy, can set you back
hundreds of dollars. No wonder we make no progress.&lt;/p&gt;
&lt;p&gt;That has to change. If we put a walking robot on the desk of every
high school student out there, and let them try hack on them and try
the craziest ideas, sooner or later someone will come up with a bunch
of cool tricks that let you solve that leg trajectory optimization
problem on an Arduino at 50Hz a second, instead of a supercomputer
crunching on a single frame whole day. We have a lot of corners we can
cut there. Plus, those same high school students are likely going to
continue their experiments and research and graduate in robotics and
build us that robot butler that we always wanted. Or something.&lt;/p&gt;
&lt;p&gt;So that’s my plan with Tote. To solve the humanity’s burning problem
of glaring lack of robots, I’m working on a robot that is suitable as
a base for experimenting with robot gaits and related problems.&lt;/p&gt;
&lt;section id="logs"&gt;
&lt;h2&gt;Logs&lt;/h2&gt;
&lt;section id="reviving-the-skull-tote"&gt;
&lt;h3&gt;Reviving the Skull Tote&lt;/h3&gt;
&lt;p&gt;Created 2018-06-07.&lt;/p&gt;
&lt;p&gt;I have a number of prototypes of Tote that I have built over the
years, but the most presentable one is the one I pimped up in &lt;a class="reference external" href="https://hackaday.io/project/6050-tote/log/48853-pimp-your-bot"&gt;https://hackaday.io/project/6050-tote/log/48853-pimp-your-bot&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Unfortunately, that robot had a number of problems. Unlike all other
Totes, it was powered with a 2S lipo battery, with a buck converter
bringing to voltage down to 5V. That tiny buck converter would only
work for a few minutes, and then starting to shut down when the
current drawn by the servos made it too hot. Which would result in the
robot having a seizure. I also discovered that the motor in one of the
servos got stuck — rather common with the cheap SG90 servos — and
would need to be replaced.&lt;/p&gt;
&lt;p&gt;So I decided to open up this robot, replace the power with a more
standard setup (a 1S lipo connected directly without any voltage
stabilization), add a battery charging circuit, and replace the servo.&lt;/p&gt;
&lt;p&gt;Here’s the USB port for the battery charging circuit:&lt;/p&gt;
&lt;img alt="https://cdn.hackaday.io/images/9036641528398127759.jpg" src="https://cdn.hackaday.io/images/9036641528398127759.jpg" /&gt;
&lt;p&gt;And the replaced servo, primed with black paint, waiting to dry for a
dry-brushing:&lt;/p&gt;
&lt;img alt="https://cdn.hackaday.io/images/2825991528398180978.jpg" src="https://cdn.hackaday.io/images/2825991528398180978.jpg" /&gt;
&lt;p&gt;And finally the whole robot, it all its robot glory:&lt;/p&gt;
&lt;img alt="https://cdn.hackaday.io/images/7540951528398222731.jpg" src="https://cdn.hackaday.io/images/7540951528398222731.jpg" /&gt;
&lt;/section&gt;
&lt;section id="gangsta"&gt;
&lt;h3&gt;Gangsta&lt;/h3&gt;
&lt;p&gt;Created 2017-01-15.&lt;/p&gt;
&lt;p&gt;As I wrote in the previous logs, I’m going to be upgrading Tote to use
some more expensive, but more powerful and easier to use components.
But what about the poor students? If you are really concerned about
the budget, the original Tote is almost what you need. Almost, because
you would still need to order the PCB for it. Or would you?&lt;/p&gt;
&lt;p&gt;Of course not! The PCB doesn’t have anything you can’t easily
reproduce on a vero/strip/perma board! Here’s one example of a Tote on
a strip board:&lt;/p&gt;
&lt;img alt="https://cdn.hackaday.io/images/5143501484479792847.png" src="https://cdn.hackaday.io/images/5143501484479792847.png" /&gt;
&lt;p&gt;Sure, you will need to remap the pins in the code, but that should be
quite easy. Yes, I went wild in Fritzing, and it’s barely readable.
Here’s a clearer picture of the strip board you will need to make:&lt;/p&gt;
&lt;img alt="https://cdn.hackaday.io/images/6940371484479875736.png" src="https://cdn.hackaday.io/images/6940371484479875736.png" /&gt;
&lt;p&gt;It even has the voltage divider for monitoring the battery. Oh, right,
and don’t use alkaline batteries like on the picture. Use a LiPo from
a quadcopter or from an old cellphone.&lt;/p&gt;
&lt;p&gt;I have to admit that one thing they say about Fritzing is true: it
sucks for making schematics:&lt;/p&gt;
&lt;img alt="https://cdn.hackaday.io/images/3958631484480008034.png" src="https://cdn.hackaday.io/images/3958631484480008034.png" /&gt;
&lt;p&gt;I wonder if I should fork this version off the main Tote, and keep a
repository with the Arduino code for it, with remapped pins and so
on…&lt;/p&gt;
&lt;/section&gt;
&lt;section id="programming-the-spinal-cord"&gt;
&lt;h3&gt;Programming the Spinal Cord&lt;/h3&gt;
&lt;p&gt;Created 2017-01-14.&lt;/p&gt;
&lt;p&gt;n the previous log I made a decision to use an Adafruit Feather board
for the robot’s brains, and a bare ATmega chip in a DIP package for
its spinal cord – that is, the servo controller. That’s supposed to
make the board much easier to solder even by inexperienced builders.
But wait a minute! How are they going to get the servo controller
program onto those chips? Will that not require some extra hardware?
Sadly, yes.&lt;/p&gt;
&lt;p&gt;It will require six extra wires.&lt;/p&gt;
&lt;p&gt;The trick is to use the Feather board as an ISP programmer, using the
“Arduino as ISP” example sketch from the Arduino IDE. You will need to
make the following connections:&lt;/p&gt;
&lt;img alt="https://cdn.hackaday.io/images/967991484403277085.png" src="https://cdn.hackaday.io/images/967991484403277085.png" /&gt;
&lt;p&gt;Now, in your Arduino IDE go to Files→Examples→11.ArduinoISP and select
that example. Then scroll to around line 68 and change this:&lt;/p&gt;
&lt;div class="highlight-cpp notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;// Configure which pins to use:// The standard pin configuration.#ifndef ARDUINO_HOODLOADER2#define RESET     10// Use pin 10 to reset the target rather than SS#define LED_HB    9#define LED_ERR   8#define LED_PMODE 7```

Into this:```vbscript
// Configure which pins to use:// The standard pin configuration.#ifndef ARDUINO_HOODLOADER2#define RESET     0#define LED_HB    2#define LED_ERR   4#define LED_PMODE 5```

Then go to Tools→Board and select the Adafruit HUZZAH board, then do
Sketch→Upload. You have your programmer ready.Then to program the chip, load the sketch with the servo controller,
change the board to Arduino Uno, select Tools→Programmer→Arduino as
ISP, and do Sketch→Upload Using Programmer. You should see some
blinking lights on your Feather, and then your chip is programmed.

In the end, I will probably make a Makefile that does the equivalent
of the above procedure automatically, to streamline the experience a
bit.





### Choosing the Brains
Created 2017-01-11.

In the previous post I shared some of my thoughts about this project,
and decided to pick a different development board than the Pro Mini
that I have been using so far. Don&amp;#39;t get me wrong, Pro Mini is great
for all kinds of small and cheap projects, it&amp;#39;s just that I want to
make programming this robot as simple as possible. That, among other
things, means using a platform that has a lot of computing power, not
just enough, preferably one that has so much of it, that it can be
used with a high-level language like Python. That also means something
that has a USB socket.

---------- more ----------The plan is to keep the Tote base PCB for its body, and keep the
ATmega microcontroller on it, but make it only serve as a servo
controller. Then, on top of it, have headers for plugging in the
actual brains, and possibly for stacking additional shields with
sensors and other peripherals. The board would only need connections
for the power and the I2C pins, but since there is no standard for the
pin layout (or, rather, there are lots of standards), I need to choose
one -- history shows that trying to make it flexible and compatible
with many different boards only leads to pain and suffering.

However, I still want this to be relatively cheap. It would be bad if
the brain was more expensive than the ~$20 the legs cost. I first
tried with the D1 Mini board, because it&amp;#39;s my favorite ESP8266 board,
it&amp;#39;s small and compact, and it has a number of shields for it
available. It&amp;#39;s also easy to make new shields for it, and they can be
very small, which makes them cheap on OSHPark. The board can run
MicroPython and has WiFi build in, which makes it easy to use a remote
console to program and debug it very conveniently. There is also a
LiPo shield, which makes it possible to recharge the battery from the
USB. So I spent some hours making this:


:::{image} https://cdn.hackaday.io/images/5545441484170063244.png

:::


The base is just the[#Servo Breakout for WeMos D1 Mini](https://hackaday.io/project/13278) with 20 channels for the servos. I tried to make it easier to
reprogram by including the ISP header. There are no Tote-specific
markings about leg servos and so on there -- just channel numbers, so
it makes it easier to see which servo is which inside your program,
where you have to refer to them by numbers too (at least initially).
This way there is no hardcoded magical knowledge necessary, and you
can use the remaining 8 PWM outputs for other things, or use this
board with a different legs configuration than Tote has.

There is also a power switch in there, but it&amp;#39;s not connected to the
rest of the board -- since I didn&amp;#39;t decide about how it will be
powered yet (you can have the LiPo shield or not, you can have some
other charging/protection module, you can use a powerbank, etc.), I
left it disconnected and only provided headers. I also added battery
connectors on both ends of the board, for use with any battery holder.
Unfortunately, I didn&amp;#39;t know which one, so I just spaced them as far
from each other as possible.

Then there are the headers for connecting the D1 Mini and its shields.
I used alternating holes headers, so that you can plug it directly
into the PCB (but you can also use headers). I connected the servo
power to the 5V pin, to bypass the voltage regulator on the board.

Later, I found a tube of ATmega328 chips in the MLF package, and I was
a bit bored, so I made a version for that, playing with Fritzing&amp;#39;s
curvy traces:


:::{image} https://cdn.hackaday.io/images/7757741484170897474.png

:::


It was fun, but ultimately unproductive. Anyways, I liked the first
board, so I ordered it at DirtyPCBs and went do bed.I couldn&amp;#39;t sleep that night.

Tossing and turning, I started thinking about different options I have
for using this. Then the doubts crept it. If I use the LiPo shield,
there will be a boost converter on the 5V line that powers the servos.
Will it have enough power for all those servos? If not, can I somehow
power the servos directly from the LiPo? I don&amp;#39;t have a connection for
that on the board, should I add it? What will happen if I short the 5V
pin with the 3.3V pin on the D1 Mini? Will that damage the voltage
regulator? Can I make adapters for the D1 Mini pinout for other
boards? What if I wanted to use OpenMV, could that work? Which of the
official D1 Mini shields would actually be useful? The temperature and
humidity sensors? The button shield? The single WS2812B RGB LED? Will
there be enough room between the robot legs to place the board under
the body instead of on top? And so on.

Finally, at 5am I decided I&amp;#39;m not going to fall asleep anyways, so I
could as well do some mock designs. What other ESP8266 development
board do I know that has a lot of shields available? Maybe the
Adafruit HUZZAH Feather? It&amp;#39;s a bit expensive, but it does come with a
LiPo charger built-in, the correct pin markings for MicroPython (the
D1 Mini uses the NodeMCU markings) and generally has great support.
There are also other Arduino-compatible boards with that footprint,
and there is an M0 board that also runs MicroPython. And the shields
somehow look more appealing.

So I decided to give it a try, and I came up with this:


:::{image} https://cdn.hackaday.io/images/8821021484171642513.png

:::


Unfortunately, the Feather is a fraction longer than the 5cm of the
Tote&amp;#39;s base, so it sticks out about 2mm in front. That&amp;#39;s where the
ESP8266&amp;#39;s antenna is, so I guess that&amp;#39;s fine. I also made a couple of
other decisions here.Since there is no boost converter, only the charging circuit, I have
no problems with servos drawing too much power -- I will just power
them directly from the battery. I decided on the kind of battery to
use -- I discovered the 16340 lithium batteries. Previously I knew the
18650, as they are commonly used for power banks, but those are too big for
Tote. The 16340 is half that size, and there are convenient battery holders for it.
So I added holes for mounting such a holder on the bottom of the
board, and made all the connections for the switch and the charging
circuit, etc.

I also decided to use one of the analog-only pins of the ATmega for
battery voltage monitoring, since I wasn&amp;#39;t using them anyways. It&amp;#39;s
the same voltage divider circuit I had in the previous Totes.

One more addition, is the double pin header on the front. I plan to
add a female header to it, but soldered flat on the board, so that you
can easily plug any sensor breakout boards into it, and they will be
facing forward. Of course, you would need to make any connections with
additional wires, but at least there is the mechanical support.

But something wasn&amp;#39;t quite right. I had this nagging feeling that I&amp;#39;m
forgetting something. I reviewed my notes, and then I realized. Tote
is supposed to be simple to build without access to special tools like
3D printers or laser cutters. Or like reflow ovens, hot plates, hot
air guns or very precise soldering irons, like the one I have. I have
SMD parts on that board, and no beginner is going to solder that with
a cheap soldering iron, without using any flux. This board is simply
too complex for Tote. I need something simpler.

So I deleted the microcontroller and all the SMD parts, and started
working again. I came up with something like this:


:::{image} https://cdn.hackaday.io/images/4663631484172769261.png

:::
There is a number of changes. I used an ATmega chip in a DIP package,
which should be easy enough to solder with a rusty nail. There are no
analog-only pins in that version, so the battery monitoring went away.
I connected the reset pin to the Feather&amp;#39;s reset, so they share the
pullup resistor there. And I&amp;#39;m going to use internal pullups for the
I²C lines.\


Next, I aligned all the headers with each other, so that it&amp;#39;s easier
to solder them all by inserting them into a breadboard for holding. I
had some room on the sides, so I doubled the Feather&amp;#39;s pins, making a
prototyping area where you can connect those wires from your sensors,
or whatever you want. I also disconnected the second ground pin from
the ground, as I realized that it&amp;#39;s connected to CH_PD on the HUZZAH,
and I would get a short there. As a finishing touch, I added all the
labels I could think of, and moved them to more convenient places. I
also added ground fill and some silkscreen decorations that are not
shown here, for clarity.

DirtyPCBs has this awesome feature, where you can change your order&amp;#39;s
gerber if it wasn&amp;#39;t assigned to a panel yet. I checked my order, and
it wasn&amp;#39;t, so I quickly swapped this. I think this is the design I&amp;#39;m
going to go with. It&amp;#39;s easy enough to assemble even for a beginner,
provides a lot of room for prototyping, and is simple and modular.

It&amp;#39;s funny how bigger components, like the DIP chip and the Feather
board, actually give me more room on the board. The DIP chip has much
better spacing of the legs, so I don&amp;#39;t need as much width for fitting
all the traces. The Feather is narrower than the D1 Mini by 2.54mm,
but that means you can fit two Feather shields (they call them Wings)
on a 5x5cm PCB, and you have room for the servo horns on the sides of
that base board. Finally, you can use a DIP socket and make the chip
pluggable -- so you can easily replace it, and also reprogram it more
conveniently.

I&amp;#39;m really excited about this board, and I think this is really the
right direction for Tote to go in. The next step is code and
documentation for it. If the prototype works well enough, I&amp;#39;m going to
make it the default version in the documentation and only focus on
this. Can&amp;#39;t wait for the boards to arrive.





### New Year Reflections
Created 2017-01-11.


# Year&amp;#39;s Summary

This is one of my oldest projects, and definitely one that I have put
the most total work into so far. With the year&amp;#39;s end, I decided to
reflect a bit about the progress made so far and the way forward.\


There wasn&amp;#39;t a lot of activity, but some interesting things did happen
last year.

We had a workshop in Belgrade, where we built 20[#Tote HaD](https://hackaday.io/project/9927)s. I have learned a lot about how (not) to source parts for such an
event, how to run it, what parts are actually hard for people, etc.
There were also some improvements to the construction itself
contributed by the participants -- but only during the workshop. I&amp;#39;m a
bit disappointed that nobody seems to have done anything with their
robot after the workshop -- or, at least, I haven&amp;#39;t heard about it. I
think this is an important point to consider.\


There have also been some Tote-inspired builds out there. I helped to
build at least two of them. There are even more unfinished projects,
but I guess that&amp;#39;s normal.

On my side, I released another version of the PCB, experimented with
some alternate brains (including the[#Tote Zero](https://hackaday.io/project/9065) with a Raspberry Pi), and made one of my prototypes look much better
by giving it a chassis and some LED eyes, and a coat of paint. There
has been practically no progress on the software side, despite some
research on the CORDIC algorithms and servo PWM code. I also didn&amp;#39;t
experiment much with sensors and behaviors. The step-by-step tutorial
is also empty.

Overall, even though some work got done, and even though I gained some
experience, I&amp;#39;m not particularly happy with the outcomes of the Tote
project. I&amp;#39;m starting to realize that it&amp;#39;s not enough to give people a
platform to experiment with -- even if they do experiments and
improvements, it&amp;#39;s all for nothing if they don&amp;#39;t share them.


# Wrong Goals

I think that part of the problem is that I have been focusing on the
wrong parts of the project. I need to pause and re-evaluate some of
the assumptions I made, and see where that takes me.

When I was just starting with Tote, I still remembered being a student
and not having much of a budget for this kind of projects. So I made
lowering the total cost the number one priority (well, apart from
having it actually work, of course). As I look at this now, this might
have been a mistake. Sure, when you are a student in Poland, price is
the number one factor for anything. But it turns out that most people
who do this hobby stuff actually don&amp;#39;t mind spending a little bit more
if that saves them time, makes things more convenient, gives better
results or even just makes things look more shiny. If you are going to
put hours of work into a project anyways, you don&amp;#39;t mind waiting a
little bit more to get the extra funds. So I am going to pay less
attention to the price (but still try to keep everything frugal) from
now on.

By default, Tote is controlled with a TV remote, and has no autonomous
functionality. I did that, because I figured it&amp;#39;s the simplest
starting point, and also shows off the hardware capabilities, leaving
any software-side innovation to the users. Or maybe I was just lazy.
In any case, I think that this has turned it into a toy, and
discouraged actually programming it. There are some other decisions
that also contributed to it: the need for an external programmer for
programming, the main code written in C++, no easy way to update and
debug the code. I think I should start putting more effort into making
it easier to actually program this robot, and encourage it more. Fast
iteration is the key to good progress. I have become painfully aware
of that recently when working on the recent version[#µBob biped robot](https://hackaday.io/project/3736), where I had to physically unscrew and detach the legs to access the
chip for programming. That&amp;#39;s the best way to make sure nobody ever
changes anything in the program unless they absolutely must. So I need
to try and remove all the obstacles for programming. And also finally
finish the programming tutorial for it.

Simplicity was another design goal (it always is), but I kinda lost
track of it in my pursuit of squeezing as much as possible from the
small budget. It especially shows in my[The Way Forward](https://hackaday.io/project/6050/log/30979-the-way-forward) log a few months ago and[the crazy PCB design for Tote Zero](https://hackaday.io/project/9065-tote-zero/log/31747-everything-in-one). Something definitely went wrong there. I really need to break up the
whole design into independent, single-function modules, and I need to
work on lowering the complexity of each of them -- preferably using
ready off-the-shelf parts and modules. I also need to look into making
the assembly easier. One of the goals from the beginning was to not
require any special tools like 3D printers or laser cutters -- so that
you can make it at home easily. However, I forgot that soldering
skills are also an &amp;quot;advanced tool&amp;quot;, and that while many people have
access to some way of soldering, soldering tiny, densely packed SMD
components is not a common skill. So I definitely need to review that.

Sourcing the parts is a problem too. From the start the goal was to
use standard, off-the-shelf, easily available components, and I did
follow that. However, in my pursuit to make things cheap and also to
make it easy to reuse whatever parts you might have lying around, I
left a lot of things underspecified. The battery is an excellent
example of that -- I&amp;#39;m mostly using LiPos for toy quadcopters, because
they are cheap, light and can provide a lot of current. But every
manufacturers makes them in a little bit different sizes, with
different plugs (they especially love to swap the + and - leads), and
generally storing and charging them is a bit involved. Because of
that, my designs just leave the battery out, assuming the user will
use whatever he has, and will attach it whenever it fits, usually with
a two-sided tape, or maybe velcro. That&amp;#39;s definitely sub-optimal, and
I need to put more focus into specifying the parts a little bit more
precisely and using more standard ones. It&amp;#39;s also a very daunting task
to order a couple of servos in one place, a battery in another place,
the pcb in yet another place, the mcrocontroller board in yet another,
etc. -- I think that this stops many people from trying this project.
Of course, the obvious solution would be a kit, but I don&amp;#39;t want to be
selling anything... Perhaps I should try looking at Tindie anyways?

Finally, but perhaps most importantly, I need to find a way to disown
this project, to make it a brand of its own, and not something
attached to my name. I think that most people, when they build a
complex project like this, like to &amp;quot;own&amp;quot; it, make it their own -- and
not say &amp;quot;I&amp;#39;ve build Radomir&amp;#39;s robot&amp;quot;. I haven&amp;#39;t figured out how to do
that yet. Perhaps I will need to team up with some other similar
projects?


# Future Plans

I definitely want to continue working on Tote with the goal of
crowdsourcing innovation in the area of quadruped robots. There will
probably be some large changes, though, as a result of the above goal
changes. I will probably use a different development board, something
that has shields. I will try to make the battery and power more
manageable, and I will put more focus on the documentation and
software side of things.





### imath.h
Created 2016-12-22.

It took me two evenings of pretty much randomly editing code, trying
to make it as small as possible without breaking it horribly at the
same time, but I finally have a library with three basic functions,_iasin_,_iatan2_ and_isqrt_, which are_int16_t_ versions of the ones from the standard library. The angles are
returned in the range of -1800 to 1800, and the input to asin is
-1&amp;lt;&amp;lt;13 +1 to 1&amp;lt;&amp;lt;13. The whole library is around 700 bytes (644 at the
last compile) and should be relatively fast on the AVR (although I
didn&amp;#39;t really time it). Oh, and the code is at[https://bitbucket.org/thesheep/imath/src/tip/imath.c](https://bitbucket.org/thesheep/imath/src/tip/imath.c)

If you see any opportunity to shrink it even more, please tell me!

Unfortunately, this is still way too large to make Tote fit in the
magical kilobyte. I might try with int8 versions next, but those are
not going to have enough resolution for a proper walk, unless I will
play with the ranges some more.

Here&amp;#39;s a comparison of the values from those functions with the
standard library:

&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;asin(-0.88)=-61.04 iasin(-7168)=-610 diff -0.04  asin(-0.75)=-48.59
iasin(-6144)=-486 diff 0.01  asin(-0.63)=-38.68 iasin(-5120)=-388 diff
0.12  asin(-0.50)=-30.00 iasin(-4096)=-302 diff 0.20
asin(-0.37)=-22.02 iasin(-3072)=-220 diff -0.02  asin(-0.25)=-14.48
iasin(-2048)=-144 diff -0.08  asin(-0.12)=-7.18 iasin(-1024)=-70 diff
-0.18  asin(0.00)=0.00 iasin(0)=0 diff 0.00  asin(0.12)=7.18
iasin(1024)=72 diff -0.02  asin(0.25)=14.48 iasin(2048)=144 diff 0.08
asin(0.37)=22.02 iasin(3072)=220 diff 0.02  asin(0.50)=30.00
iasin(4096)=300 diff 0.00  asin(0.63)=38.68 iasin(5120)=388 diff -0.12
asin(0.75)=48.59 iasin(6144)=486 diff -0.01  asin(0.88)=61.04
iasin(7168)=610 diff 0.04  asin(1.00)=90.00 iasin(8192)=916 diff -1.60
sqrt(0)=0.00 isqrt(0)=0 diff 0.00  sqrt(1024)=32.00 isqrt(1024)=32
diff 0.00  sqrt(2048)=45.25 isqrt(2048)=45 diff 0.25  sqrt(3072)=55.43
isqrt(3072)=55 diff 0.43  sqrt(4096)=64.00 isqrt(4096)=64 diff 0.00
sqrt(5120)=71.55 isqrt(5120)=71 diff 0.55  sqrt(6144)=78.38
isqrt(6144)=78 diff 0.38  sqrt(7168)=84.66 isqrt(7168)=84 diff 0.66
sqrt(8192)=90.51 isqrt(8192)=90 diff 0.51    atan2(0, 0)=0.00
iatan2(0, 0)=0 diff 0.00  atan2(0, 1024)=0.00 iatan2(0, 1024)=0 diff
0.00  atan2(0, 2048)=0.00 iatan2(0, 2048)=0 diff 0.00  atan2(0,
3072)=0.00 iatan2(0, 3072)=0 diff 0.00  atan2(0, 4096)=0.00 iatan2(0,
4096)=0 diff 0.00  atan2(0, 5120)=0.00 iatan2(0, 5120)=0 diff 0.00
atan2(0, 6144)=0.00 iatan2(0, 6144)=0 diff 0.00  atan2(0, 7168)=0.00
iatan2(0, 7168)=0 diff 0.00  atan2(0, 8192)=0.00 iatan2(0, 8192)=0
diff 0.00  atan2(1024, 0)=90.00 iatan2(1024, 0)=899 diff 0.10
atan2(1024, 1024)=45.00 iatan2(1024, 1024)=449 diff 0.10  atan2(1024,
2048)=26.57 iatan2(1024, 2048)=274 diff -0.83  atan2(1024, 3072)=18.43
iatan2(1024, 3072)=183 diff 0.13  atan2(1024, 4096)=14.04 iatan2(1024,
4096)=139 diff 0.14  atan2(1024, 5120)=11.31 iatan2(1024, 5120)=112
diff 0.11  atan2(1024, 6144)=9.46 iatan2(1024, 6144)=95 diff -0.04
atan2(1024, 7168)=8.13 iatan2(1024, 7168)=84 diff -0.27  atan2(1024,
8192)=7.13 iatan2(1024, 8192)=70 diff 0.13  atan2(2048, 0)=90.00
iatan2(2048, 0)=899 diff 0.10  atan2(2048, 1024)=63.43 iatan2(2048,
1024)=633 diff 0.13  atan2(2048, 2048)=45.00 iatan2(2048, 2048)=449
diff 0.10  atan2(2048, 3072)=33.69 iatan2(2048, 3072)=336 diff 0.09
atan2(2048, 4096)=26.57 iatan2(2048, 4096)=274 diff -0.83  atan2(2048,
5120)=21.80 iatan2(2048, 5120)=216 diff 0.20  atan2(2048, 6144)=18.43
iatan2(2048, 6144)=183 diff 0.13  atan2(2048, 7168)=15.95 iatan2(2048,
7168)=159 diff 0.05  atan2(2048, 8192)=14.04 iatan2(2048, 8192)=139
diff 0.14  atan2(3072, 0)=90.00 iatan2(3072, 0)=899 diff 0.10
atan2(3072, 1024)=71.57 iatan2(3072, 1024)=724 diff -0.83  atan2(3072,
2048)=56.31 iatan2(3072, 2048)=562 diff 0.11  atan2(3072, 3072)=45.00
iatan2(3072, 3072)=449 diff 0.10  atan2(3072, 4096)=36.87 iatan2(3072,
4096)=370 diff -0.13  atan2(3072, 5120)=30.96 iatan2(3072, 5120)=309
diff 0.06  atan2(3072, 6144)=26.57 iatan2(3072, 6144)=274 diff -0.83
atan2(3072, 7168)=23.20 iatan2(3072, 7168)=232 diff -0.00  atan2(3072,
8192)=20.56 iatan2(3072, 8192)=206 diff -0.04  atan2(4096, 0)=90.00
iatan2(4096, 0)=899 diff 0.10  atan2(4096, 1024)=75.96 iatan2(4096,
1024)=759 diff 0.06  atan2(4096, 2048)=63.43 iatan2(4096, 2048)=633
diff 0.13  atan2(4096, 3072)=53.13 iatan2(4096, 3072)=534 diff -0.27
atan2(4096, 4096)=45.00 iatan2(4096, 4096)=449 diff 0.10  atan2(4096,
5120)=38.66 iatan2(4096, 5120)=388 diff -0.14  atan2(4096, 6144)=33.69
iatan2(4096, 6144)=336 diff 0.09  atan2(4096, 7168)=29.74 iatan2(4096,
7168)=299 diff -0.16  atan2(4096, 8192)=26.57 iatan2(4096, 8192)=274
diff -0.83  atan2(5120, 0)=90.00 iatan2(5120, 0)=899 diff 0.10
atan2(5120, 1024)=78.69 iatan2(5120, 1024)=786 diff 0.09  atan2(5120,
2048)=68.20 iatan2(5120, 2048)=682 diff -0.00  atan2(5120, 3072)=59.04
iatan2(5120, 3072)=589 diff 0.14  atan2(5120, 4096)=51.34 iatan2(5120,
4096)=517 diff -0.36  atan2(5120, 5120)=45.00 iatan2(5120, 5120)=449
diff 0.10  atan2(5120, 6144)=39.81 iatan2(5120, 6144)=398 diff 0.01
atan2(5120, 7168)=35.54 iatan2(5120, 7168)=364 diff -0.86  atan2(5120,
8192)=32.01 iatan2(5120, 8192)=329 diff -0.89  atan2(6144, 0)=90.00
iatan2(6144, 0)=899 diff 0.10  atan2(6144, 1024)=80.54 iatan2(6144,
1024)=814 diff -0.86  atan2(6144, 2048)=71.57 iatan2(6144, 2048)=724
diff -0.83  atan2(6144, 3072)=63.43 iatan2(6144, 3072)=633 diff 0.13
atan2(6144, 4096)=56.31 iatan2(6144, 4096)=562 diff 0.11  atan2(6144,
5120)=50.19 iatan2(6144, 5120)=502 diff -0.01  atan2(6144, 6144)=45.00
iatan2(6144, 6144)=449 diff 0.10  atan2(6144, 7168)=40.60 iatan2(6144,
7168)=405 diff 0.10  atan2(6144, 8192)=36.87 iatan2(6144, 8192)=370
diff -0.13  atan2(7168, 0)=90.00 iatan2(7168, 0)=899 diff 0.10
atan2(7168, 1024)=81.87 iatan2(7168, 1024)=820 diff -0.13  atan2(7168,
2048)=74.05 iatan2(7168, 2048)=741 diff -0.05  atan2(7168, 3072)=66.80
iatan2(7168, 3072)=666 diff 0.20  atan2(7168, 4096)=60.26 iatan2(7168,
4096)=602 diff 0.06  atan2(7168, 5120)=54.46 iatan2(7168, 5120)=545
diff -0.04  atan2(7168, 6144)=49.40 iatan2(7168, 6144)=493 diff 0.10
atan2(7168, 7168)=45.00 iatan2(7168, 7168)=449 diff 0.10  atan2(7168,
8192)=41.19 iatan2(7168, 8192)=411 diff 0.09  atan2(8192, 0)=90.00
iatan2(8192, 0)=899 diff 0.10  atan2(8192, 1024)=82.87 iatan2(8192,
1024)=828 diff 0.07  atan2(8192, 2048)=75.96 iatan2(8192, 2048)=759
diff 0.06  atan2(8192, 3072)=69.44 iatan2(8192, 3072)=693 diff 0.14
atan2(8192, 4096)=63.43 iatan2(8192, 4096)=633 diff 0.13  atan2(8192,
5120)=57.99 iatan2(8192, 5120)=581 diff -0.11  atan2(8192, 6144)=53.13
iatan2(8192, 6144)=534 diff -0.27  atan2(8192, 7168)=48.81
iatan2(8192, 7168)=489 diff -0.09  atan2(8192, 8192)=45.00
iatan2(8192, 8192)=449 diff 0.10```&lt;/p&gt;
&lt;p&gt;\&lt;/p&gt;
&lt;/section&gt;
&lt;section id="cordic"&gt;
&lt;h3&gt;CORDIC&lt;/h3&gt;
&lt;p&gt;Created 2016-12-21.&lt;/p&gt;
&lt;p&gt;Since the flu season began, I’ve been lying in bed sick quite some
time. While I don’t recommend doing coding with a fever (takes way too
much time to track down the trivial mistakes you make), you do have
some free time to explore some coding ideas that you didn’t bother
with before. One of such things on my to do list is rewriting Tote’s
inverse kinematics code to use only integer math, and I found a
marvelous family of algorithms that can let me do it.&lt;/p&gt;
&lt;p&gt;If you look at my explanation of Tote’s inverse kinematics at&lt;a class="reference external" href="http://tote.readthedocs.io/en/latest/ik.html"&gt;http://tote.readthedocs.io/en/latest/ik.html&lt;/a&gt;, you will see that I’m using two trigonometric functions (actually
inverse trigonometric functions) in there: atan2 and acos. They both
return an angle – in the case of the standard library functions, in
form of a number between -PI and PI (or was it 0 and 2PI? I can’t
remember). That’s a pretty arbitrary range, that I have to then
convert into servo pulse width in the range between 600 and 2400µs.
Wouldn’t it me great if they instead returned integers from 0 to 1800,
so that I could use them for the servo pulse width directly?&lt;/p&gt;
&lt;p&gt;But how are such trigonometric functions calculated? There are several
ways. You can approximate them with a polynomial, using a so-called
Taylor series. You can also have a lookup table, with some
interpolation for the values in between. But both of those approaches
involve quite a lot of multiplications and divisions, and possibly
floating point (or fixed point) numbers. Which is slow on a
microcontroller such as the one used in Tote, not to mention a lot of
code being generated (especially for the lookup tables). Fortunately
there are the CORDIC algorithms, which involve only a lookup in a
small table, some additions and some bit shifts. And of course you do
it all on integers. Plus, you have very good control over the accuracy
– the more iterations of the algorithm you do, the better results you
get.&lt;/p&gt;
&lt;p&gt;How does it work? The heart of the algorithm is a small mathematical
trick that lets you rotate a point (x, y) around the center of the
coordinate system (0, 0) by a fixed angle using just additions and bit
shifts, provided you know the arcus tangent value of that fixed angle.
So you make a lookup table with a dozen values for 45°, 22.5°, 11.25°,
5.625°, and so on (each angle half of the previous one), and you do a
binary search for your value.&lt;/p&gt;
&lt;p&gt;Let’s say you want to calculate cos(a). Imagine a length 1 line
starting at (0, 0) and going to (x, y), with the angle between the x
axis and the line being a. Then the value we are looking for is x. How
do we find x? We will start with a line at angle 0° and coordinates
(1, 0), and rotate it (using our additions and shifts) by 45° one way
or the other, depending if our a is larger or smaller than 0. We will
get some point (x1, y1) this way. Then we will rotate it again, by
22.5°, one way or the other depending on where the angle a is compared
to our current angle. And we will repeat that, rotating by a smaller
angle each time, until we get close enough to out angle a. At that
point we have calculated our cos(a) (and also sin(a) at the same
time).&lt;/p&gt;
&lt;p&gt;Calculating the inverse trigonometric functions is similar, except we
start with the line at (x, y), and try to rotate it to be as close to
(1, 0) as possible, keeping track of how much we have rotated it so
far. Once we got close enough to (1, 0), the total angle is our
answer. Simple.&lt;/p&gt;
&lt;p&gt;All that is left for me is to actually write some code, test it, tune
it to use the smallest types possible and to work with enough accuracy
for my particular use case, and put that code in Tote. I will let you
know when that happens, but first I need to get over this flu.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="version-5"&gt;
&lt;h3&gt;Version 5&lt;/h3&gt;
&lt;p&gt;Created 2016-12-07.&lt;/p&gt;
&lt;p&gt;I’ve been asked for a Tote kit for a Christmas preset by a friend, and
I realized I no longer have any version 4 boards. So I had to go and
order some. But if I’m ordering boards anyways, why not make some
improvements here and there? So here’s a version 5.&lt;/p&gt;
&lt;img alt="https://cdn.hackaday.io/images/7989951481143160341.png" src="https://cdn.hackaday.io/images/7989951481143160341.png" /&gt;
&lt;p&gt;You can see the board is much simpler now. It’s basically just the
servos, the battery, the pro mini, power switch and ir sensor. There
are still the optional battery monitoring, piezo, distance sensor and
extra capacitor, but by default they are not used. I also switched
some pins around, so now using the serial pins for servos – but all
the analog pins are free, and broken out close to each of the legs.
That should make it easier to use them for sensors.&lt;/p&gt;
&lt;p&gt;There is also a new step-by-step assembly tutorial for this version at&lt;a class="reference external" href="http://tote.readthedocs.io/en/latest/assembly_v5.html"&gt;http://tote.readthedocs.io/en/latest/assembly_v5.html&lt;/a&gt; and slightly modified code at&lt;a class="reference external" href="https://bitbucket.org/thesheep/tote/src/tip/v5"&gt;https://bitbucket.org/thesheep/tote/src/tip/v5&lt;/a&gt;.&lt;/p&gt;
&lt;img alt="https://cdn.hackaday.io/images/7428001481143601250.jpg" src="https://cdn.hackaday.io/images/7428001481143601250.jpg" /&gt;
&lt;p&gt;And I still have the other 9 boards to give away.Oh, right and a DirtyPCB link:&lt;a class="reference external" href="http://dirtypcbs.com/store/user/preview/1154"&gt;http://dirtypcbs.com/store/user/preview/1154&lt;/a&gt;\&lt;/p&gt;
&lt;/section&gt;
&lt;section id="pimp-your-robot-ii"&gt;
&lt;h3&gt;Pimp Your Robot II&lt;/h3&gt;
&lt;p&gt;Created 2016-11-10.&lt;/p&gt;
&lt;p&gt;So, today I hotglued the lenses with the LEDs, updated the software to
let me switch the LEDs on and off, added a piezo to the robot, so it
makes sounds, and painted some red highlights on the legs. The end
result:&lt;/p&gt;
&lt;img alt="https://cdn.hackaday.io/images/4791001478776115934.jpg" src="https://cdn.hackaday.io/images/4791001478776115934.jpg" /&gt;
&lt;p&gt;And here’s a short video:&lt;/p&gt;
&lt;iframe style="width: 500px; height: 281px;" width="500" height="281" src="//www.youtube.com/embed/sBmQx8Rb05I" frameborder="0" allowfullscreen="None"&gt;&lt;/iframe&gt;
&lt;/section&gt;
&lt;section id="pimp-your-bot"&gt;
&lt;h3&gt;Pimp Your Bot&lt;/h3&gt;
&lt;p&gt;Created 2016-11-09.&lt;/p&gt;
&lt;p&gt;The winter is coming, and my robots need some maintenance – after a
year of traveling to various conferences and fairs, they accumulated a
number of injuries. It’s also a good idea to recharge the lipo
batteries once in a while.&lt;/p&gt;
&lt;p&gt;I started repairing the robots, replacing broken servos, tuning them,
etc. – and at some point I realized that they actually look pretty
drab. Just a bunch of wires and servos, really. Of course, the idea
was to make them as simple and easy to make as possible, so that’s
just expected, but still they don’t look like something you would
actually want to have.  That’s when I decided to take one of the
prototypes (incidentally, the one that I used for proprioception
experiments), and make a chassis for it, to make it look a little bit
better.\&lt;/p&gt;
&lt;p&gt;So I went to the Internets and started to look through concept art of
various robots. I’m quite surprised and saddened by how many of those
are simply “a human in suit with a weird helmet”. Oh well. Finally, I
found one drawn by Paul Denton that fits Tote well and should be
simple enough to make:&lt;/p&gt;
&lt;img alt="https://cdn.hackaday.io/images/4506301478726184776.jpg" src="https://cdn.hackaday.io/images/4506301478726184776.jpg" /&gt;
&lt;p&gt;It’s a bit dark and gritty, but that’s even better – any mistakes I
make will not be as visible. So I started with a plastic box – from a
set of toy blocks for kids. Of course I started by cutting the
corners:&lt;/p&gt;
&lt;img alt="https://cdn.hackaday.io/images/2843691478726292182.jpg" src="https://cdn.hackaday.io/images/2843691478726292182.jpg" /&gt;
&lt;p&gt;Then I removed the legs from the robot, and installed the PCB inside
the box:\&lt;/p&gt;
&lt;img alt="https://cdn.hackaday.io/images/7280851478726343324.jpg" src="https://cdn.hackaday.io/images/7280851478726343324.jpg" /&gt;
&lt;p&gt;I had to cur the sides of the box, and also the “ears” on the servos
– to make them fit properly without colliding with the box or with
themselves. Once I was happy with the shape, I hot-glued the PCB
securely in place and started painting. I’m using acrylic paints for
painting tabletop battle miniatures. It sticks pretty well to plastic.&lt;/p&gt;
&lt;img alt="https://cdn.hackaday.io/images/6281001478726589492.jpg" src="https://cdn.hackaday.io/images/6281001478726589492.jpg" /&gt;
&lt;p&gt;Once I had the base coat ready and it all dried, I started to dry-
brush some of the wear and old paint on it, then dry-brushed the whole
thing with metallic paint, to make it look like beaten metal.\&lt;/p&gt;
&lt;img alt="https://cdn.hackaday.io/images/6727501478726680622.jpg" src="https://cdn.hackaday.io/images/6727501478726680622.jpg" /&gt;
&lt;p&gt;Next, I had to do something with the wires. They are way too long,
there is not enough space inside to hide them, and they are the wrong
color. After some deliberation, I decided to just cut them to size:&lt;/p&gt;
&lt;img alt="https://cdn.hackaday.io/images/4658581478726748371.jpg" src="https://cdn.hackaday.io/images/4658581478726748371.jpg" /&gt;
&lt;p&gt;And then I also painted them black. Some mor dry-brushing, and it’s
almost ready. I also made a hole at the top for the IR sensor for the
remote to stick out.\&lt;/p&gt;
&lt;img alt="https://cdn.hackaday.io/images/6585081478726795228.jpg" src="https://cdn.hackaday.io/images/6585081478726795228.jpg" /&gt;
&lt;p&gt;Next, I worked on the eyes. I found some plastic lenses for LEDs in my
drawer, and some red LEDs:\&lt;/p&gt;
&lt;img alt="https://cdn.hackaday.io/images/796701478726919340.jpg" src="https://cdn.hackaday.io/images/796701478726919340.jpg" /&gt;
&lt;p&gt;A bit of glue to secure the LEDs in place, some more to glue the
lenses into the eyes, and some resistors and wires, and it’s almost
ready. Now I just need to wait for the glue to set…&lt;/p&gt;
&lt;/section&gt;
&lt;section id="the-way-forward"&gt;
&lt;h3&gt;The Way Forward?&lt;/h3&gt;
&lt;p&gt;Created 2016-01-29.&lt;/p&gt;
&lt;p&gt;A lot has happened in the recent time for the hobbyist community, and
I’m currently wondering where I want to take this project. Here’s some
random rambling on the subject, just to clear it out of my head.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;p&gt;A Raspberry Pi Zero was released, and it’s small and cheap enough to
fit in Tote and provide some more advanced features, like a Python
interpreter and possibly w WiFi camera. I forked&lt;span class="xref myst"&gt;#Tote Zero&lt;/span&gt; to explore that possibility, but it does makes things more
complicated. An operating system, the need to shut it down cleanly,
the need to keep it updated and properly configured, is a pain. Not to
mention the booting time. Powering the Raspberry Pi is also much more
involved than with Arduino – I have to use a 2S battery, which needs
a professional charger with balancing.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Batteries. While it’s easy to get a LiPo battery from an old cellphone
or similar device, and there are lots of LiPo batteries available in
shops for all those quadcopters, the technology is kinda tricky. They
are not as safe as I would like, and you can damage them by over-
discharging, so I need the voltage monitoring circuitry. Switching to
standard NiCd or NiMH rechargeable AAA batteries seems like a good
alternative. They are much heavier, but Tote can handle that. I will
do some experiments in the near future.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;TV remote. This is the easiest and cheapest way to get remote control,
so that’s why I used it, but now I’m beginning to have my doubts. It
turns Tote into a toy and discourages tinkering. It also requires some
work if you have a different remote than mine – you have to change
all the key codes. And it’s not really that great for precise control.
On the other hand, bluetooth and WiFi both have some great solutions.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Sensors. This is another thing that keeps Tote in the remote-
controlled toy category. It needs to have more sensors by default. I
have already found switches for the feet, and probably will make that
standard. Unfortunately the popular and cheap distance sensors out
there all require 5V to work properly, and the 3.3V versions are much
more expensive, so I think I can’t have them by default. Same for
inertial sensors – a good module with proper filtering simply costs
too much.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Micropython. I’ve tried multiple times to make Tote programmable in
Python, and all of them turned to be sub-optimal – either too
expensive or too limiting. But there is a good chance that the ESP8266
port of Micropython will become much more usable, thanks to the
Kickstarter campaign to fund its development. I’m still not sure there
will be enough memory to handle everything I want, but it’s certainly
very exciting for me. Since the ESP8266 only has about 9 usable GPIO
pins on it, and I need to control 12 servos, I would probably still
keep the Arduino and offload the leg inverse kinematics calculations
to it. I’m torn between this and the Pi Zero.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Force feedback and compliant motion. This is a very interesting topic,
and it makes the robot much more interesting, but with the current
design I simply don’t have enough analog pins, and their precision is
also not so great. Thinking about adding some external ADC modules
over I²C – they are not very expensive. Then I would need to decide
whether to measure the servo position (easy, not that useful) or the
force (hacky, hard, much more interesting).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Community. Right now I know about about 4 people other than me that
have built a robot more or less inspired by Tote. As far as I know
they do not communicate with each other and do not share experiences
or ideas. I suppose I could do a lot better in this area.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Open MV. I should get it in a few weeks, and I’m definitely going to
try and put it on Tote or any of my other robots. But it’s too
expensive to be a default.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
&lt;section id="another-tote-in-the-wild"&gt;
&lt;h3&gt;Another Tote in the Wild&lt;/h3&gt;
&lt;p&gt;Created 2016-01-23.&lt;/p&gt;
&lt;p&gt;Today I spent most of the day with a friend building his own instance
of Tote. Not only it was great fun, but I also learned a bit about
which parts need work (unsurprisingly, tuning and trimming the servos
is hard). We also experimented with a slightly different leg geometry
(the hip servos rotated by 90°), which gives slightly longer legs with
better reach. I think I will make it the default.&lt;/p&gt;
&lt;img alt="https://cdn.hackaday.io/images/3752301453586230602.jpg" src="https://cdn.hackaday.io/images/3752301453586230602.jpg" /&gt;
&lt;p&gt;One particularly hairy problem we’ve hit is that his 3.3V Pro Mini is
apparently set to 16Mhz for some reason. Fortunately I have programmed
Arduinos with the wrong frequency before and recognized the symptoms
(the servos got wrong frequency signal), and the board still works
with 3.3V (for this AVR this counts as overclocking), but I wonder if
it wouldn’t cause some problems with more sensitive parts, such as the
EEPROM.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="tote-zero"&gt;
&lt;h3&gt;Tote Zero&lt;/h3&gt;
&lt;p&gt;Created 2016-01-07.&lt;/p&gt;
&lt;p&gt;So the boards have arrived and I started working on the&lt;span class="xref myst"&gt;#Tote Zero&lt;/span&gt;, an older brother of Tote, powered by the Pi Zero board. That doesn’t
mean Tote is dead or deprecated or anything, of course. I will
continue working on all my project in the same erratic and chaotic
manner I did before.&lt;/p&gt;
&lt;p&gt;For instance, one thing I will definitely want to put on Tote is the&lt;span class="xref myst"&gt;#OpenMV&lt;/span&gt; board – once they are ready, hopefully sometime this year.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="pyboard"&gt;
&lt;h3&gt;PyBoard&lt;/h3&gt;
&lt;p&gt;Created 2015-12-20.&lt;/p&gt;
&lt;p&gt;There is a version of Tote using PyBoard as its brains:&lt;span class="xref myst"&gt;#Micropython Quadruped Robot&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;But the code for that was translated from Tote’s Arduino code, and
didn’t work too well for some reason. I promised to try and fix that
some time ago, but somehow I never got the time for it. Last night I
finally got myself to remove the PyBoard from&lt;span class="xref myst"&gt;#Henk hexapod robot&lt;/span&gt;, put it on Tote and program.&lt;/p&gt;
&lt;p&gt;As the base, I used the micro:bit version of Tote’s code, since it’s
MicroPython too. I just added the servo-handling code that&lt;span class="xref myst"&gt;&amp;#64;wagner&lt;/span&gt; wrote for his robot. I also used the same pins, timers and channels.
Since I didn’t want to make a custom PCB, I just used the old trick
and connected the PyBoard using dupont cables:&lt;/p&gt;
&lt;img alt="https://cdn.hackaday.io/images/8629801450613484223.jpg" src="https://cdn.hackaday.io/images/8629801450613484223.jpg" /&gt;
&lt;p&gt;The resulting code is available at&lt;a class="reference external" href="https://bitbucket.org/thesheep/pyb_tote/src"&gt;https://bitbucket.org/thesheep/pyb_tote/src&lt;/a&gt;&lt;/p&gt;
&lt;/section&gt;
&lt;section id="pi-zero"&gt;
&lt;h3&gt;Pi Zero&lt;/h3&gt;
&lt;p&gt;Created 2015-12-04.&lt;/p&gt;
&lt;p&gt;With the new Pi Zero board and its price, it may actually make sense
to use in in place of the Arduino on Tote. It’s only a little bit more
expensive, after all. The problem is, it doesn’t have hardware PWM and
has a whole operating system that needs to boot, has to be properly
configured and requires all the right software. The cost of the SD
card also cannot be ignored. All the adapters and cables are not a
problem, as it wouldn’t need them while connected to the robot.&lt;/p&gt;
&lt;p&gt;I started some initial testing on the Servo Blaster daemon for
controlling the servos:&lt;/p&gt;
&lt;img alt="https://cdn.hackaday.io/images/6435031449239124956.jpg" src="https://cdn.hackaday.io/images/6435031449239124956.jpg" /&gt;
&lt;p&gt;I also designed and ordered a PCB that makes the Pi Zero fit a little
better than on this photo. We will see how that works.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="micro-tote"&gt;
&lt;h3&gt;Micro:Tote&lt;/h3&gt;
&lt;p&gt;Created 2015-12-02.&lt;/p&gt;
&lt;p&gt;I almost had the Raspberry Pi thing working last time, and I promised
to get it to work, but not just yet. The last two weeks I had a
different project on my mind. I was participating in the&lt;a class="reference external" href="http://microworldtour.github.io/microbit/monifa.html"&gt;Micro World Tour&lt;/a&gt;, a program that gets a couple of the micro:bit boards into the hands
of Python hackers to do something nice with its Micropython
implementation. So, obviously, I had to put it on Tote. Just imagine
every kid in UK building their own quadruped robot and doing amazing
stuff with it!&lt;/p&gt;
&lt;p&gt;But yeah, there were some hurdles. First, we had to write&lt;a class="reference external" href="http://microbit-micropython.readthedocs.org/"&gt;some documentation for it&lt;/a&gt;, because it’s all just being created as we go. Then I had to use an
edge connector, which I received separately, to get access to the I²C
pins:&lt;/p&gt;
&lt;img alt="https://cdn.hackaday.io/images/3065641449081853661.jpg" src="https://cdn.hackaday.io/images/3065641449081853661.jpg" /&gt;
&lt;p&gt;I already had the_i2cslave_code that I’ve written for Raspberry Pi last time, so that part was
easier. So all I needed was to hook it up and test:&lt;/p&gt;
&lt;img alt="https://cdn.hackaday.io/images/3608111449081939724.jpg" src="https://cdn.hackaday.io/images/3608111449081939724.jpg" /&gt;
&lt;p&gt;Unfortunately, it didn’t work. The_i2c.write()_ function simply seemed to do nothing at all. I reported the issue,
and the good Micropython developers added error handling to it, so now
at least I could see an exception being raised. But it turned out to
be a generic I²C error, not really telling me what is wrong. I spent
the whole weekend trying different variations, adding pullup
resistors, checking if the accelerometer and compass that are on the
same I²C bus work (they did), etc. I also tested it multiple times
with Raspberry Pi, to make sure the error is on the micro:bit side:&lt;/p&gt;
&lt;img alt="https://cdn.hackaday.io/images/1072471449082320846.jpg" src="https://cdn.hackaday.io/images/1072471449082320846.jpg" /&gt;
&lt;p&gt;Finally, my week with micro:bit ended, and I had to send it to the
next person. So I packed the whole thing up and went to bed.&lt;/p&gt;
&lt;p&gt;I couldn’t sleep that night. Instead, I read the I²C specification and
the Atmel notes on using TWI on their AVR chips. The next day, I read
some helpful suggestions in the comments on the issue that I reported,
and noticed a curious thing. One of the comments in the C code for the
micro:bit DAL mentioned, that the I²C address is 8 bit. That’s
strange, because from the spec I knew that I²C uses 7 bit addresses,
and the least significant bit is used to indicate the direction of
communication. Hmm, wait a minute, if I tried and shifted the address
one bit to the left…&lt;/p&gt;
&lt;p&gt;I unpacked the board, hooked it up to my robot again and tried. And
sure enough, it just worked. Amazing. Don’t worry, this will be fixed
in the future, so that the final versions will all use 7 bit
addresses. But once I had it working, I couldn’t just pack it back and
send it. I wrote a quick e-mail to the next person apologizing for it,
and went to work. In the evening, I sat down and started to port the
inverse kinematics to Micropython.&lt;/p&gt;
&lt;p&gt;I wrote the IK code for my robots many times already, but each time
it’s an equally frustrating process of figuring out why the leg is
moving in the direction opposite to expected. It took me several
hours, but I finally did it.&lt;/p&gt;
&lt;iframe style="width: 500px; height: 281px;" width="500" height="281" src="//www.youtube.com/embed/VZ7vxIEno0o" frameborder="0" allowfullscreen="None"&gt;&lt;/iframe&gt;Then some more frustration while I tried to make the walking code
work. Here the challenge was not so much the code itself, because once
you know what the robot has to do, it's quite simple, but the fact
that I ran out of memory and stack space. I had to do a few unpythonic
things to my code to make it fit on this small board, but finally I
got a (very bad) gait working. So I strapped the micro:bit on top of
Tote, and let it walk:
&lt;iframe style="width: 500px; height: 281px;" width="500" height="281" src="//www.youtube.com/embed/SMqX_yPnfVI" frameborder="0" allowfullscreen="None"&gt;&lt;/iframe&gt;I know there is a lot that could be improved here. In fact, this is
quite horrible, compared to how Tote walks normally. This is not the
fault of micro:bit, but rather my sloppy programming and the fact that
I was in hurry.
&lt;p&gt;Once this was done, I packed the micro:bit up again and this time
really sent it to the next person in line.&lt;/p&gt;
&lt;p&gt;After this, Raspberry Pi should be a piece of cake :-)&lt;/p&gt;
&lt;/section&gt;
&lt;section id="i2c-slave"&gt;
&lt;h3&gt;I²C Slave&lt;/h3&gt;
&lt;p&gt;Created 2015-11-21.&lt;/p&gt;
&lt;p&gt;I have done a little bit of progress towards putting a Raspberry Pi on
Tote. You see, I didn’t want to make it communicate over serial,
because I’ve done that already with ESP8266 (see previous logs). This
time I wanted something more ambitious, so I decided to use I²C. As
the first step, I completely rebuilt one of my robot prototypes, to
use the new PCB and to also leave the top side of the PCB as flat as
possible – it only has the Pro Mini and the servo horns there, and
all the rest is on the bottom side. I also added a voltage regulator
giving a steady 5V, so that I can power the Raspberry Pi with it. The
Pro Mini still uses only 3.3V, but it’s fine with 5V, as it has an
internal regulator. Servos actually work better at 5V, as it’s within
its parameters, unlike the 3.7V, which was a bit low. Finally, I
replaced the 1S 3.7V LiPo battery with a 2S one, so that the regulator
has something to drop from (the boost converters that I have all have
a 500mA shutoff, so they are not suitable for powering 12 servos).&lt;/p&gt;
&lt;img alt="https://cdn.hackaday.io/images/8908951448135428477.jpg" src="https://cdn.hackaday.io/images/8908951448135428477.jpg" /&gt;
&lt;p&gt;Next, I will need the code for the Pro Mini to act as a I²C slave,
receive the positions and move the servos. For the moving servos part
I just reused the servo.ino code I already had for Tote. For the I²C
slave, I did something like this:&lt;/p&gt;
&lt;div class="highlight-cpp notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;#include &amp;quot;servos.h&amp;quot;#include &amp;lt;Wire.h&amp;gt;constint SLAVE_ADDRESS =0x04;voidsetup(){      Wire.begin(SLAVE_ADDRESS);      Wire.onReceive(receiveEvent);
servo_setup();  }voidloop(){      delay(100);  }voidreceiveEvent(int bytes){union {          byte bytes[4];float value;      } float2bytes;unsignedint servo = Wire.read() | Wire.read() &amp;lt;&amp;lt;8;for (int j =0; j &amp;lt;4; ++j) {if (!Wire.available()) {return; }          float2bytes.bytes[j] = Wire.read();      }
servo_move(servo, float2bytes.value);  }```

Nothing fancy or complicated, but it gets the job done. One thing I
could have done easier -- I&amp;#39;m sending the positions as floats, because
that&amp;#39;s what the functions I already had were accepting. I could have
instead make them work in µs, as most servo controllers out there, and
use simple integers. I might still switch to that, if it turns out to
be too slow, but for now this is good enough.

Next, I wrote some Python code on the Raspberry Pi side, to test if I
can actually move the servos:



```python
import smbusimport structimport math    bus = smbus.SMBus(1)  ADDRESS =0x04defservo_move(servo, radians=None, degrees=None):if radiansisNone:          radians = math.radians(degrees)
bus.write_block_data(ADDRESS, servo,          [ord(b)for bin struct.pack(&amp;#39;&amp;lt;f&amp;#39;, radians)])```

 After some small tweaks, it works. By the way, funny how
write_block_data requires a list of integers, not a string of bytes,
as the struct.pack() produces. Oh well.Once I had that tested, it&amp;#39;s time to wrap it in a class and plug into
my old Python gait code:



```python
import smbusimport structimport mathclassServo(object):def__init__(self, servos, index):          self.servos = servos          self.index = indexdefmove(self, radians=None, degrees=None):          self.servos.move(self.index, radians, degrees)classServos(object):def__init__(self, address=0x04, bus=1):          self.address = address          self.bus = smbus.SMBus(bus)def__getitem__(self, index):return Servo(self, index)defmove(self, servo, radians=None, degrees=None):if radiansisNone:              radians = math.radians(degrees)
self.bus.write_block_data(self.address, servo,              [ord(b)for bin struct.pack(&amp;#39;&amp;lt;f&amp;#39;, radians)])```

Then I assembled all the parts of the robot together, and it&amp;#39;s ready
to start walking:


:::{image} https://cdn.hackaday.io/images/1173681448136046223.jpg

:::


Except I decided to sit down and refactor the Python code a little bit
(and I need to adjust it to a different servo configuration, etc.), so
it&amp;#39;s still some time until it actually walks.





### Nothing Happens
Created 2015-11-05.

I have been a little bit busy with other things recently, and I didn&amp;#39;t
update this project for a while, so I thought that it&amp;#39;s time to write
something just to let you all know that it&amp;#39;s not abandoned.

The progress has been slow, and I don&amp;#39;t really have anything finished
to report -- otherwise there would be another log with a full
experiment in it. I did have some success with controlling Tote with a
Raspberry Pi model A+ over I²C, and it should also soon work with a
WiPy board instead of Arduino (I just need to write a servo library
for it, and that requires a stable timer API), but nothing to really
show yet.

Hopefully there will be more updates shortly.





### Another Batch of PCBs
Created 2015-10-22.

The last few weeks have been very busy, with all the conferences,
sickness, day job, etc. so I fell a little behind with my plan to have
regular experiments published here. Hopefully that will improve.

In the mean time, I ran out of boards for Tote (there are some people
wanting to build it, after all), so I ordered another batch from Dirty
PCBs. It&amp;#39;s still version 4 of the boards, but there are some small
improvements:


 * the PCB is thinner, so it&amp;#39;s lighter and leaves more room between the
servo horns and the screws,
 * there are more holes in it, which makes it even lighter, and hopefully
makes it easier to attach stuff,
 * the mounting holes are not metalized anymore, so harder to make a
short circuit,
 * the holes for the servo horns are slightly bigger, so the horns fit
easier.


:::{image} https://cdn.hackaday.io/images/2845691445507822912.jpg

:::






### Vertical Climb
Created 2015-09-25.

A small robot walking around your desk or even around your room on the
floor is one thing. The same robot climbing your furniture and able to
get everywhere in your room is a completely different game! That&amp;#39;s why
I always wanted to make Tote able to climb. Unfortunately, the problem
is harder than it seems at first sight.

One way of doing it is by using magnets on the feet. It limits you to
metal surfaces, but that&amp;#39;s a start. Today the magnets I ordered for
that purpose finally arrived, so I was able to do some experiments.
Unfortunately, the results are not very encouraging.

First, I attached the magnets to the robot. I figured that I want to
maximize the traction, while minimizing the force needed to actually
un-stick the leg, so I went for small flat magnets, and I wrapped them
into rubber from a balloon, then tied that to each leg.


:::{image} https://cdn.hackaday.io/images/2779621443167364903.jpg

:::


---------- more ----------Since the magnets seemed to be small and weak, I used two of them on
every foot initially. The effect wasn&amp;#39;t very good -- they turned out
to be too strong, and Tote couldn&amp;#39;t lift any of its feet:

&amp;lt;iframe style=&amp;quot;width: 500px; height: 281px;&amp;quot; width=&amp;quot;500&amp;quot; height=&amp;quot;281&amp;quot; src=&amp;quot;//www.youtube.com/embed/4jt5LtwM7lM&amp;quot; frameborder=&amp;quot;0&amp;quot; allowfullscreen=&amp;quot;None&amp;quot;&amp;gt;&amp;lt;/iframe&amp;gt;Fine, let&amp;#39;s try with fewer magnets then. That turned out to be just
strong enough to hold the robot when all four feet are touching the
metal surface, but not strong enough when on of the feet is raised:

&amp;lt;iframe style=&amp;quot;width: 500px; height: 281px;&amp;quot; width=&amp;quot;500&amp;quot; height=&amp;quot;281&amp;quot; src=&amp;quot;//www.youtube.com/embed/ECNVdPBbJJM&amp;quot; frameborder=&amp;quot;0&amp;quot; allowfullscreen=&amp;quot;None&amp;quot;&amp;gt;&amp;lt;/iframe&amp;gt;Oh well, nobody said it will be easy. Back to the drawing board now.
Maybe I will try to climb a net next time?





### Weight Lifting
Created 2015-09-04.

I&amp;#39;ve been recently asked how much weight can Tote carry. So far I had
to give a honest answer, that I don&amp;#39;t know. The heaviest I had it
carry was a pack of 4 AA batteries. So I decided to make a few tests.

Note, that this is a version of Tote that uses four SG92R servos for
its knees, and eight SG90 servos for all the other joints. The SG92R
servos are a little more expensive than SG90, but considerably
stronger. Otherwise, they have exactly the same shape, so can be a
drop-in replacement. Oh, and the plastic horns they come with are
black, which makes the robot look much cooler!


:::{image} https://cdn.hackaday.io/images/5236311441371158507.jpg

:::


---------- more ----------This is Tote under load of about 800g. As you can see, there is 600ml
of tea, plus the beaker and teabag, which themselves weight around
200g. With this load the robot shows visible effort and the battery
alarm will occasionally go off (but the robot doesn&amp;#39;t shut down, it
has to have low battery for longer time to shut down), but it holds.
The battery life probably isn&amp;#39;t too great, and I wouldn&amp;#39;t bet on it
getting through rough terrain with that load, but still quite
impressive.

Another question is, considering that Tote&amp;#39;s gait is statically
stable, can it just stop at any moment and wait for its batteries to
recharge? Will the servos collapse under the weight if they are un-
powered? Let&amp;#39;s try and see!




:::{image} https://cdn.hackaday.io/images/9038561441371399287.jpg

:::


This is the robot powered off, all legs on the ground. As you can see,
it&amp;#39;s about 400g of load, and it stands. So yes, it would probably be
possible to have it make several steps, then stop to recharge the
batteries, then continue.



### Making Tote without a PCB
Created 2015-09-03.

Seeing how most of robots based on or inspired by Tote don&amp;#39;t actually
use the original printed circuit board, I conclude that ordering one
is the main pain point. I don&amp;#39;t really see why, because it&amp;#39;s not very
expensive and the waiting time is about the same as with ordering the
servos and all the other parts. And it&amp;#39;s not like you won&amp;#39;t find a use
for the other 9 boards, as they are pretty much generic servo breakout
boards. They are just shaped in a way that makes it easy to attach the
legs. Anyways, I decided to explain how you can build Tote with just a
proto-board, like[#Tote in the Wild](/project/7473) and[#Micropython Quadruped Robot](/project/6877). Let&amp;#39;s start with the connections (note that the connections for your
IR sensor may be different):


:::{image} https://cdn.hackaday.io/images/4140411441297670400.png

:::


---------- more ----------As you can see, it&amp;#39;s not overly complicated. The board needs to be
19x19 holes to keep the original dimensions of Tote -- if you change
that, you will need to change the_BASE_ variable in the code, so that the robot knows how big it is. If you
don&amp;#39;t like to make so many connections with wires, you can also use a
strip board and cut some of the strips.\


Note one trick though. The pin 13 of the Pro Mini is not used for a
servo -- there is a gap in there. That&amp;#39;s because it has a LED on it,
and we want to be able to use it for signaling.

I also skipped the battery voltage monitoring circuit, so you will
have to comment that section in the code, or your robot will keep on
shutting down randomly for no reason.

Next comes the mechanical part. You need to drill (or otherwise make)
the holes for mounting the servos. You can use an electric drill, a
dremel (like me), or even simply a metal file.[I made a handy template](https://bitbucket.org/thesheep/tote/downloads/tote-body.pdf) that you can print out and glue to your board to get the holes right,
but it&amp;#39;s really quite simple. Four 7mm holes in the corners, and eight
small holes for the screws:


:::{image} https://cdn.hackaday.io/images/11441298191321.jpg

:::


And that&amp;#39;s pretty much it. Solder all the headers and parts, make the
connections, check with a multi-meter for short circuits, and you are
ready to go.You can also easily adapt for other microcontroller boards than the
Pro Mini, of course.





### Totes in the Wild
Created 2015-08-28.

The main goal of all this work I&amp;#39;m doing on Tote is to make people
build their own robots. The idea is that they can start with Tote (or
the elements of Tote that they like), and grow from there.
Unfortunately, so far nobody that I know of decided to try it. Until
recently.

I got e-mails from at least two people who are now working on their
robots more or less based on Tote.

---------- more ----------The first one is[#Micropython Quadruped Robot](/project/6877) built by[@wagner](/hacker/38882). He used a permaboard instead of a PCB for the body, and translated
the walking code from C++ into Micropython, to use with his pyBoard.
Last time I heard from him he still had some problems with the code,
but I hope he will get them resolved.

The second robot,[#Tote in the Wild](/project/7473), made by[@Over.Unity](/hacker/89265), also uses a permaboard for its body, but uses a Pro Mini just like
Tote. I got permission to show you[a gallery of photos of the robot](http://s1257.photobucket.com/user/over_unity123/library/Tote?sort=3&amp;amp;page=1). It walks around pretty well now!

I&amp;#39;ve also seen some comments under the[post on Hackaday.com](http://hackaday.com/2015/06/03/hackaday-prize-entry-solving-the-shortage-of-walking-robots/) from people thinking about building their robots, but I&amp;#39;ve never
heard from them again. If you are building a robot based on or even
just inspired by Tote, please let me know! I&amp;#39;d love to hear about it,
and see photos and videos of it.

Update:[#Tote in the Wild](/project/7473) has its project page now and is finished.





### Out of the Prize
Created 2015-08-25.

This project is not one of the 100 projects that qualified to the
semifinals of the Hackaday Prize 2015. And no wonder, with 900 of
great projects that entered, the chances were slim. It was still great
fun to participate and I won some very nice swag in the process! Keep
on tracking the contest, as it will only get more interesting with
time.

Of course that doesn&amp;#39;t mean anything bad for this project. I would
have worked on it exactly the same (well, maybe I wouldn&amp;#39;t put wheels
on the robot or make a dedicated controller) if there was no prize
whatsoever. The real goal is to make it easier for people to get
started with a walking robot and to finally get those robots into our
homes.

---------- more ----------If you like this project and its goals, there is a similar one that
qualified, that you can track and support:[#The Kasei Initiative](/project/6418). It&amp;#39;s on a little earlier stage, but the goals are even more
ambitious!

There are also other robotics projects:


 * [#3D Printable Robot Arm](/project/3800)
 * [#Affordable, Programmable Robot Arm](/project/945)
 * [#BowlerStudio: A robotics development platform](/project/6423)
 * [#Health Maintenance Robot](/project/4738)
 * [#Lazy Cleaner 9000](/project/4606)
 * [#MeArm - Your Robot](/project/181)
 * [#OSCAR: Omni Service Cooperative Assistant Robot](/project/7284)
 * [#Project R](/project/1615)
 * [#Rapidly Deployable Automation System](/project/6647)

I will be watching them through the rest of the contest and keeping my
fingers crossed for them. Good luck, and make those robots better for
all of us!





### Proprioception Revisited: Touch
Created 2015-08-15.

Sensing the positions of limbs and the forces acting on them is just
part of the proprioception, there is also the sense of touch and the
inner ear. Today we will do touch.

I spent a really long time looking for the right touch sensor for the
robot&amp;#39;s feet. Everything I tried was either too imprecise, too hard to
trigger, too unreliable or too hard to build. I needed something off-
the shelf that I could put on the end of the leg and that would tell
me whether it&amp;#39;s touching the ground or not. Seems easy.

---------- more ----------The obvious first choice is microswitch pushbuttons, similar to that
reset switch on the Pro Mini. Small, light, easy to install, simple,
reliable. Except the force you have to use to make one &amp;quot;click&amp;quot; is way
too large for Tote&amp;#39;s mass. It can basically stand on them and still
have them off.

Second, endstop switches. The ones with a lever. Turns out that they
have pretty large travel, and that it&amp;#39;s hard to attach them such that
the lever is at the right angle. And if you remove the lever to make
the travel smaller, they become too hard to trigger, like the
pushbuttons.

Then came a lot of more exotic solutions. Force sensors from kitchen
scales are way too expensive and too large. Bend sensors are too
unreliable, and would require an opamp to actually detect the
difference with Arduino&amp;#39;s ADC. I had some limited success with a
whisker in a metal tube, but that was definitely too hard to make for
regular people. I even tried an optical sensor, but that only worked
on flat surfaces, which kinda misses the whole point.

Finally, someone pointed me to a website of an electronics parts store
where you can search the switches by the force required to switch
them, and turns out there are switches that only require 0.3N! They
are not pushbuttons or endstops, though. They are used for detecting
whether a card is inserted into a slot. Once I knew that, I easily
found and ordered those babies:


:::{image} https://cdn.hackaday.io/images/842901439652196480.jpg

:::


They are perfect for mounting at the tips of the robot&amp;#39;s legs. See
those plastic studs? They fit perfectly into the holes on that servo
horn! And they are super-sensitive!

So add some wires, glue the switches to the legs, connect them all in
series and attach to a free pin on the Arduino (since at most one leg
is in the air at any given time, I only need one pin), and voila, a
robot with a sense of touch:


:::{image} https://cdn.hackaday.io/images/1721441439652461744.jpg

:::


Of course we also need software to make use of those sensors. For now
I went with something really simple -- just keep lowering the leg
slowly until it touches the ground. You can see the code in[the &amp;quot;switches&amp;quot; branch](https://bitbucket.org/thesheep/tote/src/80f55d5a512f389c991f28f3e281c279de9f15d6/start/creep.ino?at=switches#creep.ino-102). And the effect? See for yourself:

&amp;lt;iframe style=&amp;quot;width: 500px; height: 281px;&amp;quot; width=&amp;quot;500&amp;quot; height=&amp;quot;281&amp;quot; src=&amp;quot;//www.youtube.com/embed/-KoazMHrplg&amp;quot; frameborder=&amp;quot;0&amp;quot; allowfullscreen=&amp;quot;None&amp;quot;&amp;gt;&amp;lt;/iframe&amp;gt;If you look closely you will notice, that even after the robot extends
the leg far down because it didn&amp;#39;t find the floor, it moves it back to
its default position anyways -- that&amp;#39;s why the robot&amp;#39;s body stays at
the same height even several steps, despite the imprecision of the
switches. To make this actually useful, one would need to modify the
gait code to keep the body at constant height relative to the average
of the heights of all the legs. I will leave that as an exercise for
the reader, though (or a future experiment log).





### Hackaday Prize Quaterfinals Video
Created 2015-08-15.

&amp;lt;iframe width=&amp;quot;500&amp;quot; height=&amp;quot;281&amp;quot; src=&amp;quot;//www.youtube.com/embed/_RqtMg66i5g&amp;quot; frameborder=&amp;quot;0&amp;quot; allowfullscreen=&amp;quot;&amp;quot;&amp;gt;&amp;lt;/iframe&amp;gt;I decided to make it a bloopers video, showing the stages of
development of this robot and how it reached the current form. Enjoy!





### Version 4 of PCB Documented
Created 2015-08-15.

After building two prototypes and testing them, I decided to make the
version 4 of the PCB the default in[the documentation](http://tote.readthedocs.org/). There are also[updated assembly instructions](http://tote.readthedocs.org/en/latest/assembly_v4.html) with lots of photos. Don&amp;#39;t worry, the[instructions for the old boards are still there](http://tote.readthedocs.org/en/latest/assembly_v2.html).





### Licenses
Created 2015-08-14.

To be eligible for the Hackaday Prize, I have to explicitly document
the licenses for everything. So here it goes.


 * All the work I did myself, including the guide at[http://tote.rtfd.org](http://tote.rtfd.org), the source code for the base and all the experiments, and the PCB
designs, is licensed under a Creative Commons Attribution-
NonCommercial 4.0 International License. See[http://creativecommons.org/licenses/by-nc/4.0/](http://creativecommons.org/licenses/by-nc/4.0/) for details.
 * The Arduino libraries which I depend upon are licensed under the LGPL
license.
 * The IRLRemote library by Nicohood, which I use for remote control, is
licensed under MIT license.
 * There is no other copyright-able material, that I know of, included in
this project.





### System Diagram
Created 2015-08-14.

This is the diagram of my plan to improve the worldwide robot
situation:


:::{image} https://cdn.hackaday.io/images/7679251439549321683.jpg

:::


I couldn&amp;#39;t find a napkin, so instead I sketched it on a block of
paper. Anyways, there are three &amp;quot;input&amp;quot; components. First are the
detailed build instructions for the robot, that account for most of
the hurdles and traps waiting for a beginner roboticist. I&amp;#39;m working
on them at[http://tote.rtfd.org](http://tote.rtfd.org) and I keep improving them. Then there are the example experiments and
hacks that I publish here at Hackaday.io, that are supposed to inspire
and get people started. And finally we also need a source of
affordable parts, that part is mostly covered by China, but on our
side I need to test and document them too. The expected results are
also three-fold. First, we will see an increase in people who want to
work on robots professionally and make it their career choice. Second,
if enough people are experimenting with this, there are bound to pop
up some discoveries on how to build use those robots. Finally, part of
the energy will come back and improve the project itself, making it
even more effective at those goals.





### New New Board in the Wild
Created 2015-08-12.

So the version 4 printed circuit boards arrived a few days ago (no,
that&amp;#39;s not super-fast shipping from China, I just waited several weeks
before even writing about them). I&amp;#39;m almost perfectly happy with them,
so far I only came up with two small things I want to change. Probably
not enough to make another version.


:::{image} https://cdn.hackaday.io/images/5633101439376955396.jpg

:::


---------- more ----------

This time the board is bigger and the servo horns are not attached
diagonally -- they fit within the board. The holes for the horns
should be a little bit larger (depends on what servos you get, some of
them fit perfectly) and not metalized, but that&amp;#39;s something you can
fix easily with a file. The board on the photo has all the parts
soldered on one side of the board -- because I want to have the Pro
Mini pluggable there. It&amp;#39;s possible to also put the servo sockets and
capacitor below, and have the top of the robot almost flat, then make
use of all those mounting holes.


:::{image} https://cdn.hackaday.io/images/6946751439377231590.jpg

:::


The finished robot is quite nice, and it&amp;#39;s sturdier than the previous
versions. Also much easier to assemble. I still need to fine-tune the
leg positions on this one, and add the IR sensor.





### New New Printed Circuit Board
Created 2015-08-01.

You know how it is. As soon as you get your hands on the new PCB and
assemble another prototype to test it, you get a million ideas for
improvements to it. That&amp;#39;s what happened when I got the version 3 of
the Tote&amp;#39;s body, and it lead to a complete overhaul in version 4.


:::{image} https://cdn.hackaday.io/images/2318771438434731294.png

:::


---------- more ----------The most obvious change is the size. So far all the Tote&amp;#39;s PCB were
38×38mm, simply because that size works well. But the servo horns
stick out of the PCB quite far, so the robot is in fact bigger than
that. Why not reclaim that space to have more room for all the
components? Version 4 of the PCB is now 49×49mm, taking advantage of
the maximum size of the board I can order cheaply. The spacing of legs
is exactly the same, and there are holes there for the servo horns.
That not only makes the whole construction a little bit more rigid,
but also lets me attach the servo horns in parallel, instead of
diagonally, reclaiming some of the precious space on the board, and
making possible a host of other small improvements.

All components are now on a single side of the board, and the only
traces that are on the bottom layer are ground. That means, that the
whole bottom layer of the board is practically one huge ground fill.
The switch and the battery plug are now located in easily accessible
places. All the free pins are broken out in one large matrix, which
also has easy access to ground, battery power and stabilized power, so
that you can connect any sensors in there easily. I dropped the
dedicated spot for an IR sensor, you just connect it on pin 2 as you
would with any other sensor. That means that you will need to cross
the sensor&amp;#39;s legs again, unfortunately, though.

There is also a number of holes in the board for making it easier to
add another board or to mount the sensors.

I&amp;#39;m still waiting for the board to arrive from the factory, I hope it
will make it before the Hackaday Prize deadline. As soon as it
arrives, I will make another prototype (I think I will have to
disassemble one of the older ones for the servos).

By the way, don&amp;#39;t be fooled by a relatively low version number of this
board! Before I started numbering them, there were lots of prototypes.
I made a photo of most of the old boards that at some point were used
in this robot:


:::{image} https://cdn.hackaday.io/images/1457071438436095243.jpg

:::


That of course doesn&amp;#39;t include the boards that are still sitting
inside their robots.



### Follow Me, I Say!
Created 2015-07-30.

I didn&amp;#39;t have much time to work on Tote this week, but since the
sensors arrived, I will at least finish the &amp;quot;follow me&amp;quot; log.

This time the sensors I got[GP2Y0A60SZLF Pololu modules](https://www.pololu.com/product/2474),  which are specified to work from 2.7V. Hacks like the previous two
attempts will sometimes work, but as you can see, often not, and you
shouldn&amp;#39;t rely on them.

This sensor works beautifully though. Here&amp;#39;s my testing rig:


:::{image} https://cdn.hackaday.io/images/7331021438284585367.jpg

:::


---------- more ----------And here are the results:\


&amp;lt;table &amp;gt;&amp;lt;tbody &amp;gt;&amp;lt;tr &amp;gt;&amp;lt;td &amp;gt;Distance&amp;lt;/td&amp;gt;&amp;lt;td &amp;gt;Reading&amp;lt;/td&amp;gt;&amp;lt;/tr&amp;gt;&amp;lt;tr &amp;gt;&amp;lt;td &amp;gt;50&amp;lt;/td&amp;gt;&amp;lt;td &amp;gt;20&amp;lt;/td&amp;gt;&amp;lt;/tr&amp;gt;&amp;lt;tr &amp;gt;&amp;lt;td &amp;gt;45&amp;lt;/td&amp;gt;&amp;lt;td &amp;gt;68&amp;lt;/td&amp;gt;&amp;lt;/tr&amp;gt;&amp;lt;tr &amp;gt;&amp;lt;td &amp;gt;40&amp;lt;/td&amp;gt;&amp;lt;td &amp;gt;122&amp;lt;/td&amp;gt;&amp;lt;/tr&amp;gt;&amp;lt;tr &amp;gt;&amp;lt;td &amp;gt;35&amp;lt;/td&amp;gt;&amp;lt;td &amp;gt;174&amp;lt;/td&amp;gt;&amp;lt;/tr&amp;gt;&amp;lt;tr &amp;gt;&amp;lt;td &amp;gt;30&amp;lt;/td&amp;gt;&amp;lt;td &amp;gt;243&amp;lt;/td&amp;gt;&amp;lt;/tr&amp;gt;&amp;lt;tr &amp;gt;&amp;lt;td &amp;gt;25&amp;lt;/td&amp;gt;&amp;lt;td &amp;gt;317&amp;lt;/td&amp;gt;&amp;lt;/tr&amp;gt;&amp;lt;tr &amp;gt;&amp;lt;td &amp;gt;20&amp;lt;/td&amp;gt;&amp;lt;td &amp;gt;423&amp;lt;/td&amp;gt;&amp;lt;/tr&amp;gt;&amp;lt;tr &amp;gt;&amp;lt;td &amp;gt;15&amp;lt;/td&amp;gt;&amp;lt;td &amp;gt;597&amp;lt;/td&amp;gt;&amp;lt;/tr&amp;gt;&amp;lt;tr &amp;gt;&amp;lt;td &amp;gt;10&amp;lt;/td&amp;gt;&amp;lt;td &amp;gt;900&amp;lt;/td&amp;gt;&amp;lt;/tr&amp;gt;&amp;lt;tr &amp;gt;&amp;lt;td &amp;gt;5&amp;lt;/td&amp;gt;&amp;lt;td &amp;gt;1020&amp;lt;/td&amp;gt;&amp;lt;/tr&amp;gt;&amp;lt;/tbody&amp;gt;&amp;lt;/table&amp;gt;As you can see, they don&amp;#39;t repeat and use pretty much all the scale
from 0 to 1023. Perfect.

Now, let&amp;#39;s just modify our program a little, using the new values for
the readings:

```cpp
voidsharp_loop(){int distance =0;for (unsignedchar i=0; i&amp;lt;10; ++i) {          distance += analogRead(A4);      }      distance /=10;if (distance &amp;gt;700) {          creep_dx =0;          creep_dy = -1;          creep_rotation =0;          beep(352,100);      }elseif(distance &amp;gt; 520){          creep_dx =0;          creep_dy =0;          creep_rotation =0;      }elseif(distance &amp;gt; 260){          creep_dx =0;          creep_dy =1;          creep_rotation =0;          beep(704,100);      }else {          creep_dx =0;          creep_dy =0;          creep_rotation = PI/45;          beep(1408,100);      }  }```

And here we go:&amp;lt;iframe style=&amp;quot;width: 500px; height: 281px;&amp;quot; width=&amp;quot;500&amp;quot; height=&amp;quot;281&amp;quot; src=&amp;quot;//www.youtube.com/embed/1I-EeEPEjx8&amp;quot; frameborder=&amp;quot;0&amp;quot; allowfullscreen=&amp;quot;None&amp;quot;&amp;gt;&amp;lt;/iframe&amp;gt;There still can be a lot of improvements. Instead of rotating in one
direction, the robot could first just rotate its body left and right
to see if the target is still there. I could use some timeouts between
switching into the &amp;quot;search&amp;quot; mode, so that it doesn&amp;#39;t switch back and
forth constantly. The speed could be adjusted depending on the actual
distance, etc. I will leave those as homework, though.





### Follow Me!
Created 2015-07-24.

Some time ago I got the[Sharp distance sensor to work with Tote](https://hackaday.io/project/6050-tote-affordable-spider-robot/log/20790-distance-sensor-second-try) (somewhat), and I promised we will do something interesting with it.
Obstacle avoidance is old, so let&amp;#39;s try to make the robot follow us
instead. The idea is actually very similar to obstacle avoidance,
except that instead of avoiding obstacles, you go toward them.

So what&amp;#39;s the plan? We want our robot to behave differently depending
on what the distance sensor is telling it:


 * If the obstacle is very close, go backwards;
 * if the obstacle is close, stay in place and do nothing;
 * if the obstacle is far, go forward;
 * finally, if there is no obstacle in sight, rotate in place to find it.

This translates pretty easily into code:

```cpp
voidsharp_loop(){int distance = analogRead(A4);if (distance &amp;gt;660) {          creep_dx =0;          creep_dy = -1;          creep_rotation =0;          beep(352,100);      }elseif(distance &amp;gt; 480){          creep_dx =0;          creep_dy =0;          creep_rotation =0;      }elseif(distance &amp;gt; 420){          creep_dx =0;          creep_dy =1;          creep_rotation =0;          beep(704,100);      }else {          creep_dx =0;          creep_dy =0;          creep_rotation = PI/45;          beep(1408,100);      }  }```

---------- more ----------I also added some beeps in there, that will tell us what the current
state is. Since the new PCB has a place for a piezo buzzer on pin 13,
I also added it to the previous robots:


:::{image} https://cdn.hackaday.io/images/9149541437741274409.jpg

:::


But how does our code work? Turns out, that it doesn&amp;#39;t work very well.
The problem comes from how our 5V sensor works when it&amp;#39;s under-powered
with 3.3V. Remember the plot of values from last time?


:::{image} https://cdn.hackaday.io/images/8548111437741395294.png

:::


It&amp;#39;s U-shaped, and that means that we get the same reading both for
20cm and for 50cm and more. That means that we have practically no way
to tell if something is 20cm away or 50cm away, and that means that we
can&amp;#39;t reliably get the &amp;quot;no obstacle in sight&amp;quot; condition.

Even if we shorten our distances to where the curve is relatively
straight, we are still going to get weird readings when nothing is
that close.

Oh well, the sensor was cheap so it was worth a try. I guess this is a
lesson: don&amp;#39;t try to use parts outside of their specified parameters.
Now I ordered some distance sensors that work between 2.7 and 5.5V, so
that should be better. I will try again when they arrive.

Finally, a video of Tote failing to follow my hand:

&amp;lt;iframe style=&amp;quot;width: 500px; height: 281px;&amp;quot; width=&amp;quot;500&amp;quot; height=&amp;quot;281&amp;quot; src=&amp;quot;//www.youtube.com/embed/u7CzJw-UeYg&amp;quot; frameborder=&amp;quot;0&amp;quot; allowfullscreen=&amp;quot;None&amp;quot;&amp;gt;&amp;lt;/iframe&amp;gt;



### Testing The New Printed Circuit Board
Created 2015-07-21.

The[new PCBs](http://dirtypcbs.com/view.php?share=8923&amp;amp;accesskey=8b094bbc0000d8c4912eef9a90965aac) just arrived from[Dirtypcbs](http://dirtypcbs.com) and I started to test them. This is version three of the board, and[most of the improvements are really just for convenience or aesthetics](https://hackaday.io/project/6050-tote-affordable-spider-robot/log/20019-pcb-redesign).


:::{image} https://cdn.hackaday.io/images/8269681437488977992.jpg

:::


---------- more ----------So, this time there seem to be no errors on the board (last time I got
boards with solder mask applied to some of the SMD pads). The picture
doesn&amp;#39;t really look as good as I hoped, but that&amp;#39;s fine. Time to
assemble the electronics and see if the robot works:\



:::{image} https://cdn.hackaday.io/images/5299701437489143374.jpg

:::


Along the way I also made a lot of photos, so I will probably be
updating the assembly manual with them soon.Once I started to add the servomechanisms, I noticed that the mounting
holes on the board are spaced wrong for the servo horns that I have.
Strange. I compared them with the previous boards, and the holes are
spaced the same. So it&amp;#39;s the horns. Turns out that those cheap servos
come with wildly varying horns, depending on where you order them and
what batch they are from. I had to modify mine a little:


:::{image} https://cdn.hackaday.io/images/8954961437489571733.jpg

:::


The next version of the PCB will definitely have to have the holes
spaced a little bit farther apart, so as to be closer to the average
for those horns. I think I will also make the holes a little bit
larges, so that you don&amp;#39;t have to use so much force when screwing in
the screws. Lastly, while moving the battery connector was a good
idea, the switch is still in an inconvenient place next to a leg. I
wonder if I could place it better somehow.



### Cheap Chinese STM32 Boards
Created 2015-07-16.

We already saw that Tote can work with a Pro Mini, Pro Micro or Teensy
3.1 as its brains. The Teensy is especially interesting, as it gives
us a lot of pins for additional sensors and effectors. But it&amp;#39;s quite
expensive. Could we maybe use a cheaper ARM board instead?

Turns out we can. Digging through my parts box, I found a &amp;quot;blue pill&amp;quot;
board that I ordered some time ago from China for $4. It&amp;#39;s an STM32
Cortex-m3 microcontroller on a relatively small development board. A
little bigger than Teensy, but still compatible with the 600mil DIM
sockets, so the same as the Pro Minis and Teensy. Of course, the
pinout is not compatible, so I would need to make a custom board, or
do the same trick I did with Teensy -- use wires to connect to the
right pins.


:::{image} https://cdn.hackaday.io/images/6606801437063124752.jpg

:::


---------- more ----------But how do I program it? Do I need a JTAG programmer, a complex setup
for cross-compiling to ARM and a complicated GDB configuration? Turns
out that I don&amp;#39;t, because there is the[stm32duino](http://www.stm32duino.com/) project! And they even have a step-by-step YouTube video on how to
program that board:

&amp;lt;iframe style=&amp;quot;width: 500px; height: 281px;&amp;quot; width=&amp;quot;500&amp;quot; height=&amp;quot;281&amp;quot; src=&amp;quot;//www.youtube.com/embed/Ze6q6NidS5w&amp;quot; frameborder=&amp;quot;0&amp;quot; allowfullscreen=&amp;quot;None&amp;quot;&amp;gt;&amp;lt;/iframe&amp;gt;Turns out it&amp;#39;s very simple and works like a charm. They also have the
pinout of that board[on their forum](http://www.stm32duino.com/viewtopic.php?f=28&amp;amp;t=117):


:::{image} https://cdn.hackaday.io/images/1925191437063394286.png

:::


That should make it all much easier. Unfortunately, that pinout
doesn&amp;#39;t say which pins support PWM and thus are suitable for use with
the Servo library. I had to get them by trial and error, which is what
I spent the bulk of my time on. But ultimately I came up with a
working set of pins, which I put in the[servo.ino](https://bitbucket.org/thesheep/tote/commits/162ec23c4fbeadc1ddd0feea622ca22ff2a53662) of the code that worked for Teensy 3.1. And it works. I will skip the
video this time, because it looks exactly the same as the one with
Teensy, so you can go and watch that one instead.





### Custom Controller
Created 2015-07-11.

The newest Hackaday Prize Hot List is about human interfaces, so I
decided to work on that a little over the weekend. I found an analog
joystick module lying around, so I&amp;#39;m going to try and make a custom
controller for Tote.


:::{image} https://cdn.hackaday.io/images/9284321436614588349.jpg

:::


---------- more ----------First a quick test. The joystick has two pots for the position, and a
button for pushing down the hat. That means we can have two modes, one
for walking around, and one for changing the body posture. For a quick
test, I connected it to a Pro Mini and tested with this simple Arduino
sketch:

```cpp
void setup() {      Serial.begin(115200);      pinMode(A0, INPUT);      pinMode(A2, INPUT);      pinMode(12, INPUT_PULLUP);  }voidloop() {      Serial.print(analogRead(A0));      Serial.print(&amp;quot;, &amp;quot;);      Serial.print(analogRead(A2));      Serial.print(&amp;quot;, &amp;quot;);      Serial.println(digitalRead(12));      delay(300);  }```

It seems to be working perfectly. Next, I need an IR diode, for
sending the signal to Tote. Quick rummaging through my parts box, and
I found one, and a 100Ω resistor for it (the LED calculator says it
should be 90Ω, but I couldn&amp;#39;t find any).
:::{image} https://cdn.hackaday.io/images/2052811436629226337.jpg

:::


 I also took another Pro Mini with an IR receiver and sample code to
read the IR signals, for debugging. Now, my initial idea was to send
the joystick position encoded as two bytes in the command (button
code), and the state of the button would change the &amp;quot;address&amp;quot; part of
the signal. Turns out it&amp;#39;s not that simple.

The two bytes in the command code are not just arbitrary bytes. One
has to be negation of the other. So effectively I only have one byte
that I can send. So I decided to send two separate commands, with
different addresses, one for the x, and one for the y. The code for
that is quite simple:

```cpp
    switch (IRaddress) {case IR_ADDRESS:              tv_remote(IRcommand);              last = IRcommand;break;case0xFA10:              creep_dx = -(0.0 +                           (IRcommand &amp;amp;0xFF) -128) /42.5;break;case0xFA00:              creep_rotation = (0.0 +                                (IRcommand &amp;amp;0xFF) -128) /3652.605943958998;break;case0xFA11:              creep_height = min(TIBIA *1.25,                  max(TIBIA *0.25,                      creep_height + (0.0 + (IRcommand &amp;amp;0xFF) -128) /64));break;case0xFA01:              creep_dy = (0.0 + (IRcommand &amp;amp;0xFF) -128) /42.5;break;      }```

Additionally, if the button on the joystick is pressed, you get
different functions -- walking sideways and changing the robot height.
All this added to[ir.ino](https://bitbucket.org/thesheep/tote/src/22662daa9d26d7cddd83226e1e6ace775f2ed8c1/start/ir.ino?at=irjoy). All that was left was to put all the parts, together with a battery,
in a box:


:::{image} https://cdn.hackaday.io/images/1091771436629637404.jpg

:::


Some stickers taken from LiPo cells complete the look. Here&amp;#39;s the
controller in action:

&amp;lt;iframe style=&amp;quot;width: 500px; height: 281px;&amp;quot; width=&amp;quot;500&amp;quot; height=&amp;quot;281&amp;quot; src=&amp;quot;//www.youtube.com/embed/uX7K6_ChTmM&amp;quot; frameborder=&amp;quot;0&amp;quot; allowfullscreen=&amp;quot;None&amp;quot;&amp;gt;&amp;lt;/iframe&amp;gt;



### Distance Sensor, Second Try
Created 2015-07-10.

Seonsors are very important for robots, and a distance sensor is one
of the most useful ones that you can install, as it gives the robot an
approximation of vision. I tried to use an ultrasound distance sensor
with Tote before, and failed miserably. This time I&amp;#39;m going to use an
infra-red distance sensor.

The[Sharp 2Y0A21](http://sharp-world.com/products/device/lineup/data/pdf/datasheet/gp2y0a21yk_e.pdf)[](http://sharp-world.com/products/device/lineup/data/pdf/datasheet/gp2y0a21yk_e.pdf) [pdf] sensor is probably one of the most popular hobby robot sensors
out there, right after the ultrasonic one. But it takes 5V as the
power supply. Will it work at our robot&amp;#39;s 3.3V? Let&amp;#39;s find out!


:::{image} https://cdn.hackaday.io/images/716781436553286513.jpg

:::


---------- more ----------Connecting this sensor is easy. There are three cables: red for power,
black for ground and yellow for the sensor output. The voltage on the
output wire will vary depending on the distance being read by the
sensor, so we have to connect it to an analog pin. The easiest way to
use that sensor with Tote is to plug the wires into the I²C pin
header, as both of the I²C pins of the Pro Mini are, by coincidence,
also analog pins, and we have convenient 3.3V power and ground it
there too. The photo above shows how to connect it.

Now, the first test. Does it even start when powered with 3.3V? There
is an easy way to check any infra-red devices -- just look at them
through a digital camera. The camera sensors are much more sensitive
to infra-red light than our eyes, and will show you a shining LED.
Test passed.

Next, let&amp;#39;s try to get some readings and calibrate the sensor. I&amp;#39;m
powering it with out-of-spec power, so anything written in the
datasheet will most likely be completely wrong. We need to do our own
calibration. We can do this with this extremely complex Arduino
sketch:



```cpp
voidsetup(){      Serial.begin(115200);      pinMode(A4, INPUT);  }voidloop(){      Serial.println(analogRead(A4));      delay(300);  }```

It will basically repeatedly read the analog pin value and print it on
the serial line. We can use the Arduino IDE&amp;#39;s serial monitor to see
those values. A quick test and yay, we are getting readings, and they
are different depending on the distance. So far so good.


:::{image} https://cdn.hackaday.io/images/1619621436553858490.jpg

:::


The photo above shows my testing rig. A long ruler, the sensor taped
to one end, and a reasonably reflective white object. Note, that the
power line from the USB2TTL is disconnected and the Pro Mini is
running on the battery power, so that it gets to regulate its own 3.3V
for the sensor, and doesn&amp;#39;t rely on the power from the computer. Here
are the measurements I did, plotted on a chart:


:::{image} https://cdn.hackaday.io/images/6856891436554041118.png

:::


As you can see, the sensor has a much shorter useful range than the
80cm it gets on 5V. At about 35cm it starts to break already. But
that&amp;#39;s fine, 35cm is a lot for our robot. We also won&amp;#39;t need exact
measurements, so no need to convert those numbers to centimeters -- we
will just read the chart for setting our limits.Next, let&amp;#39;s actually attach the sensor to our robot and make it do
something. Of course, the simplest thing it can do is to stop before
it hits an obstacle.


:::{image} https://cdn.hackaday.io/images/3268571436554231854.jpg

:::


I used adhesive tape to attach the sensor to the front of the robot. I
might come up with a better way of doing it in the future, but this is
good enough for now. Now let&amp;#39;s add some code that does the stopping.
We just add a[_sharp.ino_](https://bitbucket.org/thesheep/tote/src/52697d7f12c87825ac4579f371ccd22bdd2151bc/start/sharp.ino?at=sharp) file, with corresponding_sharp.h_, and call it all from[_start.ino_](https://bitbucket.org/thesheep/tote/src/9aa456eb0395f03c488d6ef61da6a31f7e39ff4d/start/start.ino?at=sharp). And let&amp;#39;s see the results:&amp;lt;iframe style=&amp;quot;width: 500px; height: 281px;&amp;quot; width=&amp;quot;500&amp;quot; height=&amp;quot;281&amp;quot; src=&amp;quot;//www.youtube.com/embed/WR_0yxW_Ba0&amp;quot; frameborder=&amp;quot;0&amp;quot; allowfullscreen=&amp;quot;None&amp;quot;&amp;gt;&amp;lt;/iframe&amp;gt;It works as expected, the robot consistently stops at about 15cm from
the obstacle. That&amp;#39;s it for today, in the future I will show how to
code a simple obstacle-avoiding algorithm, and then how to make the
robot follow you around.





### Logicoma-kun
Created 2015-07-07.

The continuous-rotation servos arrived, and I got to finish another of
my experiments,[which I mentioned previously](https://hackaday.io/project/6321-katka-a-mammalian-robot/log/20293-spider-mode) over at the[#Katka, a mammalian robot](/project/6321) project. Since I&amp;#39;m re-using parts and experience between all those
projects, it becomes harder to separate them. This one might even grow
out into its own project, but for now I will publish it here, as it&amp;#39;s
basically Tote with a slightly different leg configuration and
software.

Remember the cute tank-robots from Masamune Shirow&amp;#39;s mangas? First
Fuchikomas, then Tachikomas. Now, in the newest TV series, there is a
new addition to the family called Logicoma. And it&amp;#39;s much more, hmm,
shall I say &amp;quot;realistically&amp;quot;, designed than the others -- in fact, I
thought that I might be able to build a model of it out of Tote.


:::{image} https://cdn.hackaday.io/images/3053521436274374167.jpg

:::


---------- more ----------Since with the Arduino Pro Mini I&amp;#39;m limited to 12 servos, I had to
find a way to reduce the number of servos and still get proper
walking. My experiments with[#Katka, a mammalian robot](/project/6321) allowed me to do that, so I used the 4 free servo slots for 4
continuous-rotation servos placed at the ends of the legs.[I could actually have converted the SG90 servos instead](http://letsmakerobots.com/content/how-modify-micro-servo-continuous-rotation), but I didn&amp;#39;t have the round servo horns for the wheels, so I decided
to just order ready servos.

For now, just for testing, I have two separate programs, one for just
driving forward:

&amp;lt;iframe style=&amp;quot;width: 500px; height: 281px;&amp;quot; width=&amp;quot;500&amp;quot; height=&amp;quot;281&amp;quot; src=&amp;quot;//www.youtube.com/embed/WvPRhwA7Aa0&amp;quot; frameborder=&amp;quot;0&amp;quot; allowfullscreen=&amp;quot;None&amp;quot;&amp;gt;&amp;lt;/iframe&amp;gt;And one for walking forward:

&amp;lt;iframe style=&amp;quot;width: 500px; height: 281px;&amp;quot; width=&amp;quot;500&amp;quot; height=&amp;quot;281&amp;quot; src=&amp;quot;//www.youtube.com/embed/2LjSKvdbtPk&amp;quot; frameborder=&amp;quot;0&amp;quot; allowfullscreen=&amp;quot;None&amp;quot;&amp;gt;&amp;lt;/iframe&amp;gt;I&amp;#39;m sure I will be able to add a lot more, and also add all the props
that will make it look like a real Logicoma, but that&amp;#39;s it for a
start.

I actually think that there is a lot of promise for this kind of
hybrid robots that have both wheels for efficient and fast locomotion
over flat terrain, and legs for getting through rough terrain, stairs,
and maybe even climbing. If you look at the robots from this year&amp;#39;s
DARPA Robotics Challenge, many of them have additional wheels on them.





### Using Teensy 3.1
Created 2015-07-02.

One of the topics I intend to cover in those logs is how to extend
Tote with various boards and modules. I&amp;#39;ve already had one log on how
to use Pro Micro instead of Pro Mini, and one on adding an ESP8266
board with Micropython. Now it&amp;#39;s time for the Teensy 3.1.

The Teensy 3.1 is an ARM board very similar in shape to the Pro Mini,
but with much more computing power and lots of pins, both digital and
analog. It&amp;#39;s really a great choice if you have outgrown the Pro Mini.
You can program it just like Arduino, using the Teensyduino IDE. So I
figured my code should just work, right? Wrong.

It actually took me almost 2 weeks to get my code to work. Here&amp;#39;s the
story.

---------- more ----------Connecting the Teensy 3.1 is a little bit tricky. Although the pin
pitch is right, you can&amp;#39;t just plug it into the Pro Mini socket on the
Tote, because the GND pin has been moved to the other side of the
board. Sigh. That&amp;#39;s fine, though, you can just use short wires, or, if
you have a socket, a set of extra-long pin headers and some Dupont
cables:\



:::{image} https://cdn.hackaday.io/images/5343941435843885374.jpg

:::


Then it simply plugs into the Tote socket. Looks a little bit weird,
but should work just fine:


:::{image} https://cdn.hackaday.io/images/5006831435843968794.jpg

:::


Now just adjust the pin numbers in[servos.ino](https://bitbucket.org/thesheep/tote/src/806a193584f9e4653414de2dd4f55ba884f0502d/start/servos.ino?at=teensy31#cl-9), remove the IR code (it&amp;#39;s based on AVR interrupts, so probably won&amp;#39;t
work on Teensy), and we are ready to go. Another super-easy
conversion.Except that it doesn&amp;#39;t work. As soon as the robot is witched on, it
gets an attack of epilepsy, twitching its legs randomly. Why?**Why?**

Now, the &amp;quot;fun&amp;quot; part of the project started. I began with the absolute
low-level, checking first if the Servo library example works. It
worked correctly. Then I proceeded to debug the_servos.ino_ code, making sure that each servo really moves to the angle it has
been told to move to. Everything seems to be in order. Hmph.

That means that the error must be somewhere in the inverse kinematics
code. I was afraid of that. But the code works perfectly fine on the
Pro Mini and other AVR-based Arduinos. So what could be wrong?

Someone told me that the_abs()_funtion may be not defined for floating point numbers, so I replaced
it with a call to_max(a, -a)_. No joy. Someone else told me that the AVR doesn&amp;#39;t really have
&amp;quot;double&amp;quot; type, and that it is in fact just normal &amp;quot;float&amp;quot;. So I tried
changing all types to &amp;quot;float&amp;quot;. Nope. Then changing all the
trigonometric functions to their float versions. No. Verifying all
loops for buffer overruns and adding sentinel conditions checking for
correct ranges. Still nothing.

Finally, the time has come to disconnect the Teensy 3.1 from Tote and
do some serious debugging over the serial. After placing a lot of
strategically planned print statements, a pattern started to emerge.
It seemed that sometimes a value would suddenly be multiplied by 255.
How come? Add more print statement to also display the constants and
tables I used, and I found the problem.

Turns out that the[char type is unsigned by default on ARM](http://blog.cdleary.com/2012/11/arm-chars-are-unsigned-by-default/). And I had some tables with just values like 1 and -1 for tuning
various parameters. And of course all those -1s have become 255s, and
the robot went crazy.

After replacing the chars with ints, everything went more or less
smoothly:

&amp;lt;iframe style=&amp;quot;width: 500px; height: 281px;&amp;quot; width=&amp;quot;500&amp;quot; height=&amp;quot;281&amp;quot; src=&amp;quot;//www.youtube.com/embed/7N34Yd2vMS0&amp;quot; frameborder=&amp;quot;0&amp;quot; allowfullscreen=&amp;quot;None&amp;quot;&amp;gt;&amp;lt;/iframe&amp;gt;Remember kids, don&amp;#39;t write &amp;quot;char&amp;quot; when you mean &amp;quot;int8&amp;quot;!





### Schematics
Created 2015-06-30.

I&amp;#39;ve been asked to provide schematics of the PCB. I must admit, that I
neglected that part a little, mostly doing all modifications and
connections directly in the PCB view, but now I cleaned up the
schematic view a little better.

Here&amp;#39;s the schematic for PCB2 (the ones I&amp;#39;ve been giving out and which
you can order from dirtypcbs):


:::{image} https://cdn.hackaday.io/images/4884381435678665774.png

:::


And here is the reworked PCB3, which will be available soon (I need to
order and test it first):


:::{image} https://cdn.hackaday.io/images/5357061435679907164.png

:::


As you can see, there isn&amp;#39;t really much to it, it&amp;#39;s mostly connections
for all the servos and the small voltage divider for battery
monitoring.





### PCB Redesign
Created 2015-06-26.

After the recent failures and after using the Tote&amp;#39;s PCB in a couple
of different projects, I decided that some changes are needed to the
design. Here is[the new PCB](https://bitbucket.org/thesheep/tote/src/tip/fritzing/pcb3.fzz):


:::{image} https://cdn.hackaday.io/images/6927631435323642206.png

:::


---------- more ----------There are several changes compared to the previous one:


 * a nice logo on the silkscreen,
 * the board is square again,
 * removed the additional holes,
 * the servo connectors are moved slightly, to make more room for screws,
 * battery connector moved to the front edge of the board,
 * removed the HC-SR04 sensor header, since it doesn&amp;#39;t work reliably,
 * reordered the IR sensor pins to match the pinouts of my sensors,
 * added a header for connecting a piezo speaker, for making noises,
 * added pins for A6 and A7 gpios of the Pro Mini, for both 3.3V and 5V
versions,
 * you no longer need to add a jumper, that place has a connection by
default, and you can cut the trace if you want to connect a voltage
regulator,
 * there is another trace you can cut to be able to disconnect power to
the servos, but still have the Pro Mini and all the sensors powered.

Don&amp;#39;t worry, the old board will not stop working, and I will still
support it. The changes are not that big anyways -- I made sure that I
don&amp;#39;t change any pin numbers or anything similar, which would make the
software incompatible.

I haven&amp;#39;t ordered the new boards yet, so there is no link for ordering
them. I will wait a couple more days for ideas for more improvements,
and then order them.





### Failure: HC-SR04 Distance Sensor
Created 2015-06-23.

What is a robot without sensors? Just a remote-controlled toy! It&amp;#39;s
time to add some external sensors to Tote.

If you looked at the[PCB](http://tote.readthedocs.org/en/latest/_images/pcb2a.png), you probably noticed the four pins broken out at the bottom. Yes,
they match the pinout of a cheap HC-SR04 ultrasonic range finder. It
should be a great way to add some obstacle avoidance or person
following capabilities to Tote, just like its older brother µKubik
has.

---------- more ----------\


&amp;lt;iframe style=&amp;quot;width: 500px; height: 281px;&amp;quot; width=&amp;quot;500&amp;quot; height=&amp;quot;281&amp;quot; src=&amp;quot;//www.youtube.com/embed/qmuZv3mmvRI&amp;quot; frameborder=&amp;quot;0&amp;quot; allowfullscreen=&amp;quot;&amp;quot;&amp;gt;&amp;lt;/iframe&amp;gt;So let&amp;#39;s do it. The trigger pin is connected to pin 3 on the Arduino,
and the echo is on pin 13 -- yes, I ran out of pins and had to reuse
the LED pin for this. As a side effect, the LED blinks every time we
read the distance. A quick sketch to test the sensor:

```cpp
#define TRIG_PIN 3#define ECHO_PIN 13voidsetup(){    Serial.begin(115200);    pinMode(TRIG_PIN, OUTPUT);    pinMode(ECHO_PIN, INPUT);  }voidloop(){unsignedlongint duration, distance;      digitalWrite(TRIG_PIN, LOW);
delayMicroseconds(2);    digitalWrite(TRIG_PIN, HIGH);    delayMicroseconds(10);    digitalWrite(TRIG_PIN, LOW);    duration = pulseIn(ECHO_PIN,
HIGH);    distance = duration /58.2;    Serial.print(distance);    Serial.println(&amp;quot; cm&amp;quot;);    delay(500);  }```

And lo and behold, proper readings:&amp;lt;iframe style=&amp;quot;width: 500px; height: 281px;&amp;quot; width=&amp;quot;500&amp;quot; height=&amp;quot;281&amp;quot; src=&amp;quot;//www.youtube.com/embed/_Bw_2RLY4qY&amp;quot; frameborder=&amp;quot;0&amp;quot; allowfullscreen=&amp;quot;&amp;quot;&amp;gt;&amp;lt;/iframe&amp;gt;Yay, so that&amp;#39;s it, right? Now just add[some basic logic to the code](https://bitbucket.org/thesheep/tote/src/eda3cc49cbb6e0774d22d0e6b12d5ccc45cfd3c9/start/ping.ino?at=ping) to make the robot stop when there is an obstacle in front, and we are
ready to go, right? Wrong.

For some reason, the robot stop immediately after the first step.
What&amp;#39;s happening?

OK, let&amp;#39;s connect the serial and see. The distance readings are all 0.
Why? Disconnect the battery, connect the Pro Mini to the USB and look
again. Readings are all connect. Disconnect the USB power and run it
from battery -- 0 again. Argh.

Wait a minute. The Pro Mini actually has VCC at 5V while it&amp;#39;s being
powered from the USB cable, and 3.3V when it runs from the battery...
What were the power requirements of that HC-SR04 sensor again? Where
is the[datasheet](http://www.elecfreaks.com/store/download/HC-SR04.pdf)...

Right, working voltage 5V. Sigh. Of curse I did check that before when
I was designing the board, but back then I still wanted to use a 5V
Pro Mini, and a voltage regulator. I later switched to 3.3V and
completely forgot about the sensor. So what can be done?

Well, looking at what I have lying around I took a 5V Pro Mini, a 2S
LiPo battery and a 5V voltage regulator, and quickly replaced Tote&amp;#39;s
guts.**Warning**: the 5V Pro Mini doesn&amp;#39;t have the RAW pin separated from the VCC pin
like the 3.3V version does, so don&amp;#39;t connect it to the USB2TTL while
it&amp;#39;s in the robot -- the power draw will quickly fry the power
regulator in Pro Mini. You have to remove it for programming.

&amp;lt;iframe style=&amp;quot;width: 500px; height: 281px;&amp;quot; width=&amp;quot;500&amp;quot; height=&amp;quot;281&amp;quot; src=&amp;quot;//www.youtube.com/embed/QjZ5rQOpvEw&amp;quot; frameborder=&amp;quot;0&amp;quot; allowfullscreen=&amp;quot;&amp;quot;&amp;gt;&amp;lt;/iframe&amp;gt;You can see that now it kinda works, except for random times when the
sensor returns completely weird values. Maybe the sensor is broken?
Replacing the sensor didn&amp;#39;t help much. Taking three readings in a
quick succession and taking maximum of them didn&amp;#39;t help either -- it
seems, that the sensor just has some moments when the readings are
consistently bad. I can&amp;#39;t think of a solution.

While this is a failure, I thought that I will publish it anyways, as
even the failures give us something to learn from -- often even more
than the successes. And speaking of failures, remember how I promised
to connect a Raspberry Pi to Tote? That&amp;#39;s too cancelled for the moment
-- my A+ RPI suddenly stopped working, the power LED won&amp;#39;t shine, the
activity LED shines weakly when powered from USB, and not at all when
powered through the pins. I guess I have a streak of bad luck. Oh
well.





### Remote control with ESP8266 and Micropython
Created 2015-06-17.

Since some time I was planning to write a log about how to extend Tote
with additional boards. I was planning to show examples of connecting
the Raspberry Pi, Teensy 3.1, ESP8266 and anything else I could find,
all running different kinds of Python. That would also let me score
more points in the &amp;quot;[mountain of prizes](http://hackaday.com/2015/06/08/a-mountain-of-prizes-for-projects-using-these-parts/)&amp;quot; as those boards use chips from all kinds of manufacturers, and I
could claim then that Tote &amp;quot;uses&amp;quot; them. But reality as always
interferes.---------- more ----------

Raspberry Pi now requires at least 3GB SD card for its system image,
and turns out I don&amp;#39;t have any that big around.

The Micropython port for Teensy 3.1 doesn&amp;#39;t yet support UART (even
though the module with all the functions is there, they just do
nothing).

The Micropython port for ESP8266 doesn&amp;#39;t have enough room for my
Python code for controlling the robot.

So I had to settle down to just showing how to do remote control over
something else than a TV remote. I&amp;#39;m still using the ESP8266 with
Micropython on it, except instead of controlling the motions of the
whole robot with it, as I planned, I&amp;#39;m just passing the keypresses
from the computer, and the Arduino still takes care of moving the
legs. Oh well. It still took me several hours of debugging to get
working.

Let&amp;#39;s start with a very simple thing -- controlling the robot over a
serial cable, connected directly to an USB2TTL module stuck in your
computer&amp;#39;s USB port. You need three wires: GND, TX and RX. You connect
them to the FTDI header on the Pro Mini, and to the USB2TTL in
following way:


 * GND ↔ GND
 * RX ↔ TX
 * TX ↔ RX

By the way, this is also an excellent way of debugging the robot --
you can print stuff to the serial console and verify that the program
does what you think it should. Anyways, you will need some extra code
on your Pro Mini too. There are two ways to go about this.

You can just have a very simple[servo controller](https://bitbucket.org/thesheep/ukubik/src/tip/ukubik/) on the Arduino side, and feed it servo positions every frame from the[Python code for the gaits](https://bitbucket.org/thesheep/ukubik/src/tip/creep.py). That&amp;#39;s exactly what the[#µKubik quadruped robot](/project/3300) does, except instead of a serial cable it uses serial over Bluetooth.
But the code is the same. This gives you a lot of control on the
Python side.

The other way is to leave all the[Arduino code from original Tote](https://bitbucket.org/thesheep/tote/src/tip/start/), but replace the TV remote part with[code that simply reads the key presses from the serial](https://bitbucket.org/thesheep/tote/src/460f15fa2da489125bb3ade9d76b81fb3b1b60ad/start/serial.ino?at=serial-control). That&amp;#39;s the route we are going to take, and it looks like this:

&amp;lt;iframe style=&amp;quot;width: 500px; height: 281px;&amp;quot; width=&amp;quot;500&amp;quot; height=&amp;quot;281&amp;quot; src=&amp;quot;//www.youtube.com/embed/Da69xJNugLQ&amp;quot; frameborder=&amp;quot;0&amp;quot; allowfullscreen=&amp;quot;None&amp;quot;&amp;gt;&amp;lt;/iframe&amp;gt;Now, let&amp;#39;s replace that cable with something a little bit more modern.
ESP8266 is all the rage these days, and there is a highly experimental
port of Micropython for it, so why not? Those ESP-01 boards are not
too useful anyways, because they have hardly any pins broken out, but
they are enough for our purpose, as the RX and TX pins are there. I
began by making a simple rig for programming them:


:::{image} https://cdn.hackaday.io/images/9500271434528311364.jpg

:::


Then I followed the excellent[Adafruit tutorial on flashing Micropython to ESP8266](https://learn.adafruit.com/building-and-running-micropython-on-the-esp8266) and got a working console. Yay! Now, diving into[recently added documentation](https://github.com/micropython/micropython/tree/master/docs/library), I figured out how to write a simple &amp;quot;repeater&amp;quot; server:

```python
import espimport sysdefrecv(socket, data):      sys.stdout.write(data)    socket = esp.socket()
socket.onconnect(lambda s: s.onrecv(recv))  socket.bind((&amp;#39;0.0.0.0&amp;#39;,2323))  socket.listen(1)```

It just prints on the console anything it gets on port 2323. I saved
that as_esp8266/scripts/main_._py_ and recompiled -- the ESP9266 port of Micropython doesn&amp;#39;t yet have
filesystem support, so you have to add all files to the firmware
itself. Then restart, get to the console with_USB2TTL_, and make it connect to the WiFi:

```python
import network  network.connect(&amp;#39;your ssid&amp;#39;,&amp;#39;your password&amp;#39;)```

That gets remembered, so you don&amp;#39;t have to do it every time. Quick
test of the server using_netcat_:```ruby
$nc192.168.0.132323  xxx  h  ddddd  x```

And we are finished on this side. Or so I thought. But we will get to
that. Now, for the robot side, I flashed that &amp;quot;serial control&amp;quot; version of
the Tote code to the Pro Mini, and made a simple connector for the
ESP8266 using some female headers, two-sided tape and a bunch of
wires:


:::{image} https://cdn.hackaday.io/images/6642121434528945481.jpg

:::


It fits nicely on the_FTDI_ connector on top of the robot:


:::{image} https://cdn.hackaday.io/images/2532981434529049651.jpg

:::


Now let&amp;#39;s test it. I made it so that after powering on, the robot does
nothing and waits for &amp;quot;xx&amp;quot; on the serial -- that&amp;#39;s because many boards
will print random stuff to serial while booting, and you don&amp;#39;t want
that to be interpreted as commands. So I switch the robot on, send
&amp;quot;xx&amp;quot; and... nothing. What?

Fast forward four hours. I&amp;#39;m up to my ears in debugging. Tried 3
different ESP8266 boards and 3 different Pro Minis, debugged it using_SoftwareSerial_ and by connecting the RX pin to the ESP and the TX one to the_USB2TTL_, one exceptionally helpful fellow on the_#arduino_ IRC channel even wrote a serial-forwarding code for me in low-level
AVR C. The outcome? Both the Pro Mini and ESP8266 work perfectly fine
when connected to the computer through_USB2TTL_. But as soon as you connect them to each other and try to transmit
serial data at 115200 baud rate, half the data gets corrupted. That&amp;#39;s
over a 4mm long wire. Adding pullups, pulldowns, capacitors, etc.
doesn&amp;#39;t help. I sat over this until the small hours of the night, but
didn&amp;#39;t figure out a solution. I guess I will need to start saving for
an osciloscpe.

After a night&amp;#39;s sleep, I went back to that Micropython code, grepped
for &amp;quot;115200&amp;quot;, and changed it to &amp;quot;9600&amp;quot;, recompiled, flashed, changed
the speed on the Arduino side and what do you know, it works!

&amp;lt;iframe style=&amp;quot;width: 500px; height: 281px;&amp;quot; width=&amp;quot;500&amp;quot; height=&amp;quot;281&amp;quot; src=&amp;quot;//www.youtube.com/embed/4HnUbrXEJcQ&amp;quot; frameborder=&amp;quot;0&amp;quot; allowfullscreen=&amp;quot;None&amp;quot;&amp;gt;&amp;lt;/iframe&amp;gt;Next I will try to get that SD card for the RPI and show you the more
low-level control. Who knows, maybe by this time the picam also
arrives, and we can have some OpenCV fun.





### Using Arduino Pro Micro
Created 2015-06-10.

You can use Arduino Nano instead of the Pro Mini in Tote, if you
prefer to have that USB socket available. Apart from the fact that the
Nano has the USB2TTL build into it, there are no differences, so it
should all work. However, I don&amp;#39;t have a spare Nano around, so I
haven&amp;#39;t actually tested it. Caveats may appear.

Such caveats appeared when I decided to test it with a Pro Micro
instead. Pro Micro is the miniaturized (both in size and price)
version of Arduino Leonardo. It uses ATMega32u and has the USB support
right on the chip, which makes it easy to program it as a keyboard or
mouse. It also has a form factor similar to the Pro Mini, so let&amp;#39;s see
if we can use it.

---------- more ----------First of all,**never plug your Pro Micro to the USB while it&amp;#39;s in the robot.**The power lines are connected, and the servos draw so much current,
that it will instantly fry the on-board regulator on the Pro Micro.
That means, that you have to go with the socket version of the PCB,
not solder the module directly.**I am serious here, I fried one poor Pro Micro this way.**

Second, the pin numbers and interrupts are different. You will need to
edit_servos.ino_and change the whole right side of the robot, from_&amp;quot;__12, 11, 10,__14, 15, 16&amp;quot;_to_&amp;quot;__14, 16, 10,__A0, A1, A2&amp;quot;_ so that it corresponds with the pin numbers that are in those places.
The LED pin, that used to be_13_ on the Pro Mini is_14_ on the Pro Micro, and shifted by one in its position -- we can&amp;#39;t
really do anything about it, the LED will shine all the time due to
the servo PWM signal that it gets.

The pin interrupts are different too, so you will need to edit_ir.ino._ However, changing the interrupt number from 0 to 1 didn&amp;#39;t seem to
make the IR sensor work again, so there might be some more magic
involved, or there is a bug in the IRLremote library that I&amp;#39;m using.


:::{image} https://cdn.hackaday.io/images/5507651433942197303.jpg

:::






### Dirty PCBs are dirty
Created 2015-06-09.

For everyone who have ordered the PCB for Tote from[Dirty PCBs](http://dirtypcbs.com/view.php?share=6918&amp;amp;accesskey=97f6a684899c11fcc50da07808869f5d) just a quick note. Remember, that it&amp;#39;s the cut-throat cheap
prototyping boards, and mistakes do happen. They are often simple to
work around, but do test your boards for shorts before soldering
anything or, especially, connecting a battery to the soldered board. I
just had another batch arrive, and there is a small mistake on them:


:::{image} https://cdn.hackaday.io/images/9912351433841942696.jpg

:::


The pads for the optional SMD capacitor are covered in soldermask, so
you have to scratch them out before soldering the capacitor, if you
want to have battery voltage monitoring, that is.





### Proprioception on the Cheap
Created 2015-06-04.

Remember that time when you sat on your leg for some time, and it got
numb, and when you got up, it felt all wooden and walking was like
walking on stilts? That&amp;#39;s how most walking robots feel. What happened
is your nerves got squished and blocked a little, and you lost your[sense of proprioception](https://en.wikipedia.org/wiki/Proprioception) -- the position and forces of your limbs. Now you know why robots
that don&amp;#39;t have force and position sensors on them have such a hard
time walking!

What if we could add this sense to our robot? It would still be blind
and deaf, but at least it would have a sense of self. It could feel
its way around, knowing if a leg is standing on the floor or floating
in the air, knowing if there is something blocking its movement. If we
got smart with programming, we could even make it &amp;quot;obedient&amp;quot; and go in
the direction you push it, just like this robot:

&amp;lt;iframe style=&amp;quot;width: 500px; height: 281px;&amp;quot; width=&amp;quot;500&amp;quot; height=&amp;quot;281&amp;quot; src=&amp;quot;//www.youtube.com/embed/AMVO6rI5mL4&amp;quot; frameborder=&amp;quot;0&amp;quot; allowfullscreen=&amp;quot;None&amp;quot;&amp;gt;&amp;lt;/iframe&amp;gt;OK, well, maybe not as well. After all, we have limited budget and
time. Plus programming the algorithm that calculates the overall force
from the feedback from all the joint could be a challenge...

But at the minimum we could make our robot stop when it arrives at the
edge of the table and tries to put one of its legs in the abyss beyond
it. Or when we pick it up.

So how do we do it? We could attach additional sensors to the legs --
encoders for the position and pressure sensors for touch and force. I
checked the parts -- they are either expensive or problematic to mount
on such a robot. But wait, doesn&amp;#39;t the hobby servo already know its
position? Why not use that?

The first approach was to use an additional wire added to the servo&amp;#39;s
potentiometer to read its position. I used this[excellent guide on modifying the servo](http://letsmakerobots.com/content/sensing-your-servos-position). It worked. Kinda. But not as well as I hoped. The problem is that to
deduce what force is applied on the leg, I need to calculate the
difference between the desired position of the servo and the actual
position. This difference is going to be small, because the servo&amp;#39;s
electronics are working hard to correct it. Turns out that they are
smaller than the noise, even if I add filtering capacitors and
software filters. Oh well.

Then I realized that the servo&amp;#39;s electronics is actually already
calculating the force, for its own purposes. Can I somehow plug into
that? What if instead of reading the pot&amp;#39;s position, I would simply
read the voltage that the servo is applying to its motor? Turns out
that this works quite well, at least with the SG90 servos that I have.
Here&amp;#39;s an experiment that I performed to test a &amp;quot;compliant motion&amp;quot;
servo:

&amp;lt;iframe style=&amp;quot;width: 500px; height: 281px;&amp;quot; width=&amp;quot;500&amp;quot; height=&amp;quot;281&amp;quot; src=&amp;quot;//www.youtube.com/embed/Ms8yTKYebaI&amp;quot; frameborder=&amp;quot;0&amp;quot; allowfullscreen=&amp;quot;None&amp;quot;&amp;gt;&amp;lt;/iframe&amp;gt;I soldered an additional wire to the servo&amp;#39;s motor, like this:\



:::{image} https://cdn.hackaday.io/images/2507231433409447350.jpg

:::


I also had to make the hole in the cover a little bit larger, to fit
the extra wire:
:::{image} https://cdn.hackaday.io/images/6186631433409502496.jpg

:::


Now, just connect the extra wire to one of the free analog pins on the
Pro Mini:
:::{image} https://cdn.hackaday.io/images/407621433409552947.jpg

:::


As you can see, the robot also uses a voltage regulator that I
described in[the previous log](https://hackaday.io/project/6050-tote-affordable-spider-robot/log/18738-different-power-sources). That&amp;#39;s because I need the voltage readings from the motors to be
consistent, and not depend on how much juice is left in the battery.Now just a simple addition to the walking algorithm. Every time you
put your leg down, wait for the servo to get there, and then read the
force from it. If the force is too small, stop. I also made all the
other legs move up slightly just before the reading, to shift the
weight more to the leg that we are interested in. The result is not
very pretty yet, but I&amp;#39;m sure I can tweak it to look better:

&amp;lt;iframe style=&amp;quot;width: 500px; height: 281px;&amp;quot; width=&amp;quot;500&amp;quot; height=&amp;quot;281&amp;quot; src=&amp;quot;//www.youtube.com/embed/Q08YaEeYNSg&amp;quot; frameborder=&amp;quot;0&amp;quot; allowfullscreen=&amp;quot;None&amp;quot;&amp;gt;&amp;lt;/iframe&amp;gt;With some tricks, I might even be able to make it walk on uneven
terrain without additional endstop switches at the ends of the legs.


# Update 2015-06-10:

A friend of mine ran some of those servos through an oscilloscope, to
see how the voltage on both of the motor wires looks like. Here&amp;#39;s the
servo going one way, stopping for a moment, and then going the other
way:


:::{image} https://cdn.hackaday.io/images/6523361433962373953.png

:::


You can see that when stopped, the motor floats at about 2.3V, and
goes up to 5.7V or almost to 0V when moving. You can also see that
there is quite a lot of oscillating at the end, when it overshoots and
corrects:


:::{image} https://cdn.hackaday.io/images/1875031433962508897.png

:::


An interesting thing happens when you reverse the direction without
stopping:


:::{image} https://cdn.hackaday.io/images/6556091433962558341.png

:::


One of the motor leads gets high voltage long before the other gets
low. Since what drives the motor is the difference, this gives the
motor some time to stop and reverse, before applying the full force.





### Different Power Sources
Created 2015-05-31.

Power source is a hard problem for any walking or flying robots.
Unlike the robots that roll on wheels (or tracks), walkers have to
carry its own weight, and the battery can be easily the heaviest part
of the robot. They also tend to draw quite a lot of current for their
many actuators, so that further limits the choices.

For the base Tote, I went with a single-cell LiPo battery, mostly
because they have the best weight-to-power ratio, and they are
relatively easy to get, either from hobby model shops, from
electronics shops, or from discarded cellphones, electric
toothbrushes, etc. but there are other possibilities.

**Alkaline batteries** are well known by the robot experts as absolutely the crappiest
batteries you could use for your robot. Not only they are heavy, but
also the current you can draw from them is almost nothing, and they
will discharge pretty quickly, after which you can simply throw them
away. So can Tote be powered with alkaline batteries? Let&amp;#39;s find out!

&amp;lt;iframe style=&amp;quot;width: 500px; height: 281px;&amp;quot; width=&amp;quot;500&amp;quot; height=&amp;quot;281&amp;quot; src=&amp;quot;//www.youtube.com/embed/SZiQHDCJas0&amp;quot; frameborder=&amp;quot;0&amp;quot; allowfullscreen=&amp;quot;None&amp;quot;&amp;gt;&amp;lt;/iframe&amp;gt;As you can see, you can, but not for very long. But it&amp;#39;s nice to see
that Tote can actually lift them. That means that I could probably
swap them for some**NiMH** or**NiCd** rechargeable batteries, and it would be all good. Let&amp;#39;s see!

&amp;lt;iframe style=&amp;quot;width: 500px; height: 281px;&amp;quot; width=&amp;quot;500&amp;quot; height=&amp;quot;281&amp;quot; src=&amp;quot;//www.youtube.com/embed/7EXs-lPbF28&amp;quot; frameborder=&amp;quot;0&amp;quot; allowfullscreen=&amp;quot;None&amp;quot;&amp;gt;&amp;lt;/iframe&amp;gt;That actually went pretty well! Apart from some weight-shifting
problems, I would probably need to find a better way of attaching
them. Also, using AAA cells instead of AA would improve the weight,
but unfortunately I don&amp;#39;t have any AAA rechargeable batteries on me at
the moment. Finally, a**LiPo** battery salvaged from a broken power bank, for comparison.

&amp;lt;iframe style=&amp;quot;width: 500px; height: 281px;&amp;quot; width=&amp;quot;500&amp;quot; height=&amp;quot;281&amp;quot; src=&amp;quot;//www.youtube.com/embed/2oY1tgPdmVQ&amp;quot; frameborder=&amp;quot;0&amp;quot; allowfullscreen=&amp;quot;None&amp;quot;&amp;gt;&amp;lt;/iframe&amp;gt;That huge battery should keep it going whole day.

Now, let&amp;#39;s look at some more advanced hack. For an experiment with
force-sensing servos, that I will describe separately at some point, I
needed the voltage given to the servos to be constant, so that I would
get consistent readings. The obvious solution is to add a switching
voltage regulator (an**UBEC**), and I actually thought about that when designing Tote&amp;#39;s printed
circuit board, so there is a place for it:\



:::{image} https://cdn.hackaday.io/images/7729521433080757411.jpg

:::


It&amp;#39;s conveniently located just after the power switch and the voltage-
monitoring circuit, so that those two will still work correctly. One
problem that I had is that this regulator needs higher voltage to
regulate it_down_to the voltage desired, so I needed to use a battery with higher
voltage. So I used a 2S**LiFePo4**battery here. What is that? They are all the rage these days among the
power flashlight geeks. They are similar to LiPo batteries, except
they are much stabler both chemically and electrically, giving pretty
good 3.3V voltage and not exploding if you as much as look at them
funny. Unfortunately, you need a special charger for them -- the LiPo
charging modules are no good.

Of course, for experiments on your desktop, you can always just plug
the robot into a bench power supply, and have it drag a cable behind.
It&amp;#39;s actually more convenient than having to recharge or swap
batteries all the time. Unfortunately you can&amp;#39;t simply power this
robot from your computer&amp;#39;s USB. It needs way more power than the 500mA
the USB standard specifies.

That concludes my experiments with power sources. As you can see, you
have a lot of choices.





### Hacking on Tote
Created 2015-05-31.

Since Tote evolved from[µKubik](https://hackaday.io/project/3300-kubik-quadruped-robot), I put all updates about it there. But now that it is pretty much
ready, I&amp;#39;m going to do some experimenting and extending and hacking on
it, and I think it makes sense to have a separate project page for
that, and leave the Python-powered µKubik alone.



&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/section&gt;
&lt;/section&gt;
&lt;/section&gt;
</content>
    <link href="http://deshipu.art/projects/project-6050/" rel="alternate"/>
    <summary>Affordable spider robot</summary>
    <category term="2015HackadayPrize" label="2015HackadayPrize"/>
    <category term="ROBOT" label="ROBOT"/>
    <category term="atmel" label="atmel"/>
    <category term="hardware" label="hardware"/>
    <category term="ongoingproject" label="ongoing project"/>
    <category term="quadruped" label="quadruped"/>
    <category term="robots" label="robots"/>
    <published>2015-05-31T00:00:00+02:00</published>
  </entry>
</feed>
