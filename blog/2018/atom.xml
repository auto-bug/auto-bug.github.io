<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
  <id>http://deshipu.art/</id>
  <title>deshipu.art - Posted in 2018</title>
  <updated>2024-08-07T20:31:59.269905+00:00</updated>
  <link href="http://deshipu.art/"/>
  <link href="http://deshipu.art/blog/2018/atom.xml" rel="self"/>
  <generator uri="https://ablog.readthedocs.org/" version="0.10.33">ABlog</generator>
  <entry>
    <id>http://deshipu.art/projects/project-27257/log-148636/</id>
    <title>Tented Vias</title>
    <updated>2018-07-02T00:00:00+02:00</updated>
    <content type="html">&lt;section id="tented-vias"&gt;

&lt;p&gt;Published on 2018-07-02 in &lt;a class="reference internal" href="../../projects/project-27257/#project-27257"&gt;&lt;span class="std std-ref"&gt;Fritzing Tricks&lt;/span&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;This trick was originally described by &lt;a class="reference external" href="https://hackaday.io/hacker/72667"&gt;&amp;#64;Arduino Enigma &lt;/a&gt; in the &lt;span class="xref std std-ref"&gt;project-91895&lt;/span&gt; . Tented vias are vias that are covered with soldermask. If you think
about it for a moment, there is really no reason for a via to be
exposed (unless you re-use it as a test point). Its job is to connect
the layers, and it does it as well when it is covered. On the other
hand, when it’s covered, the risk of shorting it is smaller, and the
board can look much better.&lt;/p&gt;
&lt;p&gt;Unfortunately Fritzing doesn’t normally give you the option to have
the vias tented. But there is a simple trick to add the soldermask
over them when you are generating the gerbers. Start by generating
your gerber files as usual, and once you do that, select_Routing→Select All Vias_ from the menu, and press the Del key to delete them. It will also
delete some of the traces, but don’t worry about it. Now generate
another set of gerber files, in a separate directory, and close
Fritzing without saving the file.&lt;/p&gt;
&lt;p&gt;Now all you have to do is to copy the_maskTop, maskBottom, silkTop_ and_silkBottom_ files from the latter directory to the former, and voila, your vias
are now covered with soldermask. You can also only copy only some of
those files to only have the vias covered on one side of the board.&lt;/p&gt;
&lt;/section&gt;
</content>
    <link href="http://deshipu.art/projects/project-27257/log-148636/" rel="alternate"/>
    <summary>Published on 2018-07-02 in project-27257.</summary>
    <published>2018-07-02T00:00:00+02:00</published>
  </entry>
  <entry>
    <id>http://deshipu.art/projects/project-21578/log-149325/</id>
    <title>Making it Cheaper Again</title>
    <updated>2018-07-14T00:00:00+02:00</updated>
    <content type="html">&lt;section id="making-it-cheaper-again"&gt;

&lt;p&gt;Published on 2018-07-14 in &lt;a class="reference internal" href="../../projects/project-21578/#project-21578"&gt;&lt;span class="std std-ref"&gt;PewPew FeatherWing&lt;/span&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The PewPew Lite FeatherWing is one of my favorite designs, and I think
it’s really great for learning programming games — actually better
than the &lt;a class="reference internal" href="../../projects/project-27629/#project-27629"&gt;&lt;span class="std std-ref"&gt;µGame&lt;/span&gt;&lt;/a&gt; , because it’s so much simpler. The shield itself is pretty cheap,
too. Unfortunately, you still need to have a Feather M0 (or, even
better, M0 Express) to use it, and that’s actually twice as expensive
as the shield itself. Add the LiPo battery to the mix, and you could
instead buy an ODROID GO or something similar. This is problematic
especially if you want to organize a workshop — you either make a
workshop for the rich, or find a sponsor.&lt;/p&gt;
&lt;p&gt;I have already tried to lower the price of the whole thing by putting
the microcontroller directly on the device — basically copying the
Trinket M0 schematic for that — but the resulting device was pretty
complex to make, and I was never quite happy with it. Plus, you still
needed the LiPo battery and its charging circuit and all that.&lt;/p&gt;
&lt;p&gt;Today I sat down and redesigned the latest version of PewPew
completely, using the knowledge I gained from µGame and from the &lt;span class="xref std std-ref"&gt;project-100853&lt;/span&gt; to simplify it as much as possible, while still keeping its basic
functionality. That’s how I came up with PewPew 6.0:&lt;/p&gt;
&lt;img alt="projects/project-21578/images/9513911531579693448.png" src="projects/project-21578/images/9513911531579693448.png" /&gt;
&lt;p&gt;It’s exactly the size of two AA batteries, because that’s what it is
going to be using for power. It uses the good old HT16K33 chip, just
like the PewPew Lite, which simplifies things a lot. However, the
buttons are handled directly by the microcontroller now, because to
have them handled by the HT16K33, I would need six extra resistors,
and I tried to minimize the parts count. To get rid of Shottky diodes
or transistors for isolating the USB VBUS, I simply used the power
switch to switch between the battery power and the USB power. I might
even skip the voltage regulator and make it always run on battery
power. Apart from that, there are the six buttons, the bi-color
matrix, the SAMD21 microcontroller itself, two pull-up resistors for
the I2C bus and two filter capacitors — that’s it. Everything is
routed on the top layer of the PCB (the bottom is one big ground
plane), and all parts (except for the battery holder) are mounted on
top, to simplify assembly. I’m using the QFN version of SAMD21,
because it’s slightly cheaper.&lt;/p&gt;
&lt;p&gt;I considered using other chips than the HT16K33 for driving the
matrix, in particular, simple shift registers to do all the work in
the microcontroller, but in the end the HT16K33 is cheap enough and
does all the work for me. In the future, I might consider switching to
charlieplexed SMD bi-color LEDs and driving them from the MCU pins
directly — that would probably shave a few dollars from the BOM at the
cost of more work with assembling it.&lt;/p&gt;
&lt;/section&gt;
</content>
    <link href="http://deshipu.art/projects/project-21578/log-149325/" rel="alternate"/>
    <summary>Published on 2018-07-14 in project-21578.</summary>
    <published>2018-07-14T00:00:00+02:00</published>
  </entry>
  <entry>
    <id>http://deshipu.art/projects/project-27853/log-152772/</id>
    <title>Creeping Back to Life</title>
    <updated>2018-09-12T00:00:00+02:00</updated>
    <content type="html">&lt;section id="creeping-back-to-life"&gt;

&lt;p&gt;Published on 2018-09-12 in &lt;a class="reference internal" href="../../projects/project-27853/#project-27853"&gt;&lt;span class="std std-ref"&gt;H-Cam&lt;/span&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Yes, this project spent quite a bit of time in a drawer. I got the
AMG8833 sensor to play with, but I didn’t really have a good idea
about what I want to do with it. Then I designed this PCB with a
footprint for that sensor, an atmega and a LED matrix, hoping that
with enough magic I can make it into a kind of thermal camera. Then
the PCB arrived together with a bunch of other PCBs, and got put into
a drawer.&lt;/p&gt;
&lt;p&gt;Fast forward a few months, and the &lt;span class="xref std std-ref"&gt;project-7813&lt;/span&gt; is back. I looked through my projects, and noticed that hey, this PCB
is 2cm on a side to fit the LED matrix, and that’s less than an inch,
so why not. So I submitted it to the contest and promptly forgot about
it.&lt;/p&gt;
&lt;p&gt;Now the deadline is looming, and it would be nice to at least start on
this. So I took the PCB and soldered it up, and also found all the
components that I will need:&lt;/p&gt;
&lt;img alt="projects/project-27853/images/1328911536744914663.jpg" src="projects/project-27853/images/1328911536744914663.jpg" /&gt;
&lt;p&gt;I used the female pin headers in the prototype so that I can remove
the led matrix. The final version will not have them, and the led
matrix will be soldered directly – at least that’s the plan.&lt;/p&gt;
&lt;p&gt;There will also be a lipo battery in there.&lt;/p&gt;
&lt;p&gt;Now I need to write the code for the atmega to handle the led matrix.&lt;/p&gt;
&lt;/section&gt;
</content>
    <link href="http://deshipu.art/projects/project-27853/log-152772/" rel="alternate"/>
    <summary>Published on 2018-09-12 in project-27853.</summary>
    <published>2018-09-12T00:00:00+02:00</published>
  </entry>
  <entry>
    <id>http://deshipu.art/projects/project-27629/log-153524/</id>
    <title>Updated Firmware with CircuitPython 3.2.0</title>
    <updated>2018-09-30T00:00:00+02:00</updated>
    <content type="html">&lt;section id="updated-firmware-with-circuitpython-3-2-0"&gt;

&lt;p&gt;Published on 2018-09-30 in &lt;a class="reference internal" href="../../projects/project-27629/#project-27629"&gt;&lt;span class="std std-ref"&gt;µGame&lt;/span&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;CircuitPython 3.2.0 has been released a while ago, and brings a lot of
bug fixes and some performance improvements. It would be nice to use
it for µGame. Unfortunately, it also had some changes in how audio is
handled, and since that interacted with available memory in ways that
made the example games not work, it required more work on my part than
just rebasing the repository.&lt;/p&gt;
&lt;p&gt;However, I managed to work around the problems, and a new version of
the firmware is now available at &lt;a class="reference external" href="https://github.com/python-ugame/circuitpython/releases/tag/ugame10-3.2.0"&gt;https://github.com/python-
ugame/circuitpython/releases/tag/ugame10-3.2.0&lt;/a&gt; . There is also a release of the Vacuum Invaders game specially
updated for that version of firmware: &lt;a class="reference external" href="https://github.com/python-ugame/vacuum-invaders/releases/tag/3.2.0"&gt;https://github.com/python-ugame/vacuum-invaders/releases/tag/3.2.0&lt;/a&gt; . The other example games, as well as the tutorial, should work
without any changes.&lt;/p&gt;
&lt;p&gt;In order to upgrade your device, you need to download the .uf2 file,
and copy it to the TRINKETBOOT disk that appears when you press the
“reset” button (located next to the direction buttons) twice. Once the
file is copied, the device will reboot with the new firmware in place.&lt;/p&gt;
&lt;/section&gt;
</content>
    <link href="http://deshipu.art/projects/project-27629/log-153524/" rel="alternate"/>
    <summary>Published on 2018-09-30 in project-27629.</summary>
    <published>2018-09-30T00:00:00+02:00</published>
  </entry>
  <entry>
    <id>http://deshipu.art/projects/project-21578/log-155174/</id>
    <title>Replaced by PewPew Standalone</title>
    <updated>2018-10-23T00:00:00+02:00</updated>
    <content type="html">&lt;section id="replaced-by-pewpew-standalone"&gt;

&lt;p&gt;Published on 2018-10-23 in &lt;a class="reference internal" href="../../projects/project-21578/#project-21578"&gt;&lt;span class="std std-ref"&gt;PewPew FeatherWing&lt;/span&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;While this still works and is fully compatible with all other PewPew
boards, and while I still sell it on Tindie, check out the new devices
over at &lt;span class="xref std std-ref"&gt;project-159733&lt;/span&gt; — they are bigger and cheaper, though no color display.&lt;/p&gt;
&lt;/section&gt;
</content>
    <link href="http://deshipu.art/projects/project-21578/log-155174/" rel="alternate"/>
    <summary>Published on 2018-10-23 in project-21578.</summary>
    <published>2018-10-23T00:00:00+02:00</published>
  </entry>
</feed>
